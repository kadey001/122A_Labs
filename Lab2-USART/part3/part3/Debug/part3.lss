
part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000031a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000003b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd6  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000915  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055e  00000000  00000000  0000198f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ed  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e6  00000000  00000000  000024e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000027c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c4 c0       	rjmp	.+392    	; 0x1be <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e1       	ldi	r30, 0x1A	; 26
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b9 d0       	rcall	.+370    	; 0x236 <main>
  c4:	28 c1       	rjmp	.+592    	; 0x316 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 106:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10a:	08 95       	ret

0000010c <USART_Send>:
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	41 f0       	breq	.+16     	; 0x120 <USART_Send+0x14>
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	95 ff       	sbrs	r25, 5
 118:	fd cf       	rjmp	.-6      	; 0x114 <USART_Send+0x8>
 11a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11e:	08 95       	ret
 120:	e8 ec       	ldi	r30, 0xC8	; 200
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <USART_Send+0x18>
 12a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 12e:	08 95       	ret

00000130 <USART_Receive>:
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	41 f0       	breq	.+16     	; 0x144 <USART_Receive+0x14>
 134:	e0 ec       	ldi	r30, 0xC0	; 192
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	ec f7       	brge	.-6      	; 0x138 <USART_Receive+0x8>
 13e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 142:	08 95       	ret
 144:	e8 ec       	ldi	r30, 0xC8	; 200
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 23       	and	r24, r24
 14c:	ec f7       	brge	.-6      	; 0x148 <USART_Receive+0x18>
 14e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 152:	08 95       	ret

00000154 <TimerSet>:
 154:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 158:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 15c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 160:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 164:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 168:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 16c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 170:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 174:	08 95       	ret

00000176 <TimerOn>:
 176:	8b e0       	ldi	r24, 0x0B	; 11
 178:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17c:	8d e7       	ldi	r24, 0x7D	; 125
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 184:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 18e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 192:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 19e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1aa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1ae:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1b2:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 1b6:	8f b7       	in	r24, 0x3f	; 63
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	8f bf       	out	0x3f, r24	; 63
 1bc:	08 95       	ret

000001be <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 1d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1d8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 1dc:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	a1 09       	sbc	r26, r1
 1e4:	b1 09       	sbc	r27, r1
 1e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1ea:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1ee:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1f2:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 1f6:	89 2b       	or	r24, r25
 1f8:	8a 2b       	or	r24, r26
 1fa:	8b 2b       	or	r24, r27
 1fc:	99 f4       	brne	.+38     	; 0x224 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 208:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 210:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 214:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 218:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 21c:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 220:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <main>:

#define uc unsigned char

//Leader Micro Controller Code
int main(void){
	DDRA = 0xFF; PORTA = 0x00;//A OUTPUT
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	81 b9       	out	0x01, r24	; 1
 23a:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;//B Output
 23c:	84 b9       	out	0x04, r24	; 4
 23e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x00; PORTC = 0xFF;//C INPUT
 240:	17 b8       	out	0x07, r1	; 7
 242:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF; PORTD = 0x00;//D OUTPUT
 244:	8a b9       	out	0x0a, r24	; 10
 246:	1b b8       	out	0x0b, r1	; 11

	initUSART(0);//Initialize USART 0 RECIEVING
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	3e df       	rcall	.-388    	; 0xc8 <initUSART>
	initUSART(1);//Initialize USART 1 SENDING
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	3c df       	rcall	.-392    	; 0xc8 <initUSART>

	unsigned long timeInterval = 1000;//1000 ms
	TimerSet(timeInterval);//1 second timer
 250:	68 ee       	ldi	r22, 0xE8	; 232
 252:	73 e0       	ldi	r23, 0x03	; 3
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();//Start timer
 258:	7d df       	rcall	.-262    	; 0x154 <TimerSet>
 25a:	8d df       	rcall	.-230    	; 0x176 <TimerOn>
	uc localLED = 0;
	uc receivingUSART = 0;
	uc sendingUSART = 1;
	unsigned long usartMode = 0;//1 = Leader | 0 = Follower
	uc followerTick = 0;
	uc hasReceived = 0;
 25c:	81 2c       	mov	r8, r1

	uc localLED = 0;
	uc receivingUSART = 0;
	uc sendingUSART = 1;
	unsigned long usartMode = 0;//1 = Leader | 0 = Follower
	uc followerTick = 0;
 25e:	10 e0       	ldi	r17, 0x00	; 0
	TimerOn();//Start timer

	uc localLED = 0;
	uc receivingUSART = 0;
	uc sendingUSART = 1;
	unsigned long usartMode = 0;//1 = Leader | 0 = Follower
 260:	c1 2c       	mov	r12, r1
 262:	d1 2c       	mov	r13, r1
 264:	76 01       	movw	r14, r12

	unsigned long timeInterval = 1000;//1000 ms
	TimerSet(timeInterval);//1 second timer
	TimerOn();//Start timer

	uc localLED = 0;
 266:	b1 2c       	mov	r11, r1
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 268:	c0 ec       	ldi	r28, 0xC0	; 192
 26a:	d0 e0       	ldi	r29, 0x00	; 0
				localLED = USART_Receive(receivingUSART); //store received data
			}
			PORTA = localLED;//Set local LED On/Off after data is transmitted

			if(followerTick == 60) {//If 3 seconds without any data
				usartMode = 1;//Switch to Leader
 26c:	33 24       	eor	r3, r3
 26e:	33 94       	inc	r3
 270:	41 2c       	mov	r4, r1
 272:	51 2c       	mov	r5, r1
 274:	61 2c       	mov	r6, r1
				followerTick = 0;
			} 
			else {
				//followerTick++;
				if(hasReceived) {//Checks if data has been received, if it has then ticker is reset, if not then ticker is incremented.
					hasReceived = 0;
 276:	91 2c       	mov	r9, r1
		else {//Follower
			TimerSet(50);
			PORTB = 0x00;//Leader LED disabled
			
			if(USART_HasReceived(receivingUSART)){//Checks if USART has received data
				hasReceived = 1;
 278:	77 24       	eor	r7, r7
 27a:	73 94       	inc	r7
	unsigned long usartMode = 0;//1 = Leader | 0 = Follower
	uc followerTick = 0;
	uc hasReceived = 0;
	
	while(1){
		if(usartMode == 1) {//Leader
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	c8 16       	cp	r12, r24
 280:	d1 04       	cpc	r13, r1
 282:	e1 04       	cpc	r14, r1
 284:	f1 04       	cpc	r15, r1
 286:	21 f5       	brne	.+72     	; 0x2d0 <main+0x9a>
			TimerSet(1000);
 288:	68 ee       	ldi	r22, 0xE8	; 232
 28a:	73 e0       	ldi	r23, 0x03	; 3
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	61 df       	rcall	.-318    	; 0x154 <TimerSet>
			PORTB = 0x01;//Leader LED enabled
 292:	75 b8       	out	0x05, r7	; 5
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 294:	e8 ec       	ldi	r30, 0xC8	; 200
 296:	f0 e0       	ldi	r31, 0x00	; 0
			
			if(USART_IsSendReady(sendingUSART)){//Checks if USART is ready for to transmit
 298:	80 81       	ld	r24, Z
 29a:	85 ff       	sbrs	r24, 5
				USART_Send(localLED, sendingUSART);//Transmit data
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <main+0x6e>
 29e:	67 2d       	mov	r22, r7
 2a0:	8b 2d       	mov	r24, r11
 2a2:	34 df       	rcall	.-408    	; 0x10c <USART_Send>
			}
			PORTA = localLED;//Set local LED On/Off after data is transmitted
 2a4:	b2 b8       	out	0x02, r11	; 2
			localLED = (localLED == 0) ? 1 : 0;//Flip LED On/Off
 2a6:	87 2d       	mov	r24, r7
 2a8:	b1 10       	cpse	r11, r1
 2aa:	89 2d       	mov	r24, r9
 2ac:	b8 2e       	mov	r11, r24
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 2ae:	c8 80       	ld	r12, Y
				localLED = USART_Receive(receivingUSART); //store received data
			}
			PORTA = localLED;//Set local LED On/Off after data is transmitted

			if(followerTick == 60) {//If 3 seconds without any data
				usartMode = 1;//Switch to Leader
 2b0:	0c 2c       	mov	r0, r12
 2b2:	00 0c       	add	r0, r0
 2b4:	dd 08       	sbc	r13, r13
 2b6:	ee 08       	sbc	r14, r14
 2b8:	ff 08       	sbc	r15, r15
 2ba:	c0 94       	com	r12
 2bc:	d0 94       	com	r13
 2be:	e0 94       	com	r14
 2c0:	f0 94       	com	r15
 2c2:	cc 24       	eor	r12, r12
 2c4:	f7 fc       	sbrc	r15, 7
 2c6:	c3 94       	inc	r12
 2c8:	dd 24       	eor	r13, r13
 2ca:	ee 24       	eor	r14, r14
 2cc:	ff 24       	eor	r15, r15
			if(USART_HasReceived(receivingUSART)) {
				usartMode = 0;//Switch to follower
			}
		}
		else {//Follower
			TimerSet(50);
 2ce:	1c c0       	rjmp	.+56     	; 0x308 <main+0xd2>
 2d0:	62 e3       	ldi	r22, 0x32	; 50
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
			PORTB = 0x00;//Leader LED disabled
 2d8:	3d df       	rcall	.-390    	; 0x154 <TimerSet>
 2da:	15 b8       	out	0x05, r1	; 5
			
			if(USART_HasReceived(receivingUSART)){//Checks if USART has received data
 2dc:	88 81       	ld	r24, Y
 2de:	88 23       	and	r24, r24
				hasReceived = 1;
				localLED = USART_Receive(receivingUSART); //store received data
 2e0:	24 f4       	brge	.+8      	; 0x2ea <main+0xb4>
 2e2:	89 2d       	mov	r24, r9
 2e4:	25 df       	rcall	.-438    	; 0x130 <USART_Receive>
 2e6:	b8 2e       	mov	r11, r24
		else {//Follower
			TimerSet(50);
			PORTB = 0x00;//Leader LED disabled
			
			if(USART_HasReceived(receivingUSART)){//Checks if USART has received data
				hasReceived = 1;
 2e8:	87 2c       	mov	r8, r7
				localLED = USART_Receive(receivingUSART); //store received data
			}
			PORTA = localLED;//Set local LED On/Off after data is transmitted
 2ea:	b2 b8       	out	0x02, r11	; 2

			if(followerTick == 60) {//If 3 seconds without any data
 2ec:	1c 33       	cpi	r17, 0x3C	; 60
 2ee:	21 f0       	breq	.+8      	; 0x2f8 <main+0xc2>
				usartMode = 1;//Switch to Leader
				followerTick = 0;
			} 
			else {
				//followerTick++;
				if(hasReceived) {//Checks if data has been received, if it has then ticker is reset, if not then ticker is incremented.
 2f0:	81 10       	cpse	r8, r1
 2f2:	08 c0       	rjmp	.+16     	; 0x304 <main+0xce>
					hasReceived = 0;
					followerTick = 0;
				} else {
					followerTick++;
 2f4:	1f 5f       	subi	r17, 0xFF	; 255
 2f6:	08 c0       	rjmp	.+16     	; 0x308 <main+0xd2>
			}
			PORTA = localLED;//Set local LED On/Off after data is transmitted

			if(followerTick == 60) {//If 3 seconds without any data
				usartMode = 1;//Switch to Leader
				followerTick = 0;
 2f8:	10 e0       	ldi	r17, 0x00	; 0
				localLED = USART_Receive(receivingUSART); //store received data
			}
			PORTA = localLED;//Set local LED On/Off after data is transmitted

			if(followerTick == 60) {//If 3 seconds without any data
				usartMode = 1;//Switch to Leader
 2fa:	c3 2c       	mov	r12, r3
 2fc:	d4 2c       	mov	r13, r4
 2fe:	e5 2c       	mov	r14, r5
 300:	f6 2c       	mov	r15, r6
 302:	02 c0       	rjmp	.+4      	; 0x308 <main+0xd2>
				followerTick = 0;
			} 
			else {
				//followerTick++;
				if(hasReceived) {//Checks if data has been received, if it has then ticker is reset, if not then ticker is incremented.
					hasReceived = 0;
 304:	89 2c       	mov	r8, r9
					followerTick = 0;
 306:	10 e0       	ldi	r17, 0x00	; 0
				} else {
					followerTick++;
				}
			}
		}
		while(!TimerFlag);//Wait 1 second
 308:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
 30c:	88 23       	and	r24, r24
 30e:	e1 f3       	breq	.-8      	; 0x308 <main+0xd2>
		TimerFlag = 0;
 310:	90 92 08 01 	sts	0x0108, r9	; 0x800108 <TimerFlag>
	}
 314:	b3 cf       	rjmp	.-154    	; 0x27c <main+0x46>

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
