
Part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000d0a  00000d9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000641  00800124  00800124  00000dc2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029b8  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee9  00000000  00000000  00003a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000192f  00000000  00000000  00004905  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  00006234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f92  00000000  00000000  00006828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f5c  00000000  00000000  000077ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00009716  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	01 c3       	rjmp	.+1538   	; 0x638 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e0       	ldi	r30, 0x0A	; 10
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 36       	cpi	r26, 0x65	; 101
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	56 d1       	rcall	.+684    	; 0x370 <main>
  c4:	20 c6       	rjmp	.+3136   	; 0xd06 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
  ce:	6f d4       	rcall	.+2270   	; 0x9ae <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
  d0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
  d4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
  d8:	89 2b       	or	r24, r25
  da:	31 f4       	brne	.+12     	; 0xe8 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  dc:	89 e2       	ldi	r24, 0x29	; 41
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
  e4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  e8:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <xNextFreeByte>
  ec:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <xNextFreeByte+0x1>
  f0:	c9 01       	movw	r24, r18
  f2:	8c 0f       	add	r24, r28
  f4:	9d 1f       	adc	r25, r29
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	94 07       	cpc	r25, r20
  fc:	70 f4       	brcc	.+28     	; 0x11a <pvPortMalloc+0x52>
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	70 f4       	brcc	.+28     	; 0x120 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 104:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <__data_end>
 108:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <__data_end+0x1>
 10c:	c2 0f       	add	r28, r18
 10e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 110:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <xNextFreeByte+0x1>
 114:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <xNextFreeByte>
 118:	05 c0       	rjmp	.+10     	; 0x124 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <pvPortMalloc+0x5c>
 120:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	01 d5       	rcall	.+2562   	; 0xb28 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 126:	ce 01       	movw	r24, r28
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 132:	03 96       	adiw	r24, 0x03	; 3
 134:	92 83       	std	Z+2, r25	; 0x02
 136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	34 83       	std	Z+4, r19	; 0x04
 13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 140:	96 83       	std	Z+6, r25	; 0x06
 142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 144:	90 87       	std	Z+8, r25	; 0x08
 146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 148:	10 82       	st	Z, r1
 14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 14c:	fc 01       	movw	r30, r24
 14e:	11 86       	std	Z+9, r1	; 0x09
 150:	10 86       	std	Z+8, r1	; 0x08
 152:	08 95       	ret

00000154 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	9c 01       	movw	r18, r24
 15a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 15c:	dc 01       	movw	r26, r24
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	cd 91       	ld	r28, X+
 162:	dc 91       	ld	r29, X
 164:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 166:	d3 83       	std	Z+3, r29	; 0x03
 168:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	9d 81       	ldd	r25, Y+5	; 0x05
 176:	dc 01       	movw	r26, r24
 178:	13 96       	adiw	r26, 0x03	; 3
 17a:	7c 93       	st	X, r23
 17c:	6e 93       	st	-X, r22
 17e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 180:	7d 83       	std	Y+5, r23	; 0x05
 182:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 184:	31 87       	std	Z+9, r19	; 0x09
 186:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 188:	f9 01       	movw	r30, r18
 18a:	80 81       	ld	r24, Z
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 83       	st	Z, r24
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 19c:	48 81       	ld	r20, Y
 19e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	52 07       	cpc	r21, r18
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1a8:	fc 01       	movw	r30, r24
 1aa:	a7 81       	ldd	r26, Z+7	; 0x07
 1ac:	b0 85       	ldd	r27, Z+8	; 0x08
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1b0:	dc 01       	movw	r26, r24
 1b2:	13 96       	adiw	r26, 0x03	; 3
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <vListInsert+0x22>
 1b6:	df 01       	movw	r26, r30
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ed 91       	ld	r30, X+
 1bc:	fc 91       	ld	r31, X
 1be:	13 97       	sbiw	r26, 0x03	; 3
 1c0:	20 81       	ld	r18, Z
 1c2:	31 81       	ldd	r19, Z+1	; 0x01
 1c4:	42 17       	cp	r20, r18
 1c6:	53 07       	cpc	r21, r19
 1c8:	b0 f7       	brcc	.-20     	; 0x1b6 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	fb 83       	std	Y+3, r31	; 0x03
 1d4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1d6:	d5 83       	std	Z+5, r29	; 0x05
 1d8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 1da:	bd 83       	std	Y+5, r27	; 0x05
 1dc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	dc 93       	st	X, r29
 1e2:	ce 93       	st	-X, r28
 1e4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1e6:	99 87       	std	Y+9, r25	; 0x09
 1e8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 81       	ld	r18, Z
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	20 83       	st	Z, r18
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1fe:	a0 85       	ldd	r26, Z+8	; 0x08
 200:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202:	c2 81       	ldd	r28, Z+2	; 0x02
 204:	d3 81       	ldd	r29, Z+3	; 0x03
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	95 81       	ldd	r25, Z+5	; 0x05
 20a:	9d 83       	std	Y+5, r25	; 0x05
 20c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	c4 81       	ldd	r28, Z+4	; 0x04
 210:	d5 81       	ldd	r29, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	8d 91       	ld	r24, X+
 21e:	9c 91       	ld	r25, X
 220:	12 97       	sbiw	r26, 0x02	; 2
 222:	e8 17       	cp	r30, r24
 224:	f9 07       	cpc	r31, r25
 226:	31 f4       	brne	.+12     	; 0x234 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:	84 81       	ldd	r24, Z+4	; 0x04
 22a:	95 81       	ldd	r25, Z+5	; 0x05
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 234:	11 86       	std	Z+9, r1	; 0x09
 236:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 238:	8c 91       	ld	r24, X
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 23e:	8c 91       	ld	r24, X
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LEDS_Tick>:
unsigned char currentLED;
unsigned char switched;

void LEDS_Tick(){
	//Actions
	switched = 0;
 246:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <switched>
	switch(led_state){
 24a:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <led_state>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	49 f0       	breq	.+18     	; 0x264 <LEDS_Tick+0x1e>
 252:	18 f0       	brcs	.+6      	; 0x25a <LEDS_Tick+0x14>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	69 f0       	breq	.+26     	; 0x272 <LEDS_Tick+0x2c>
 258:	13 c0       	rjmp	.+38     	; 0x280 <LEDS_Tick+0x3a>
		case INIT:
			currentLED = 0x80;
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <currentLED>
            PORTD = currentLED;
 260:	8b b9       	out	0x0b, r24	; 11
            break;
 262:	0f c0       	rjmp	.+30     	; 0x282 <LEDS_Tick+0x3c>
		case RIGHT:
			currentLED = currentLED >> 1;
 264:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <currentLED>
 268:	86 95       	lsr	r24
 26a:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <currentLED>
			PORTD = currentLED;
 26e:	8b b9       	out	0x0b, r24	; 11
			break;
 270:	08 c0       	rjmp	.+16     	; 0x282 <LEDS_Tick+0x3c>
		case LEFT:
			currentLED = currentLED << 1;
 272:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <currentLED>
 276:	88 0f       	add	r24, r24
 278:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <currentLED>
			PORTD = currentLED;
 27c:	8b b9       	out	0x0b, r24	; 11
			break;
 27e:	01 c0       	rjmp	.+2      	; 0x282 <LEDS_Tick+0x3c>
		default:
            PORTD = 0;
 280:	1b b8       	out	0x0b, r1	; 11
            break;
	}
	//Transitions
	switch(led_state){
 282:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <led_state>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	41 f0       	breq	.+16     	; 0x29a <LEDS_Tick+0x54>
 28a:	18 f0       	brcs	.+6      	; 0x292 <LEDS_Tick+0x4c>
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	69 f0       	breq	.+26     	; 0x2aa <LEDS_Tick+0x64>
 290:	14 c0       	rjmp	.+40     	; 0x2ba <LEDS_Tick+0x74>
		case INIT:
			led_state = RIGHT;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <led_state>
            break;
 298:	08 95       	ret
		case RIGHT:
			if(currentLED == 0x01) {
 29a:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <currentLED>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	71 f4       	brne	.+28     	; 0x2be <LEDS_Tick+0x78>
				led_state = LEFT;
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <led_state>
 2a8:	08 95       	ret
			}
			break;
		case LEFT:
			if(currentLED == 0x80) {
 2aa:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <currentLED>
 2ae:	80 38       	cpi	r24, 0x80	; 128
 2b0:	31 f4       	brne	.+12     	; 0x2be <LEDS_Tick+0x78>
				led_state = RIGHT;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <led_state>
 2b8:	08 95       	ret
			}
			break;
		default:
			led_state = INIT;
 2ba:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <led_state>
 2be:	08 95       	ret

000002c0 <LedSecTask>:
#include "task.h" 
#include "croutine.h" 
enum LEDState {INIT, RIGHT, LEFT} led_state;

void LEDS_Init(){
	led_state = INIT;
 2c0:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <led_state>
}

void LedSecTask() {
    LEDS_Init();
    for(;;) { 	
        LEDS_Tick();
 2c4:	c0 df       	rcall	.-128    	; 0x246 <LEDS_Tick>
        vTaskDelay(250); 
 2c6:	8a ef       	ldi	r24, 0xFA	; 250
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	a7 d4       	rcall	.+2382   	; 0xc1a <vTaskDelay>
 2cc:	fb cf       	rjmp	.-10     	; 0x2c4 <LedSecTask+0x4>

000002ce <buttonTick>:
}

unsigned char button;

void buttonTick() {
	button = ~PINA & 0x01;
 2ce:	80 b1       	in	r24, 0x00	; 0
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	28 2f       	mov	r18, r24
 2d4:	21 70       	andi	r18, 0x01	; 1
 2d6:	80 fd       	sbrc	r24, 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	90 93 63 07 	sts	0x0763, r25	; 0x800763 <button>
	if(button && currentLED != 0x80 && currentLED != 0x01 && switched == 0) {
 2de:	21 11       	cpse	r18, r1
 2e0:	1b c0       	rjmp	.+54     	; 0x318 <buttonTick+0x4a>
 2e2:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <currentLED>
 2e6:	80 38       	cpi	r24, 0x80	; 128
 2e8:	b9 f0       	breq	.+46     	; 0x318 <buttonTick+0x4a>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	a9 f0       	breq	.+42     	; 0x318 <buttonTick+0x4a>
 2ee:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <switched>
 2f2:	81 11       	cpse	r24, r1
 2f4:	11 c0       	rjmp	.+34     	; 0x318 <buttonTick+0x4a>
		switch(led_state) {
 2f6:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <led_state>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	19 f0       	breq	.+6      	; 0x304 <buttonTick+0x36>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	29 f0       	breq	.+10     	; 0x30c <buttonTick+0x3e>
 302:	07 c0       	rjmp	.+14     	; 0x312 <buttonTick+0x44>
			case RIGHT: 
				led_state = LEFT;
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <led_state>
				break;
 30a:	03 c0       	rjmp	.+6      	; 0x312 <buttonTick+0x44>
			case LEFT: 
				led_state = RIGHT;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <led_state>
				break;
			default: 
				break;
		}
		switched = 1;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <switched>
 318:	08 95       	ret

0000031a <directionButtonTask>:
    } 
}

void directionButtonTask() {
	for(;;) {
		buttonTick();
 31a:	d9 df       	rcall	.-78     	; 0x2ce <buttonTick>
		vTaskDelay(25);
 31c:	89 e1       	ldi	r24, 0x19	; 25
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	7c d4       	rcall	.+2296   	; 0xc1a <vTaskDelay>
 322:	fb cf       	rjmp	.-10     	; 0x31a <directionButtonTask>

00000324 <StartButtonSecPulse>:
	}
}

void StartButtonSecPulse(unsigned portBASE_TYPE Priority) {
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
	xTaskCreate(directionButtonTask, 
 32a:	e1 2c       	mov	r14, r1
 32c:	f1 2c       	mov	r15, r1
 32e:	08 2f       	mov	r16, r24
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	45 e5       	ldi	r20, 0x55	; 85
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	71 e0       	ldi	r23, 0x01	; 1
 33c:	8d e8       	ldi	r24, 0x8D	; 141
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	11 d2       	rcall	.+1058   	; 0x764 <xTaskCreate>
		(signed portCHAR *)"directionButtonTask", 
		configMINIMAL_STACK_SIZE, 
		NULL, 
		Priority, 
		NULL );
}
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	08 95       	ret

0000034a <StartSecPulse>:

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
    xTaskCreate(LedSecTask, 
 350:	e1 2c       	mov	r14, r1
 352:	f1 2c       	mov	r15, r1
 354:	08 2f       	mov	r16, r24
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	45 e5       	ldi	r20, 0x55	; 85
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	64 e1       	ldi	r22, 0x14	; 20
 360:	71 e0       	ldi	r23, 0x01	; 1
 362:	80 e6       	ldi	r24, 0x60	; 96
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	fe d1       	rcall	.+1020   	; 0x764 <xTaskCreate>
            (signed portCHAR *)"LedSecTask", 
            configMINIMAL_STACK_SIZE, 
            NULL, 
            Priority, 
            NULL );
}	
 368:	0f 91       	pop	r16
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	08 95       	ret

00000370 <main>:
 
int main(void) { 
    DDRA = 0x00; PORTA=0xFF;
 370:	11 b8       	out	0x01, r1	; 1
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	82 b9       	out	0x02, r24	; 2
    DDRD = 0xFF;
 376:	8a b9       	out	0x0a, r24	; 10
    //Start Tasks  
    StartSecPulse(1);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	e7 df       	rcall	.-50     	; 0x34a <StartSecPulse>
    StartButtonSecPulse(2);
 37c:	82 e0       	ldi	r24, 0x02	; 2
    //RunSchedular 
    vTaskStartScheduler(); 
 37e:	d2 df       	rcall	.-92     	; 0x324 <StartButtonSecPulse>
 380:	ee d2       	rcall	.+1500   	; 0x95e <vTaskStartScheduler>
    return 0; 
}
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	08 95       	ret

00000388 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 388:	31 e1       	ldi	r19, 0x11	; 17
 38a:	fc 01       	movw	r30, r24
 38c:	30 83       	st	Z, r19
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	22 e2       	ldi	r18, 0x22	; 34
 392:	20 83       	st	Z, r18
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	a3 e3       	ldi	r26, 0x33	; 51
 398:	a0 83       	st	Z, r26
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	60 83       	st	Z, r22
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	70 83       	st	Z, r23
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	10 82       	st	Z, r1
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	60 e8       	ldi	r22, 0x80	; 128
 3aa:	60 83       	st	Z, r22
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	10 82       	st	Z, r1
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	60 83       	st	Z, r22
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	63 e0       	ldi	r22, 0x03	; 3
 3ba:	60 83       	st	Z, r22
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	64 e0       	ldi	r22, 0x04	; 4
 3c0:	60 83       	st	Z, r22
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	65 e0       	ldi	r22, 0x05	; 5
 3c6:	60 83       	st	Z, r22
 3c8:	31 97       	sbiw	r30, 0x01	; 1
 3ca:	66 e0       	ldi	r22, 0x06	; 6
 3cc:	60 83       	st	Z, r22
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	67 e0       	ldi	r22, 0x07	; 7
 3d2:	60 83       	st	Z, r22
 3d4:	31 97       	sbiw	r30, 0x01	; 1
 3d6:	68 e0       	ldi	r22, 0x08	; 8
 3d8:	60 83       	st	Z, r22
 3da:	31 97       	sbiw	r30, 0x01	; 1
 3dc:	69 e0       	ldi	r22, 0x09	; 9
 3de:	60 83       	st	Z, r22
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	60 e1       	ldi	r22, 0x10	; 16
 3e4:	60 83       	st	Z, r22
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	30 83       	st	Z, r19
 3ea:	31 97       	sbiw	r30, 0x01	; 1
 3ec:	32 e1       	ldi	r19, 0x12	; 18
 3ee:	30 83       	st	Z, r19
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	33 e1       	ldi	r19, 0x13	; 19
 3f4:	30 83       	st	Z, r19
 3f6:	31 97       	sbiw	r30, 0x01	; 1
 3f8:	34 e1       	ldi	r19, 0x14	; 20
 3fa:	30 83       	st	Z, r19
 3fc:	31 97       	sbiw	r30, 0x01	; 1
 3fe:	35 e1       	ldi	r19, 0x15	; 21
 400:	30 83       	st	Z, r19
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	36 e1       	ldi	r19, 0x16	; 22
 406:	30 83       	st	Z, r19
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	37 e1       	ldi	r19, 0x17	; 23
 40c:	30 83       	st	Z, r19
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	38 e1       	ldi	r19, 0x18	; 24
 412:	30 83       	st	Z, r19
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	39 e1       	ldi	r19, 0x19	; 25
 418:	30 83       	st	Z, r19
 41a:	31 97       	sbiw	r30, 0x01	; 1
 41c:	30 e2       	ldi	r19, 0x20	; 32
 41e:	30 83       	st	Z, r19
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	31 e2       	ldi	r19, 0x21	; 33
 424:	30 83       	st	Z, r19
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	20 83       	st	Z, r18
 42a:	31 97       	sbiw	r30, 0x01	; 1
 42c:	23 e2       	ldi	r18, 0x23	; 35
 42e:	20 83       	st	Z, r18
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	40 83       	st	Z, r20
 434:	31 97       	sbiw	r30, 0x01	; 1
 436:	50 83       	st	Z, r21
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	26 e2       	ldi	r18, 0x26	; 38
 43c:	20 83       	st	Z, r18
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	27 e2       	ldi	r18, 0x27	; 39
 442:	20 83       	st	Z, r18
 444:	31 97       	sbiw	r30, 0x01	; 1
 446:	28 e2       	ldi	r18, 0x28	; 40
 448:	20 83       	st	Z, r18
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	29 e2       	ldi	r18, 0x29	; 41
 44e:	20 83       	st	Z, r18
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	20 e3       	ldi	r18, 0x30	; 48
 454:	20 83       	st	Z, r18
 456:	31 97       	sbiw	r30, 0x01	; 1
 458:	21 e3       	ldi	r18, 0x31	; 49
 45a:	20 83       	st	Z, r18
 45c:	86 97       	sbiw	r24, 0x26	; 38
 45e:	08 95       	ret

00000460 <xPortStartScheduler>:
 460:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 464:	8c e7       	ldi	r24, 0x7C	; 124
 466:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 46a:	8b e0       	ldi	r24, 0x0B	; 11
 46c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 470:	ef e6       	ldi	r30, 0x6F	; 111
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	82 60       	ori	r24, 0x02	; 2
 478:	80 83       	st	Z, r24
 47a:	a0 91 5f 07 	lds	r26, 0x075F	; 0x80075f <pxCurrentTCB>
 47e:	b0 91 60 07 	lds	r27, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 482:	cd 91       	ld	r28, X+
 484:	cd bf       	out	0x3d, r28	; 61
 486:	dd 91       	ld	r29, X+
 488:	de bf       	out	0x3e, r29	; 62
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	df 90       	pop	r13
 4b0:	cf 90       	pop	r12
 4b2:	bf 90       	pop	r11
 4b4:	af 90       	pop	r10
 4b6:	9f 90       	pop	r9
 4b8:	8f 90       	pop	r8
 4ba:	7f 90       	pop	r7
 4bc:	6f 90       	pop	r6
 4be:	5f 90       	pop	r5
 4c0:	4f 90       	pop	r4
 4c2:	3f 90       	pop	r3
 4c4:	2f 90       	pop	r2
 4c6:	1f 90       	pop	r1
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	08 95       	ret
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret

000004d4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	0f 92       	push	r0
 4dc:	1f 92       	push	r1
 4de:	11 24       	eor	r1, r1
 4e0:	2f 92       	push	r2
 4e2:	3f 92       	push	r3
 4e4:	4f 92       	push	r4
 4e6:	5f 92       	push	r5
 4e8:	6f 92       	push	r6
 4ea:	7f 92       	push	r7
 4ec:	8f 92       	push	r8
 4ee:	9f 92       	push	r9
 4f0:	af 92       	push	r10
 4f2:	bf 92       	push	r11
 4f4:	cf 92       	push	r12
 4f6:	df 92       	push	r13
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	2f 93       	push	r18
 502:	3f 93       	push	r19
 504:	4f 93       	push	r20
 506:	5f 93       	push	r21
 508:	6f 93       	push	r22
 50a:	7f 93       	push	r23
 50c:	8f 93       	push	r24
 50e:	9f 93       	push	r25
 510:	af 93       	push	r26
 512:	bf 93       	push	r27
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	ef 93       	push	r30
 51a:	ff 93       	push	r31
 51c:	a0 91 5f 07 	lds	r26, 0x075F	; 0x80075f <pxCurrentTCB>
 520:	b0 91 60 07 	lds	r27, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 524:	0d b6       	in	r0, 0x3d	; 61
 526:	0d 92       	st	X+, r0
 528:	0e b6       	in	r0, 0x3e	; 62
 52a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 52c:	86 d3       	rcall	.+1804   	; 0xc3a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 52e:	a0 91 5f 07 	lds	r26, 0x075F	; 0x80075f <pxCurrentTCB>
 532:	b0 91 60 07 	lds	r27, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 536:	cd 91       	ld	r28, X+
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	dd 91       	ld	r29, X+
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	ff 91       	pop	r31
 540:	ef 91       	pop	r30
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	bf 91       	pop	r27
 548:	af 91       	pop	r26
 54a:	9f 91       	pop	r25
 54c:	8f 91       	pop	r24
 54e:	7f 91       	pop	r23
 550:	6f 91       	pop	r22
 552:	5f 91       	pop	r21
 554:	4f 91       	pop	r20
 556:	3f 91       	pop	r19
 558:	2f 91       	pop	r18
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	ff 90       	pop	r15
 560:	ef 90       	pop	r14
 562:	df 90       	pop	r13
 564:	cf 90       	pop	r12
 566:	bf 90       	pop	r11
 568:	af 90       	pop	r10
 56a:	9f 90       	pop	r9
 56c:	8f 90       	pop	r8
 56e:	7f 90       	pop	r7
 570:	6f 90       	pop	r6
 572:	5f 90       	pop	r5
 574:	4f 90       	pop	r4
 576:	3f 90       	pop	r3
 578:	2f 90       	pop	r2
 57a:	1f 90       	pop	r1
 57c:	0f 90       	pop	r0
 57e:	0f be       	out	0x3f, r0	; 63
 580:	0f 90       	pop	r0

	asm volatile ( "ret" );
 582:	08 95       	ret

00000584 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	0f 92       	push	r0
 58c:	1f 92       	push	r1
 58e:	11 24       	eor	r1, r1
 590:	2f 92       	push	r2
 592:	3f 92       	push	r3
 594:	4f 92       	push	r4
 596:	5f 92       	push	r5
 598:	6f 92       	push	r6
 59a:	7f 92       	push	r7
 59c:	8f 92       	push	r8
 59e:	9f 92       	push	r9
 5a0:	af 92       	push	r10
 5a2:	bf 92       	push	r11
 5a4:	cf 92       	push	r12
 5a6:	df 92       	push	r13
 5a8:	ef 92       	push	r14
 5aa:	ff 92       	push	r15
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	ef 93       	push	r30
 5ca:	ff 93       	push	r31
 5cc:	a0 91 5f 07 	lds	r26, 0x075F	; 0x80075f <pxCurrentTCB>
 5d0:	b0 91 60 07 	lds	r27, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 5d4:	0d b6       	in	r0, 0x3d	; 61
 5d6:	0d 92       	st	X+, r0
 5d8:	0e b6       	in	r0, 0x3e	; 62
 5da:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 5dc:	ee d1       	rcall	.+988    	; 0x9ba <xTaskIncrementTick>
 5de:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 5e0:	2c d3       	rcall	.+1624   	; 0xc3a <vTaskSwitchContext>
 5e2:	a0 91 5f 07 	lds	r26, 0x075F	; 0x80075f <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 5e6:	b0 91 60 07 	lds	r27, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 5ea:	cd 91       	ld	r28, X+
 5ec:	cd bf       	out	0x3d, r28	; 61
 5ee:	dd 91       	ld	r29, X+
 5f0:	de bf       	out	0x3e, r29	; 62
 5f2:	ff 91       	pop	r31
 5f4:	ef 91       	pop	r30
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	bf 91       	pop	r27
 5fc:	af 91       	pop	r26
 5fe:	9f 91       	pop	r25
 600:	8f 91       	pop	r24
 602:	7f 91       	pop	r23
 604:	6f 91       	pop	r22
 606:	5f 91       	pop	r21
 608:	4f 91       	pop	r20
 60a:	3f 91       	pop	r19
 60c:	2f 91       	pop	r18
 60e:	1f 91       	pop	r17
 610:	0f 91       	pop	r16
 612:	ff 90       	pop	r15
 614:	ef 90       	pop	r14
 616:	df 90       	pop	r13
 618:	cf 90       	pop	r12
 61a:	bf 90       	pop	r11
 61c:	af 90       	pop	r10
 61e:	9f 90       	pop	r9
 620:	8f 90       	pop	r8
 622:	7f 90       	pop	r7
 624:	6f 90       	pop	r6
 626:	5f 90       	pop	r5
 628:	4f 90       	pop	r4
 62a:	3f 90       	pop	r3
 62c:	2f 90       	pop	r2
 62e:	1f 90       	pop	r1
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	08 95       	ret

00000638 <__vector_13>:

	asm volatile ( "ret" );
 638:	a5 df       	rcall	.-182    	; 0x584 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 63a:	18 95       	reti

0000063c <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 63c:	e0 91 27 07 	lds	r30, 0x0727	; 0x800727 <pxDelayedTaskList>
 640:	f0 91 28 07 	lds	r31, 0x0728	; 0x800728 <pxDelayedTaskList+0x1>
 644:	80 81       	ld	r24, Z
 646:	81 11       	cpse	r24, r1
 648:	07 c0       	rjmp	.+14     	; 0x658 <prvResetNextTaskUnblockTime+0x1c>
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	9f ef       	ldi	r25, 0xFF	; 255
 64e:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <xNextTaskUnblockTime+0x1>
 652:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <xNextTaskUnblockTime>
 656:	08 95       	ret
 658:	e0 91 27 07 	lds	r30, 0x0727	; 0x800727 <pxDelayedTaskList>
 65c:	f0 91 28 07 	lds	r31, 0x0728	; 0x800728 <pxDelayedTaskList+0x1>
 660:	05 80       	ldd	r0, Z+5	; 0x05
 662:	f6 81       	ldd	r31, Z+6	; 0x06
 664:	e0 2d       	mov	r30, r0
 666:	06 80       	ldd	r0, Z+6	; 0x06
 668:	f7 81       	ldd	r31, Z+7	; 0x07
 66a:	e0 2d       	mov	r30, r0
 66c:	82 81       	ldd	r24, Z+2	; 0x02
 66e:	93 81       	ldd	r25, Z+3	; 0x03
 670:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <xNextTaskUnblockTime+0x1>
 674:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <xNextTaskUnblockTime>
 678:	08 95       	ret

0000067a <prvIdleTask>:
 67a:	03 e1       	ldi	r16, 0x13	; 19
 67c:	17 e0       	ldi	r17, 0x07	; 7
 67e:	0f 2e       	mov	r0, r31
 680:	fb e3       	ldi	r31, 0x3B	; 59
 682:	ef 2e       	mov	r14, r31
 684:	f7 e0       	ldi	r31, 0x07	; 7
 686:	ff 2e       	mov	r15, r31
 688:	f0 2d       	mov	r31, r0
 68a:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxDeletedTasksWaitingCleanUp>
 68e:	88 23       	and	r24, r24
 690:	11 f1       	breq	.+68     	; 0x6d6 <prvIdleTask+0x5c>
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	0f 92       	push	r0
 698:	d8 01       	movw	r26, r16
 69a:	15 96       	adiw	r26, 0x05	; 5
 69c:	ed 91       	ld	r30, X+
 69e:	fc 91       	ld	r31, X
 6a0:	16 97       	sbiw	r26, 0x06	; 6
 6a2:	c6 81       	ldd	r28, Z+6	; 0x06
 6a4:	d7 81       	ldd	r29, Z+7	; 0x07
 6a6:	ce 01       	movw	r24, r28
 6a8:	02 96       	adiw	r24, 0x02	; 2
 6aa:	a6 dd       	rcall	.-1204   	; 0x1f8 <uxListRemove>
 6ac:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
 6b0:	81 50       	subi	r24, 0x01	; 1
 6b2:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxCurrentNumberOfTasks>
 6b6:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxDeletedTasksWaitingCleanUp>
 6ba:	81 50       	subi	r24, 0x01	; 1
 6bc:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <uxDeletedTasksWaitingCleanUp>
 6c0:	0f 90       	pop	r0
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	8f 89       	ldd	r24, Y+23	; 0x17
 6c6:	98 8d       	ldd	r25, Y+24	; 0x18
 6c8:	32 dd       	rcall	.-1436   	; 0x12e <vPortFree>
 6ca:	ce 01       	movw	r24, r28
 6cc:	30 dd       	rcall	.-1440   	; 0x12e <vPortFree>
 6ce:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxDeletedTasksWaitingCleanUp>
 6d2:	81 11       	cpse	r24, r1
 6d4:	de cf       	rjmp	.-68     	; 0x692 <prvIdleTask+0x18>
 6d6:	f7 01       	movw	r30, r14
 6d8:	80 81       	ld	r24, Z
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	b0 f2       	brcs	.-84     	; 0x68a <prvIdleTask+0x10>
 6de:	fa de       	rcall	.-524    	; 0x4d4 <vPortYield>
 6e0:	d4 cf       	rjmp	.-88     	; 0x68a <prvIdleTask+0x10>

000006e2 <prvAddCurrentTaskToDelayedList>:
 6e2:	0f 93       	push	r16
 6e4:	1f 93       	push	r17
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	ec 01       	movw	r28, r24
 6ec:	00 91 0f 07 	lds	r16, 0x070F	; 0x80070f <xTickCount>
 6f0:	10 91 10 07 	lds	r17, 0x0710	; 0x800710 <xTickCount+0x1>
 6f4:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <pxCurrentTCB>
 6f8:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 6fc:	02 96       	adiw	r24, 0x02	; 2
 6fe:	7c dd       	rcall	.-1288   	; 0x1f8 <uxListRemove>
 700:	c0 0f       	add	r28, r16
 702:	d1 1f       	adc	r29, r17
 704:	e0 91 5f 07 	lds	r30, 0x075F	; 0x80075f <pxCurrentTCB>
 708:	f0 91 60 07 	lds	r31, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 70c:	d3 83       	std	Z+3, r29	; 0x03
 70e:	c2 83       	std	Z+2, r28	; 0x02
 710:	c0 17       	cp	r28, r16
 712:	d1 07       	cpc	r29, r17
 714:	60 f4       	brcc	.+24     	; 0x72e <prvAddCurrentTaskToDelayedList+0x4c>
 716:	60 91 5f 07 	lds	r22, 0x075F	; 0x80075f <pxCurrentTCB>
 71a:	70 91 60 07 	lds	r23, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 71e:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <pxOverflowDelayedTaskList>
 722:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <pxOverflowDelayedTaskList+0x1>
 726:	6e 5f       	subi	r22, 0xFE	; 254
 728:	7f 4f       	sbci	r23, 0xFF	; 255
 72a:	35 dd       	rcall	.-1430   	; 0x196 <vListInsert>
 72c:	16 c0       	rjmp	.+44     	; 0x75a <prvAddCurrentTaskToDelayedList+0x78>
 72e:	60 91 5f 07 	lds	r22, 0x075F	; 0x80075f <pxCurrentTCB>
 732:	70 91 60 07 	lds	r23, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 736:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <pxDelayedTaskList>
 73a:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <pxDelayedTaskList+0x1>
 73e:	6e 5f       	subi	r22, 0xFE	; 254
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	29 dd       	rcall	.-1454   	; 0x196 <vListInsert>
 744:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <xNextTaskUnblockTime>
 748:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <xNextTaskUnblockTime+0x1>
 74c:	c8 17       	cp	r28, r24
 74e:	d9 07       	cpc	r29, r25
 750:	20 f4       	brcc	.+8      	; 0x75a <prvAddCurrentTaskToDelayedList+0x78>
 752:	d0 93 08 07 	sts	0x0708, r29	; 0x800708 <xNextTaskUnblockTime+0x1>
 756:	c0 93 07 07 	sts	0x0707, r28	; 0x800707 <xNextTaskUnblockTime>
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	1f 91       	pop	r17
 760:	0f 91       	pop	r16
 762:	08 95       	ret

00000764 <xTaskCreate>:
 764:	4f 92       	push	r4
 766:	5f 92       	push	r5
 768:	6f 92       	push	r6
 76a:	7f 92       	push	r7
 76c:	8f 92       	push	r8
 76e:	9f 92       	push	r9
 770:	af 92       	push	r10
 772:	bf 92       	push	r11
 774:	cf 92       	push	r12
 776:	df 92       	push	r13
 778:	ef 92       	push	r14
 77a:	ff 92       	push	r15
 77c:	0f 93       	push	r16
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	4c 01       	movw	r8, r24
 784:	6b 01       	movw	r12, r22
 786:	5a 01       	movw	r10, r20
 788:	29 01       	movw	r4, r18
 78a:	ca 01       	movw	r24, r20
 78c:	9d dc       	rcall	.-1734   	; 0xc8 <pvPortMalloc>
 78e:	3c 01       	movw	r6, r24
 790:	89 2b       	or	r24, r25
 792:	09 f4       	brne	.+2      	; 0x796 <xTaskCreate+0x32>
 794:	d3 c0       	rjmp	.+422    	; 0x93c <xTaskCreate+0x1d8>
 796:	86 e2       	ldi	r24, 0x26	; 38
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	96 dc       	rcall	.-1748   	; 0xc8 <pvPortMalloc>
 79c:	ec 01       	movw	r28, r24
 79e:	89 2b       	or	r24, r25
 7a0:	59 f0       	breq	.+22     	; 0x7b8 <xTaskCreate+0x54>
 7a2:	78 8e       	std	Y+24, r7	; 0x18
 7a4:	6f 8a       	std	Y+23, r6	; 0x17
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	a8 1a       	sub	r10, r24
 7aa:	b1 08       	sbc	r11, r1
 7ac:	a6 0c       	add	r10, r6
 7ae:	b7 1c       	adc	r11, r7
 7b0:	c1 14       	cp	r12, r1
 7b2:	d1 04       	cpc	r13, r1
 7b4:	21 f4       	brne	.+8      	; 0x7be <xTaskCreate+0x5a>
 7b6:	1f c0       	rjmp	.+62     	; 0x7f6 <xTaskCreate+0x92>
 7b8:	c3 01       	movw	r24, r6
 7ba:	b9 dc       	rcall	.-1678   	; 0x12e <vPortFree>
 7bc:	bf c0       	rjmp	.+382    	; 0x93c <xTaskCreate+0x1d8>
 7be:	d6 01       	movw	r26, r12
 7c0:	8c 91       	ld	r24, X
 7c2:	89 8f       	std	Y+25, r24	; 0x19
 7c4:	8c 91       	ld	r24, X
 7c6:	88 23       	and	r24, r24
 7c8:	a1 f0       	breq	.+40     	; 0x7f2 <xTaskCreate+0x8e>
 7ca:	ae 01       	movw	r20, r28
 7cc:	46 5e       	subi	r20, 0xE6	; 230
 7ce:	5f 4f       	sbci	r21, 0xFF	; 255
 7d0:	f6 01       	movw	r30, r12
 7d2:	31 96       	adiw	r30, 0x01	; 1
 7d4:	b8 e0       	ldi	r27, 0x08	; 8
 7d6:	cb 0e       	add	r12, r27
 7d8:	d1 1c       	adc	r13, r1
 7da:	cf 01       	movw	r24, r30
 7dc:	21 91       	ld	r18, Z+
 7de:	da 01       	movw	r26, r20
 7e0:	2d 93       	st	X+, r18
 7e2:	ad 01       	movw	r20, r26
 7e4:	dc 01       	movw	r26, r24
 7e6:	8c 91       	ld	r24, X
 7e8:	88 23       	and	r24, r24
 7ea:	19 f0       	breq	.+6      	; 0x7f2 <xTaskCreate+0x8e>
 7ec:	ec 15       	cp	r30, r12
 7ee:	fd 05       	cpc	r31, r13
 7f0:	a1 f7       	brne	.-24     	; 0x7da <xTaskCreate+0x76>
 7f2:	18 a2       	std	Y+32, r1	; 0x20
 7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <xTaskCreate+0x94>
 7f6:	19 8e       	std	Y+25, r1	; 0x19
 7f8:	04 30       	cpi	r16, 0x04	; 4
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <xTaskCreate+0x9a>
 7fc:	03 e0       	ldi	r16, 0x03	; 3
 7fe:	0e 8b       	std	Y+22, r16	; 0x16
 800:	6e 01       	movw	r12, r28
 802:	b2 e0       	ldi	r27, 0x02	; 2
 804:	cb 0e       	add	r12, r27
 806:	d1 1c       	adc	r13, r1
 808:	c6 01       	movw	r24, r12
 80a:	a0 dc       	rcall	.-1728   	; 0x14c <vListInitialiseItem>
 80c:	ce 01       	movw	r24, r28
 80e:	0c 96       	adiw	r24, 0x0c	; 12
 810:	9d dc       	rcall	.-1734   	; 0x14c <vListInitialiseItem>
 812:	d9 87       	std	Y+9, r29	; 0x09
 814:	c8 87       	std	Y+8, r28	; 0x08
 816:	84 e0       	ldi	r24, 0x04	; 4
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	80 1b       	sub	r24, r16
 81c:	91 09       	sbc	r25, r1
 81e:	9d 87       	std	Y+13, r25	; 0x0d
 820:	8c 87       	std	Y+12, r24	; 0x0c
 822:	db 8b       	std	Y+19, r29	; 0x13
 824:	ca 8b       	std	Y+18, r28	; 0x12
 826:	19 a2       	std	Y+33, r1	; 0x21
 828:	1a a2       	std	Y+34, r1	; 0x22
 82a:	1b a2       	std	Y+35, r1	; 0x23
 82c:	1c a2       	std	Y+36, r1	; 0x24
 82e:	1d a2       	std	Y+37, r1	; 0x25
 830:	a2 01       	movw	r20, r4
 832:	b4 01       	movw	r22, r8
 834:	c5 01       	movw	r24, r10
 836:	a8 dd       	rcall	.-1200   	; 0x388 <pxPortInitialiseStack>
 838:	99 83       	std	Y+1, r25	; 0x01
 83a:	88 83       	st	Y, r24
 83c:	e1 14       	cp	r14, r1
 83e:	f1 04       	cpc	r15, r1
 840:	19 f0       	breq	.+6      	; 0x848 <xTaskCreate+0xe4>
 842:	f7 01       	movw	r30, r14
 844:	d1 83       	std	Z+1, r29	; 0x01
 846:	c0 83       	st	Z, r28
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	0f 92       	push	r0
 84e:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
 852:	8f 5f       	subi	r24, 0xFF	; 255
 854:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxCurrentNumberOfTasks>
 858:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <pxCurrentTCB>
 85c:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 860:	89 2b       	or	r24, r25
 862:	69 f5       	brne	.+90     	; 0x8be <xTaskCreate+0x15a>
 864:	d0 93 60 07 	sts	0x0760, r29	; 0x800760 <pxCurrentTCB+0x1>
 868:	c0 93 5f 07 	sts	0x075F, r28	; 0x80075f <pxCurrentTCB>
 86c:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
 870:	81 30       	cpi	r24, 0x01	; 1
 872:	a9 f5       	brne	.+106    	; 0x8de <xTaskCreate+0x17a>
 874:	8b e3       	ldi	r24, 0x3B	; 59
 876:	97 e0       	ldi	r25, 0x07	; 7
 878:	5b dc       	rcall	.-1866   	; 0x130 <vListInitialise>
 87a:	84 e4       	ldi	r24, 0x44	; 68
 87c:	97 e0       	ldi	r25, 0x07	; 7
 87e:	58 dc       	rcall	.-1872   	; 0x130 <vListInitialise>
 880:	8d e4       	ldi	r24, 0x4D	; 77
 882:	97 e0       	ldi	r25, 0x07	; 7
 884:	55 dc       	rcall	.-1878   	; 0x130 <vListInitialise>
 886:	86 e5       	ldi	r24, 0x56	; 86
 888:	97 e0       	ldi	r25, 0x07	; 7
 88a:	52 dc       	rcall	.-1884   	; 0x130 <vListInitialise>
 88c:	82 e3       	ldi	r24, 0x32	; 50
 88e:	97 e0       	ldi	r25, 0x07	; 7
 890:	4f dc       	rcall	.-1890   	; 0x130 <vListInitialise>
 892:	89 e2       	ldi	r24, 0x29	; 41
 894:	97 e0       	ldi	r25, 0x07	; 7
 896:	4c dc       	rcall	.-1896   	; 0x130 <vListInitialise>
 898:	8c e1       	ldi	r24, 0x1C	; 28
 89a:	97 e0       	ldi	r25, 0x07	; 7
 89c:	49 dc       	rcall	.-1902   	; 0x130 <vListInitialise>
 89e:	83 e1       	ldi	r24, 0x13	; 19
 8a0:	97 e0       	ldi	r25, 0x07	; 7
 8a2:	46 dc       	rcall	.-1908   	; 0x130 <vListInitialise>
 8a4:	82 e3       	ldi	r24, 0x32	; 50
 8a6:	97 e0       	ldi	r25, 0x07	; 7
 8a8:	90 93 28 07 	sts	0x0728, r25	; 0x800728 <pxDelayedTaskList+0x1>
 8ac:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <pxDelayedTaskList>
 8b0:	89 e2       	ldi	r24, 0x29	; 41
 8b2:	97 e0       	ldi	r25, 0x07	; 7
 8b4:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <pxOverflowDelayedTaskList+0x1>
 8b8:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <pxOverflowDelayedTaskList>
 8bc:	10 c0       	rjmp	.+32     	; 0x8de <xTaskCreate+0x17a>
 8be:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xSchedulerRunning>
 8c2:	81 11       	cpse	r24, r1
 8c4:	0c c0       	rjmp	.+24     	; 0x8de <xTaskCreate+0x17a>
 8c6:	e0 91 5f 07 	lds	r30, 0x075F	; 0x80075f <pxCurrentTCB>
 8ca:	f0 91 60 07 	lds	r31, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 8ce:	96 89       	ldd	r25, Z+22	; 0x16
 8d0:	8e 89       	ldd	r24, Y+22	; 0x16
 8d2:	89 17       	cp	r24, r25
 8d4:	20 f0       	brcs	.+8      	; 0x8de <xTaskCreate+0x17a>
 8d6:	d0 93 60 07 	sts	0x0760, r29	; 0x800760 <pxCurrentTCB+0x1>
 8da:	c0 93 5f 07 	sts	0x075F, r28	; 0x80075f <pxCurrentTCB>
 8de:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxTaskNumber>
 8e2:	8f 5f       	subi	r24, 0xFF	; 255
 8e4:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxTaskNumber>
 8e8:	8e 89       	ldd	r24, Y+22	; 0x16
 8ea:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
 8ee:	98 17       	cp	r25, r24
 8f0:	10 f4       	brcc	.+4      	; 0x8f6 <xTaskCreate+0x192>
 8f2:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	9c 01       	movw	r18, r24
 8fa:	22 0f       	add	r18, r18
 8fc:	33 1f       	adc	r19, r19
 8fe:	22 0f       	add	r18, r18
 900:	33 1f       	adc	r19, r19
 902:	22 0f       	add	r18, r18
 904:	33 1f       	adc	r19, r19
 906:	82 0f       	add	r24, r18
 908:	93 1f       	adc	r25, r19
 90a:	b6 01       	movw	r22, r12
 90c:	85 5c       	subi	r24, 0xC5	; 197
 90e:	98 4f       	sbci	r25, 0xF8	; 248
 910:	21 dc       	rcall	.-1982   	; 0x154 <vListInsertEnd>
 912:	0f 90       	pop	r0
 914:	0f be       	out	0x3f, r0	; 63
 916:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xSchedulerRunning>
 91a:	88 23       	and	r24, r24
 91c:	59 f0       	breq	.+22     	; 0x934 <xTaskCreate+0x1d0>
 91e:	e0 91 5f 07 	lds	r30, 0x075F	; 0x80075f <pxCurrentTCB>
 922:	f0 91 60 07 	lds	r31, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 926:	96 89       	ldd	r25, Z+22	; 0x16
 928:	8e 89       	ldd	r24, Y+22	; 0x16
 92a:	98 17       	cp	r25, r24
 92c:	28 f4       	brcc	.+10     	; 0x938 <xTaskCreate+0x1d4>
 92e:	d2 dd       	rcall	.-1116   	; 0x4d4 <vPortYield>
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	05 c0       	rjmp	.+10     	; 0x93e <xTaskCreate+0x1da>
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	03 c0       	rjmp	.+6      	; 0x93e <xTaskCreate+0x1da>
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	01 c0       	rjmp	.+2      	; 0x93e <xTaskCreate+0x1da>
 93c:	8f ef       	ldi	r24, 0xFF	; 255
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	0f 91       	pop	r16
 944:	ff 90       	pop	r15
 946:	ef 90       	pop	r14
 948:	df 90       	pop	r13
 94a:	cf 90       	pop	r12
 94c:	bf 90       	pop	r11
 94e:	af 90       	pop	r10
 950:	9f 90       	pop	r9
 952:	8f 90       	pop	r8
 954:	7f 90       	pop	r7
 956:	6f 90       	pop	r6
 958:	5f 90       	pop	r5
 95a:	4f 90       	pop	r4
 95c:	08 95       	ret

0000095e <vTaskStartScheduler>:
 95e:	ef 92       	push	r14
 960:	ff 92       	push	r15
 962:	0f 93       	push	r16
 964:	0f 2e       	mov	r0, r31
 966:	f5 e0       	ldi	r31, 0x05	; 5
 968:	ef 2e       	mov	r14, r31
 96a:	f7 e0       	ldi	r31, 0x07	; 7
 96c:	ff 2e       	mov	r15, r31
 96e:	f0 2d       	mov	r31, r0
 970:	00 e0       	ldi	r16, 0x00	; 0
 972:	20 e0       	ldi	r18, 0x00	; 0
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	45 e5       	ldi	r20, 0x55	; 85
 978:	50 e0       	ldi	r21, 0x00	; 0
 97a:	6f e1       	ldi	r22, 0x1F	; 31
 97c:	71 e0       	ldi	r23, 0x01	; 1
 97e:	8d e3       	ldi	r24, 0x3D	; 61
 980:	93 e0       	ldi	r25, 0x03	; 3
 982:	f0 de       	rcall	.-544    	; 0x764 <xTaskCreate>
 984:	81 30       	cpi	r24, 0x01	; 1
 986:	79 f4       	brne	.+30     	; 0x9a6 <vTaskStartScheduler+0x48>
 988:	f8 94       	cli
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	9f ef       	ldi	r25, 0xFF	; 255
 98e:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <xNextTaskUnblockTime+0x1>
 992:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <xNextTaskUnblockTime>
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <xSchedulerRunning>
 99c:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <xTickCount+0x1>
 9a0:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <xTickCount>
 9a4:	5d dd       	rcall	.-1350   	; 0x460 <xPortStartScheduler>
 9a6:	0f 91       	pop	r16
 9a8:	ff 90       	pop	r15
 9aa:	ef 90       	pop	r14
 9ac:	08 95       	ret

000009ae <vTaskSuspendAll>:
 9ae:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <uxSchedulerSuspended>
 9b2:	8f 5f       	subi	r24, 0xFF	; 255
 9b4:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <uxSchedulerSuspended>
 9b8:	08 95       	ret

000009ba <xTaskIncrementTick>:
 9ba:	cf 92       	push	r12
 9bc:	df 92       	push	r13
 9be:	ef 92       	push	r14
 9c0:	ff 92       	push	r15
 9c2:	0f 93       	push	r16
 9c4:	1f 93       	push	r17
 9c6:	cf 93       	push	r28
 9c8:	df 93       	push	r29
 9ca:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <uxSchedulerSuspended>
 9ce:	81 11       	cpse	r24, r1
 9d0:	95 c0       	rjmp	.+298    	; 0xafc <xTaskIncrementTick+0x142>
 9d2:	e0 90 0f 07 	lds	r14, 0x070F	; 0x80070f <xTickCount>
 9d6:	f0 90 10 07 	lds	r15, 0x0710	; 0x800710 <xTickCount+0x1>
 9da:	8f ef       	ldi	r24, 0xFF	; 255
 9dc:	e8 1a       	sub	r14, r24
 9de:	f8 0a       	sbc	r15, r24
 9e0:	f0 92 10 07 	sts	0x0710, r15	; 0x800710 <xTickCount+0x1>
 9e4:	e0 92 0f 07 	sts	0x070F, r14	; 0x80070f <xTickCount>
 9e8:	e1 14       	cp	r14, r1
 9ea:	f1 04       	cpc	r15, r1
 9ec:	b1 f4       	brne	.+44     	; 0xa1a <xTaskIncrementTick+0x60>
 9ee:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <pxDelayedTaskList>
 9f2:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <pxDelayedTaskList+0x1>
 9f6:	20 91 25 07 	lds	r18, 0x0725	; 0x800725 <pxOverflowDelayedTaskList>
 9fa:	30 91 26 07 	lds	r19, 0x0726	; 0x800726 <pxOverflowDelayedTaskList+0x1>
 9fe:	30 93 28 07 	sts	0x0728, r19	; 0x800728 <pxDelayedTaskList+0x1>
 a02:	20 93 27 07 	sts	0x0727, r18	; 0x800727 <pxDelayedTaskList>
 a06:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <pxOverflowDelayedTaskList+0x1>
 a0a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <pxOverflowDelayedTaskList>
 a0e:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <xNumOfOverflows>
 a12:	8f 5f       	subi	r24, 0xFF	; 255
 a14:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <xNumOfOverflows>
 a18:	11 de       	rcall	.-990    	; 0x63c <prvResetNextTaskUnblockTime>
 a1a:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <xNextTaskUnblockTime>
 a1e:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <xNextTaskUnblockTime+0x1>
 a22:	e8 16       	cp	r14, r24
 a24:	f9 06       	cpc	r15, r25
 a26:	10 f4       	brcc	.+4      	; 0xa2c <xTaskIncrementTick+0x72>
 a28:	d1 2c       	mov	r13, r1
 a2a:	50 c0       	rjmp	.+160    	; 0xacc <xTaskIncrementTick+0x112>
 a2c:	d1 2c       	mov	r13, r1
 a2e:	cc 24       	eor	r12, r12
 a30:	c3 94       	inc	r12
 a32:	e0 91 27 07 	lds	r30, 0x0727	; 0x800727 <pxDelayedTaskList>
 a36:	f0 91 28 07 	lds	r31, 0x0728	; 0x800728 <pxDelayedTaskList+0x1>
 a3a:	80 81       	ld	r24, Z
 a3c:	81 11       	cpse	r24, r1
 a3e:	07 c0       	rjmp	.+14     	; 0xa4e <xTaskIncrementTick+0x94>
 a40:	8f ef       	ldi	r24, 0xFF	; 255
 a42:	9f ef       	ldi	r25, 0xFF	; 255
 a44:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <xNextTaskUnblockTime+0x1>
 a48:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <xNextTaskUnblockTime>
 a4c:	3f c0       	rjmp	.+126    	; 0xacc <xTaskIncrementTick+0x112>
 a4e:	e0 91 27 07 	lds	r30, 0x0727	; 0x800727 <pxDelayedTaskList>
 a52:	f0 91 28 07 	lds	r31, 0x0728	; 0x800728 <pxDelayedTaskList+0x1>
 a56:	05 80       	ldd	r0, Z+5	; 0x05
 a58:	f6 81       	ldd	r31, Z+6	; 0x06
 a5a:	e0 2d       	mov	r30, r0
 a5c:	c6 81       	ldd	r28, Z+6	; 0x06
 a5e:	d7 81       	ldd	r29, Z+7	; 0x07
 a60:	8a 81       	ldd	r24, Y+2	; 0x02
 a62:	9b 81       	ldd	r25, Y+3	; 0x03
 a64:	e8 16       	cp	r14, r24
 a66:	f9 06       	cpc	r15, r25
 a68:	28 f4       	brcc	.+10     	; 0xa74 <xTaskIncrementTick+0xba>
 a6a:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <xNextTaskUnblockTime+0x1>
 a6e:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <xNextTaskUnblockTime>
 a72:	2c c0       	rjmp	.+88     	; 0xacc <xTaskIncrementTick+0x112>
 a74:	8e 01       	movw	r16, r28
 a76:	0e 5f       	subi	r16, 0xFE	; 254
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	c8 01       	movw	r24, r16
 a7c:	bd db       	rcall	.-2182   	; 0x1f8 <uxListRemove>
 a7e:	8c 89       	ldd	r24, Y+20	; 0x14
 a80:	9d 89       	ldd	r25, Y+21	; 0x15
 a82:	89 2b       	or	r24, r25
 a84:	19 f0       	breq	.+6      	; 0xa8c <xTaskIncrementTick+0xd2>
 a86:	ce 01       	movw	r24, r28
 a88:	0c 96       	adiw	r24, 0x0c	; 12
 a8a:	b6 db       	rcall	.-2196   	; 0x1f8 <uxListRemove>
 a8c:	8e 89       	ldd	r24, Y+22	; 0x16
 a8e:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
 a92:	98 17       	cp	r25, r24
 a94:	10 f4       	brcc	.+4      	; 0xa9a <xTaskIncrementTick+0xe0>
 a96:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	9c 01       	movw	r18, r24
 a9e:	22 0f       	add	r18, r18
 aa0:	33 1f       	adc	r19, r19
 aa2:	22 0f       	add	r18, r18
 aa4:	33 1f       	adc	r19, r19
 aa6:	22 0f       	add	r18, r18
 aa8:	33 1f       	adc	r19, r19
 aaa:	82 0f       	add	r24, r18
 aac:	93 1f       	adc	r25, r19
 aae:	b8 01       	movw	r22, r16
 ab0:	85 5c       	subi	r24, 0xC5	; 197
 ab2:	98 4f       	sbci	r25, 0xF8	; 248
 ab4:	4f db       	rcall	.-2402   	; 0x154 <vListInsertEnd>
 ab6:	e0 91 5f 07 	lds	r30, 0x075F	; 0x80075f <pxCurrentTCB>
 aba:	f0 91 60 07 	lds	r31, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 abe:	9e 89       	ldd	r25, Y+22	; 0x16
 ac0:	86 89       	ldd	r24, Z+22	; 0x16
 ac2:	98 17       	cp	r25, r24
 ac4:	08 f4       	brcc	.+2      	; 0xac8 <xTaskIncrementTick+0x10e>
 ac6:	b5 cf       	rjmp	.-150    	; 0xa32 <xTaskIncrementTick+0x78>
 ac8:	dc 2c       	mov	r13, r12
 aca:	b3 cf       	rjmp	.-154    	; 0xa32 <xTaskIncrementTick+0x78>
 acc:	e0 91 5f 07 	lds	r30, 0x075F	; 0x80075f <pxCurrentTCB>
 ad0:	f0 91 60 07 	lds	r31, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 ad4:	86 89       	ldd	r24, Z+22	; 0x16
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	fc 01       	movw	r30, r24
 ada:	ee 0f       	add	r30, r30
 adc:	ff 1f       	adc	r31, r31
 ade:	ee 0f       	add	r30, r30
 ae0:	ff 1f       	adc	r31, r31
 ae2:	ee 0f       	add	r30, r30
 ae4:	ff 1f       	adc	r31, r31
 ae6:	8e 0f       	add	r24, r30
 ae8:	9f 1f       	adc	r25, r31
 aea:	fc 01       	movw	r30, r24
 aec:	e5 5c       	subi	r30, 0xC5	; 197
 aee:	f8 4f       	sbci	r31, 0xF8	; 248
 af0:	80 81       	ld	r24, Z
 af2:	82 30       	cpi	r24, 0x02	; 2
 af4:	48 f0       	brcs	.+18     	; 0xb08 <xTaskIncrementTick+0x14e>
 af6:	dd 24       	eor	r13, r13
 af8:	d3 94       	inc	r13
 afa:	06 c0       	rjmp	.+12     	; 0xb08 <xTaskIncrementTick+0x14e>
 afc:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <uxPendedTicks>
 b00:	8f 5f       	subi	r24, 0xFF	; 255
 b02:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <uxPendedTicks>
 b06:	d1 2c       	mov	r13, r1
 b08:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xYieldPending>
 b0c:	88 23       	and	r24, r24
 b0e:	11 f0       	breq	.+4      	; 0xb14 <xTaskIncrementTick+0x15a>
 b10:	dd 24       	eor	r13, r13
 b12:	d3 94       	inc	r13
 b14:	8d 2d       	mov	r24, r13
 b16:	df 91       	pop	r29
 b18:	cf 91       	pop	r28
 b1a:	1f 91       	pop	r17
 b1c:	0f 91       	pop	r16
 b1e:	ff 90       	pop	r15
 b20:	ef 90       	pop	r14
 b22:	df 90       	pop	r13
 b24:	cf 90       	pop	r12
 b26:	08 95       	ret

00000b28 <xTaskResumeAll>:
 b28:	df 92       	push	r13
 b2a:	ef 92       	push	r14
 b2c:	ff 92       	push	r15
 b2e:	0f 93       	push	r16
 b30:	1f 93       	push	r17
 b32:	cf 93       	push	r28
 b34:	df 93       	push	r29
 b36:	0f b6       	in	r0, 0x3f	; 63
 b38:	f8 94       	cli
 b3a:	0f 92       	push	r0
 b3c:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <uxSchedulerSuspended>
 b40:	81 50       	subi	r24, 0x01	; 1
 b42:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <uxSchedulerSuspended>
 b46:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <uxSchedulerSuspended>
 b4a:	81 11       	cpse	r24, r1
 b4c:	59 c0       	rjmp	.+178    	; 0xc00 <xTaskResumeAll+0xd8>
 b4e:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
 b52:	81 11       	cpse	r24, r1
 b54:	30 c0       	rjmp	.+96     	; 0xbb6 <xTaskResumeAll+0x8e>
 b56:	57 c0       	rjmp	.+174    	; 0xc06 <xTaskResumeAll+0xde>
 b58:	d7 01       	movw	r26, r14
 b5a:	15 96       	adiw	r26, 0x05	; 5
 b5c:	ed 91       	ld	r30, X+
 b5e:	fc 91       	ld	r31, X
 b60:	16 97       	sbiw	r26, 0x06	; 6
 b62:	c6 81       	ldd	r28, Z+6	; 0x06
 b64:	d7 81       	ldd	r29, Z+7	; 0x07
 b66:	ce 01       	movw	r24, r28
 b68:	0c 96       	adiw	r24, 0x0c	; 12
 b6a:	46 db       	rcall	.-2420   	; 0x1f8 <uxListRemove>
 b6c:	8e 01       	movw	r16, r28
 b6e:	0e 5f       	subi	r16, 0xFE	; 254
 b70:	1f 4f       	sbci	r17, 0xFF	; 255
 b72:	c8 01       	movw	r24, r16
 b74:	41 db       	rcall	.-2430   	; 0x1f8 <uxListRemove>
 b76:	8e 89       	ldd	r24, Y+22	; 0x16
 b78:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
 b7c:	98 17       	cp	r25, r24
 b7e:	10 f4       	brcc	.+4      	; 0xb84 <xTaskResumeAll+0x5c>
 b80:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	9c 01       	movw	r18, r24
 b88:	22 0f       	add	r18, r18
 b8a:	33 1f       	adc	r19, r19
 b8c:	22 0f       	add	r18, r18
 b8e:	33 1f       	adc	r19, r19
 b90:	22 0f       	add	r18, r18
 b92:	33 1f       	adc	r19, r19
 b94:	82 0f       	add	r24, r18
 b96:	93 1f       	adc	r25, r19
 b98:	b8 01       	movw	r22, r16
 b9a:	85 5c       	subi	r24, 0xC5	; 197
 b9c:	98 4f       	sbci	r25, 0xF8	; 248
 b9e:	da da       	rcall	.-2636   	; 0x154 <vListInsertEnd>
 ba0:	e0 91 5f 07 	lds	r30, 0x075F	; 0x80075f <pxCurrentTCB>
 ba4:	f0 91 60 07 	lds	r31, 0x0760	; 0x800760 <pxCurrentTCB+0x1>
 ba8:	9e 89       	ldd	r25, Y+22	; 0x16
 baa:	86 89       	ldd	r24, Z+22	; 0x16
 bac:	98 17       	cp	r25, r24
 bae:	68 f0       	brcs	.+26     	; 0xbca <xTaskResumeAll+0xa2>
 bb0:	d0 92 0b 07 	sts	0x070B, r13	; 0x80070b <xYieldPending>
 bb4:	0a c0       	rjmp	.+20     	; 0xbca <xTaskResumeAll+0xa2>
 bb6:	c0 e0       	ldi	r28, 0x00	; 0
 bb8:	d0 e0       	ldi	r29, 0x00	; 0
 bba:	0f 2e       	mov	r0, r31
 bbc:	fc e1       	ldi	r31, 0x1C	; 28
 bbe:	ef 2e       	mov	r14, r31
 bc0:	f7 e0       	ldi	r31, 0x07	; 7
 bc2:	ff 2e       	mov	r15, r31
 bc4:	f0 2d       	mov	r31, r0
 bc6:	dd 24       	eor	r13, r13
 bc8:	d3 94       	inc	r13
 bca:	f7 01       	movw	r30, r14
 bcc:	80 81       	ld	r24, Z
 bce:	81 11       	cpse	r24, r1
 bd0:	c3 cf       	rjmp	.-122    	; 0xb58 <xTaskResumeAll+0x30>
 bd2:	cd 2b       	or	r28, r29
 bd4:	09 f0       	breq	.+2      	; 0xbd8 <xTaskResumeAll+0xb0>
 bd6:	32 dd       	rcall	.-1436   	; 0x63c <prvResetNextTaskUnblockTime>
 bd8:	c0 91 0c 07 	lds	r28, 0x070C	; 0x80070c <uxPendedTicks>
 bdc:	cc 23       	and	r28, r28
 bde:	49 f0       	breq	.+18     	; 0xbf2 <xTaskResumeAll+0xca>
 be0:	d1 e0       	ldi	r29, 0x01	; 1
 be2:	eb de       	rcall	.-554    	; 0x9ba <xTaskIncrementTick>
 be4:	81 11       	cpse	r24, r1
 be6:	d0 93 0b 07 	sts	0x070B, r29	; 0x80070b <xYieldPending>
 bea:	c1 50       	subi	r28, 0x01	; 1
 bec:	d1 f7       	brne	.-12     	; 0xbe2 <xTaskResumeAll+0xba>
 bee:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <uxPendedTicks>
 bf2:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xYieldPending>
 bf6:	88 23       	and	r24, r24
 bf8:	29 f0       	breq	.+10     	; 0xc04 <xTaskResumeAll+0xdc>
 bfa:	6c dc       	rcall	.-1832   	; 0x4d4 <vPortYield>
 bfc:	81 e0       	ldi	r24, 0x01	; 1
 bfe:	03 c0       	rjmp	.+6      	; 0xc06 <xTaskResumeAll+0xde>
 c00:	80 e0       	ldi	r24, 0x00	; 0
 c02:	01 c0       	rjmp	.+2      	; 0xc06 <xTaskResumeAll+0xde>
 c04:	80 e0       	ldi	r24, 0x00	; 0
 c06:	0f 90       	pop	r0
 c08:	0f be       	out	0x3f, r0	; 63
 c0a:	df 91       	pop	r29
 c0c:	cf 91       	pop	r28
 c0e:	1f 91       	pop	r17
 c10:	0f 91       	pop	r16
 c12:	ff 90       	pop	r15
 c14:	ef 90       	pop	r14
 c16:	df 90       	pop	r13
 c18:	08 95       	ret

00000c1a <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
 c1e:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 c20:	89 2b       	or	r24, r25
 c22:	39 f0       	breq	.+14     	; 0xc32 <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 c24:	c4 de       	rcall	.-632    	; 0x9ae <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 c26:	60 e0       	ldi	r22, 0x00	; 0
 c28:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 c2a:	5b dd       	rcall	.-1354   	; 0x6e2 <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c2c:	7d df       	rcall	.-262    	; 0xb28 <xTaskResumeAll>
 c2e:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 c30:	01 c0       	rjmp	.+2      	; 0xc34 <vTaskDelay+0x1a>
 c32:	50 dc       	rcall	.-1888   	; 0x4d4 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 c34:	df 91       	pop	r29
 c36:	cf 91       	pop	r28
 c38:	08 95       	ret

00000c3a <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 c3a:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <uxSchedulerSuspended>
 c3e:	88 23       	and	r24, r24
 c40:	21 f0       	breq	.+8      	; 0xc4a <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 c42:	81 e0       	ldi	r24, 0x01	; 1
 c44:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <xYieldPending>
 c48:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 c4a:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 c4e:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <uxTopReadyPriority>
 c52:	82 2f       	mov	r24, r18
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	fc 01       	movw	r30, r24
 c58:	ee 0f       	add	r30, r30
 c5a:	ff 1f       	adc	r31, r31
 c5c:	ee 0f       	add	r30, r30
 c5e:	ff 1f       	adc	r31, r31
 c60:	ee 0f       	add	r30, r30
 c62:	ff 1f       	adc	r31, r31
 c64:	e8 0f       	add	r30, r24
 c66:	f9 1f       	adc	r31, r25
 c68:	e5 5c       	subi	r30, 0xC5	; 197
 c6a:	f8 4f       	sbci	r31, 0xF8	; 248
 c6c:	30 81       	ld	r19, Z
 c6e:	31 11       	cpse	r19, r1
 c70:	11 c0       	rjmp	.+34     	; 0xc94 <vTaskSwitchContext+0x5a>
 c72:	21 50       	subi	r18, 0x01	; 1
 c74:	82 2f       	mov	r24, r18
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	fc 01       	movw	r30, r24
 c7a:	ee 0f       	add	r30, r30
 c7c:	ff 1f       	adc	r31, r31
 c7e:	ee 0f       	add	r30, r30
 c80:	ff 1f       	adc	r31, r31
 c82:	ee 0f       	add	r30, r30
 c84:	ff 1f       	adc	r31, r31
 c86:	e8 0f       	add	r30, r24
 c88:	f9 1f       	adc	r31, r25
 c8a:	e5 5c       	subi	r30, 0xC5	; 197
 c8c:	f8 4f       	sbci	r31, 0xF8	; 248
 c8e:	30 81       	ld	r19, Z
 c90:	33 23       	and	r19, r19
 c92:	79 f3       	breq	.-34     	; 0xc72 <vTaskSwitchContext+0x38>
 c94:	ac 01       	movw	r20, r24
 c96:	44 0f       	add	r20, r20
 c98:	55 1f       	adc	r21, r21
 c9a:	44 0f       	add	r20, r20
 c9c:	55 1f       	adc	r21, r21
 c9e:	44 0f       	add	r20, r20
 ca0:	55 1f       	adc	r21, r21
 ca2:	48 0f       	add	r20, r24
 ca4:	59 1f       	adc	r21, r25
 ca6:	da 01       	movw	r26, r20
 ca8:	a5 5c       	subi	r26, 0xC5	; 197
 caa:	b8 4f       	sbci	r27, 0xF8	; 248
 cac:	11 96       	adiw	r26, 0x01	; 1
 cae:	ed 91       	ld	r30, X+
 cb0:	fc 91       	ld	r31, X
 cb2:	12 97       	sbiw	r26, 0x02	; 2
 cb4:	02 80       	ldd	r0, Z+2	; 0x02
 cb6:	f3 81       	ldd	r31, Z+3	; 0x03
 cb8:	e0 2d       	mov	r30, r0
 cba:	12 96       	adiw	r26, 0x02	; 2
 cbc:	fc 93       	st	X, r31
 cbe:	ee 93       	st	-X, r30
 cc0:	11 97       	sbiw	r26, 0x01	; 1
 cc2:	42 5c       	subi	r20, 0xC2	; 194
 cc4:	58 4f       	sbci	r21, 0xF8	; 248
 cc6:	e4 17       	cp	r30, r20
 cc8:	f5 07       	cpc	r31, r21
 cca:	29 f4       	brne	.+10     	; 0xcd6 <vTaskSwitchContext+0x9c>
 ccc:	42 81       	ldd	r20, Z+2	; 0x02
 cce:	53 81       	ldd	r21, Z+3	; 0x03
 cd0:	fd 01       	movw	r30, r26
 cd2:	52 83       	std	Z+2, r21	; 0x02
 cd4:	41 83       	std	Z+1, r20	; 0x01
 cd6:	fc 01       	movw	r30, r24
 cd8:	ee 0f       	add	r30, r30
 cda:	ff 1f       	adc	r31, r31
 cdc:	ee 0f       	add	r30, r30
 cde:	ff 1f       	adc	r31, r31
 ce0:	ee 0f       	add	r30, r30
 ce2:	ff 1f       	adc	r31, r31
 ce4:	8e 0f       	add	r24, r30
 ce6:	9f 1f       	adc	r25, r31
 ce8:	fc 01       	movw	r30, r24
 cea:	e5 5c       	subi	r30, 0xC5	; 197
 cec:	f8 4f       	sbci	r31, 0xF8	; 248
 cee:	01 80       	ldd	r0, Z+1	; 0x01
 cf0:	f2 81       	ldd	r31, Z+2	; 0x02
 cf2:	e0 2d       	mov	r30, r0
 cf4:	86 81       	ldd	r24, Z+6	; 0x06
 cf6:	97 81       	ldd	r25, Z+7	; 0x07
 cf8:	90 93 60 07 	sts	0x0760, r25	; 0x800760 <pxCurrentTCB+0x1>
 cfc:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <pxCurrentTCB>
 d00:	20 93 0e 07 	sts	0x070E, r18	; 0x80070e <uxTopReadyPriority>
 d04:	08 95       	ret

00000d06 <_exit>:
 d06:	f8 94       	cli

00000d08 <__stop_program>:
 d08:	ff cf       	rjmp	.-2      	; 0xd08 <__stop_program>
