
Part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000c86  00000d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063f  00800110  00800110  00000d2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028bd  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee9  00000000  00000000  00003871  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001884  00000000  00000000  0000475a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00005fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f4f  00000000  00000000  00006594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef4  00000000  00000000  000074e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  000093d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	bf c2       	rjmp	.+1406   	; 0x5b4 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 34       	cpi	r26, 0x4F	; 79
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	16 d1       	rcall	.+556    	; 0x2f0 <main>
  c4:	de c5       	rjmp	.+3004   	; 0xc82 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
  ce:	2d d4       	rcall	.+2138   	; 0x92a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
  d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  d4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
  d8:	89 2b       	or	r24, r25
  da:	31 f4       	brne	.+12     	; 0xe8 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  dc:	85 e1       	ldi	r24, 0x15	; 21
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  e8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <xNextFreeByte>
  ec:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <xNextFreeByte+0x1>
  f0:	c9 01       	movw	r24, r18
  f2:	8c 0f       	add	r24, r28
  f4:	9d 1f       	adc	r25, r29
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	94 07       	cpc	r25, r20
  fc:	70 f4       	brcc	.+28     	; 0x11a <pvPortMalloc+0x52>
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	70 f4       	brcc	.+28     	; 0x120 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 104:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <__data_end>
 108:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <__data_end+0x1>
 10c:	c2 0f       	add	r28, r18
 10e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 110:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextFreeByte+0x1>
 114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextFreeByte>
 118:	05 c0       	rjmp	.+10     	; 0x124 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <pvPortMalloc+0x5c>
 120:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	bf d4       	rcall	.+2430   	; 0xaa4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 126:	ce 01       	movw	r24, r28
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 132:	03 96       	adiw	r24, 0x03	; 3
 134:	92 83       	std	Z+2, r25	; 0x02
 136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	34 83       	std	Z+4, r19	; 0x04
 13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 140:	96 83       	std	Z+6, r25	; 0x06
 142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 144:	90 87       	std	Z+8, r25	; 0x08
 146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 148:	10 82       	st	Z, r1
 14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 14c:	fc 01       	movw	r30, r24
 14e:	11 86       	std	Z+9, r1	; 0x09
 150:	10 86       	std	Z+8, r1	; 0x08
 152:	08 95       	ret

00000154 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	9c 01       	movw	r18, r24
 15a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 15c:	dc 01       	movw	r26, r24
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	cd 91       	ld	r28, X+
 162:	dc 91       	ld	r29, X
 164:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 166:	d3 83       	std	Z+3, r29	; 0x03
 168:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	9d 81       	ldd	r25, Y+5	; 0x05
 176:	dc 01       	movw	r26, r24
 178:	13 96       	adiw	r26, 0x03	; 3
 17a:	7c 93       	st	X, r23
 17c:	6e 93       	st	-X, r22
 17e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 180:	7d 83       	std	Y+5, r23	; 0x05
 182:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 184:	31 87       	std	Z+9, r19	; 0x09
 186:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 188:	f9 01       	movw	r30, r18
 18a:	80 81       	ld	r24, Z
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 83       	st	Z, r24
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 19c:	48 81       	ld	r20, Y
 19e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	52 07       	cpc	r21, r18
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1a8:	fc 01       	movw	r30, r24
 1aa:	a7 81       	ldd	r26, Z+7	; 0x07
 1ac:	b0 85       	ldd	r27, Z+8	; 0x08
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1b0:	dc 01       	movw	r26, r24
 1b2:	13 96       	adiw	r26, 0x03	; 3
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <vListInsert+0x22>
 1b6:	df 01       	movw	r26, r30
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ed 91       	ld	r30, X+
 1bc:	fc 91       	ld	r31, X
 1be:	13 97       	sbiw	r26, 0x03	; 3
 1c0:	20 81       	ld	r18, Z
 1c2:	31 81       	ldd	r19, Z+1	; 0x01
 1c4:	42 17       	cp	r20, r18
 1c6:	53 07       	cpc	r21, r19
 1c8:	b0 f7       	brcc	.-20     	; 0x1b6 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	fb 83       	std	Y+3, r31	; 0x03
 1d4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1d6:	d5 83       	std	Z+5, r29	; 0x05
 1d8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 1da:	bd 83       	std	Y+5, r27	; 0x05
 1dc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	dc 93       	st	X, r29
 1e2:	ce 93       	st	-X, r28
 1e4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1e6:	99 87       	std	Y+9, r25	; 0x09
 1e8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 81       	ld	r18, Z
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	20 83       	st	Z, r18
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1fe:	a0 85       	ldd	r26, Z+8	; 0x08
 200:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202:	c2 81       	ldd	r28, Z+2	; 0x02
 204:	d3 81       	ldd	r29, Z+3	; 0x03
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	95 81       	ldd	r25, Z+5	; 0x05
 20a:	9d 83       	std	Y+5, r25	; 0x05
 20c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	c4 81       	ldd	r28, Z+4	; 0x04
 210:	d5 81       	ldd	r29, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	8d 91       	ld	r24, X+
 21e:	9c 91       	ld	r25, X
 220:	12 97       	sbiw	r26, 0x02	; 2
 222:	e8 17       	cp	r30, r24
 224:	f9 07       	cpc	r31, r25
 226:	31 f4       	brne	.+12     	; 0x234 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:	84 81       	ldd	r24, Z+4	; 0x04
 22a:	95 81       	ldd	r25, Z+5	; 0x05
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 234:	11 86       	std	Z+9, r1	; 0x09
 236:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 238:	8c 91       	ld	r24, X
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 23e:	8c 91       	ld	r24, X
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LEDS_Tick>:

unsigned char currentLED;

void LEDS_Tick(){
	//Actions
	switch(led_state){
 246:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	49 f0       	breq	.+18     	; 0x260 <LEDS_Tick+0x1a>
 24e:	18 f0       	brcs	.+6      	; 0x256 <LEDS_Tick+0x10>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	69 f0       	breq	.+26     	; 0x26e <LEDS_Tick+0x28>
 254:	13 c0       	rjmp	.+38     	; 0x27c <LEDS_Tick+0x36>
		case INIT:
			currentLED = 0x80;
 256:	80 e8       	ldi	r24, 0x80	; 128
 258:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <currentLED>
            PORTD = currentLED;
 25c:	8b b9       	out	0x0b, r24	; 11
            break;
 25e:	0f c0       	rjmp	.+30     	; 0x27e <LEDS_Tick+0x38>
		case RIGHT:
			currentLED = currentLED >> 1;
 260:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <currentLED>
 264:	86 95       	lsr	r24
 266:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <currentLED>
			PORTD = currentLED;
 26a:	8b b9       	out	0x0b, r24	; 11
			break;
 26c:	08 c0       	rjmp	.+16     	; 0x27e <LEDS_Tick+0x38>
		case LEFT:
			currentLED = currentLED << 1;
 26e:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <currentLED>
 272:	88 0f       	add	r24, r24
 274:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <currentLED>
			PORTD = currentLED;
 278:	8b b9       	out	0x0b, r24	; 11
			break;
 27a:	01 c0       	rjmp	.+2      	; 0x27e <LEDS_Tick+0x38>
		default:
            PORTD = 0;
 27c:	1b b8       	out	0x0b, r1	; 11
            break;
	}
	//Transitions
	switch(led_state){
 27e:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	41 f0       	breq	.+16     	; 0x296 <LEDS_Tick+0x50>
 286:	18 f0       	brcs	.+6      	; 0x28e <LEDS_Tick+0x48>
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	69 f0       	breq	.+26     	; 0x2a6 <LEDS_Tick+0x60>
 28c:	14 c0       	rjmp	.+40     	; 0x2b6 <LEDS_Tick+0x70>
		case INIT:
			led_state = RIGHT;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
            break;
 294:	08 95       	ret
		case RIGHT:
			if(currentLED == 0x01) {
 296:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <currentLED>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	71 f4       	brne	.+28     	; 0x2ba <LEDS_Tick+0x74>
				led_state = LEFT;
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
 2a4:	08 95       	ret
			}
			break;
		case LEFT:
			if(currentLED == 0x80) {
 2a6:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <currentLED>
 2aa:	80 38       	cpi	r24, 0x80	; 128
 2ac:	31 f4       	brne	.+12     	; 0x2ba <LEDS_Tick+0x74>
				led_state = RIGHT;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
 2b4:	08 95       	ret
			}
			break;
		default:
			led_state = INIT;
 2b6:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
 2ba:	08 95       	ret

000002bc <LedSecTask>:
#include "task.h" 
#include "croutine.h" 
enum LEDState {INIT, RIGHT, LEFT} led_state;

void LEDS_Init(){
	led_state = INIT;
 2bc:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
}

void LedSecTask() {
    LEDS_Init();
    for(;;) { 	
        LEDS_Tick();
 2c0:	c2 df       	rcall	.-124    	; 0x246 <LEDS_Tick>
        vTaskDelay(250); 
 2c2:	8a ef       	ldi	r24, 0xFA	; 250
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	67 d4       	rcall	.+2254   	; 0xb96 <vTaskDelay>
 2c8:	fb cf       	rjmp	.-10     	; 0x2c0 <LedSecTask+0x4>

000002ca <StartSecPulse>:
    } 
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	0f 93       	push	r16
    xTaskCreate(LedSecTask, 
 2d0:	e1 2c       	mov	r14, r1
 2d2:	f1 2c       	mov	r15, r1
 2d4:	08 2f       	mov	r16, r24
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	45 e5       	ldi	r20, 0x55	; 85
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	8e e5       	ldi	r24, 0x5E	; 94
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	fc d1       	rcall	.+1016   	; 0x6e0 <xTaskCreate>
            (signed portCHAR *)"LedSecTask", 
            configMINIMAL_STACK_SIZE, 
            NULL, 
            Priority, 
            NULL );
}	
 2e8:	0f 91       	pop	r16
 2ea:	ff 90       	pop	r15
 2ec:	ef 90       	pop	r14
 2ee:	08 95       	ret

000002f0 <main>:
 
int main(void) { 
    DDRA = 0x00; PORTA=0xFF;
 2f0:	11 b8       	out	0x01, r1	; 1
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	82 b9       	out	0x02, r24	; 2
    DDRD = 0xFF;
 2f6:	8a b9       	out	0x0a, r24	; 10
    //Start Tasks  
    StartSecPulse(1);
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	e7 df       	rcall	.-50     	; 0x2ca <StartSecPulse>
    //RunSchedular 
    vTaskStartScheduler(); 
 2fc:	ee d2       	rcall	.+1500   	; 0x8da <vTaskStartScheduler>
 2fe:	80 e0       	ldi	r24, 0x00	; 0
    return 0; 
}
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	08 95       	ret

00000304 <pxPortInitialiseStack>:
 304:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 306:	fc 01       	movw	r30, r24
 308:	30 83       	st	Z, r19
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	22 e2       	ldi	r18, 0x22	; 34
 30e:	20 83       	st	Z, r18
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	a3 e3       	ldi	r26, 0x33	; 51
 314:	a0 83       	st	Z, r26
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	60 83       	st	Z, r22
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	70 83       	st	Z, r23
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	10 82       	st	Z, r1
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	60 e8       	ldi	r22, 0x80	; 128
 326:	60 83       	st	Z, r22
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	10 82       	st	Z, r1
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	60 83       	st	Z, r22
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	63 e0       	ldi	r22, 0x03	; 3
 336:	60 83       	st	Z, r22
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	64 e0       	ldi	r22, 0x04	; 4
 33c:	60 83       	st	Z, r22
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	65 e0       	ldi	r22, 0x05	; 5
 342:	60 83       	st	Z, r22
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	66 e0       	ldi	r22, 0x06	; 6
 348:	60 83       	st	Z, r22
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	67 e0       	ldi	r22, 0x07	; 7
 34e:	60 83       	st	Z, r22
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	68 e0       	ldi	r22, 0x08	; 8
 354:	60 83       	st	Z, r22
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	69 e0       	ldi	r22, 0x09	; 9
 35a:	60 83       	st	Z, r22
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	60 e1       	ldi	r22, 0x10	; 16
 360:	60 83       	st	Z, r22
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	30 83       	st	Z, r19
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	32 e1       	ldi	r19, 0x12	; 18
 36a:	30 83       	st	Z, r19
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	33 e1       	ldi	r19, 0x13	; 19
 370:	30 83       	st	Z, r19
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	34 e1       	ldi	r19, 0x14	; 20
 376:	30 83       	st	Z, r19
 378:	31 97       	sbiw	r30, 0x01	; 1
 37a:	35 e1       	ldi	r19, 0x15	; 21
 37c:	30 83       	st	Z, r19
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	36 e1       	ldi	r19, 0x16	; 22
 382:	30 83       	st	Z, r19
 384:	31 97       	sbiw	r30, 0x01	; 1
 386:	37 e1       	ldi	r19, 0x17	; 23
 388:	30 83       	st	Z, r19
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	38 e1       	ldi	r19, 0x18	; 24
 38e:	30 83       	st	Z, r19
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	39 e1       	ldi	r19, 0x19	; 25
 394:	30 83       	st	Z, r19
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	30 e2       	ldi	r19, 0x20	; 32
 39a:	30 83       	st	Z, r19
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	31 e2       	ldi	r19, 0x21	; 33
 3a0:	30 83       	st	Z, r19
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	20 83       	st	Z, r18
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	23 e2       	ldi	r18, 0x23	; 35
 3aa:	20 83       	st	Z, r18
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	40 83       	st	Z, r20
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	50 83       	st	Z, r21
 3b4:	31 97       	sbiw	r30, 0x01	; 1
 3b6:	26 e2       	ldi	r18, 0x26	; 38
 3b8:	20 83       	st	Z, r18
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	27 e2       	ldi	r18, 0x27	; 39
 3be:	20 83       	st	Z, r18
 3c0:	31 97       	sbiw	r30, 0x01	; 1
 3c2:	28 e2       	ldi	r18, 0x28	; 40
 3c4:	20 83       	st	Z, r18
 3c6:	31 97       	sbiw	r30, 0x01	; 1
 3c8:	29 e2       	ldi	r18, 0x29	; 41
 3ca:	20 83       	st	Z, r18
 3cc:	31 97       	sbiw	r30, 0x01	; 1
 3ce:	20 e3       	ldi	r18, 0x30	; 48
 3d0:	20 83       	st	Z, r18
 3d2:	31 97       	sbiw	r30, 0x01	; 1
 3d4:	21 e3       	ldi	r18, 0x31	; 49
 3d6:	20 83       	st	Z, r18
 3d8:	86 97       	sbiw	r24, 0x26	; 38
 3da:	08 95       	ret

000003dc <xPortStartScheduler>:
 3dc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3e0:	8c e7       	ldi	r24, 0x7C	; 124
 3e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3e6:	8b e0       	ldi	r24, 0x0B	; 11
 3e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3ec:	ef e6       	ldi	r30, 0x6F	; 111
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	80 83       	st	Z, r24
 3f6:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 3fa:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 3fe:	cd 91       	ld	r28, X+
 400:	cd bf       	out	0x3d, r28	; 61
 402:	dd 91       	ld	r29, X+
 404:	de bf       	out	0x3e, r29	; 62
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	df 90       	pop	r13
 42c:	cf 90       	pop	r12
 42e:	bf 90       	pop	r11
 430:	af 90       	pop	r10
 432:	9f 90       	pop	r9
 434:	8f 90       	pop	r8
 436:	7f 90       	pop	r7
 438:	6f 90       	pop	r6
 43a:	5f 90       	pop	r5
 43c:	4f 90       	pop	r4
 43e:	3f 90       	pop	r3
 440:	2f 90       	pop	r2
 442:	1f 90       	pop	r1
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0
 44a:	08 95       	ret
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	08 95       	ret

00000450 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 450:	0f 92       	push	r0
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	f8 94       	cli
 456:	0f 92       	push	r0
 458:	1f 92       	push	r1
 45a:	11 24       	eor	r1, r1
 45c:	2f 92       	push	r2
 45e:	3f 92       	push	r3
 460:	4f 92       	push	r4
 462:	5f 92       	push	r5
 464:	6f 92       	push	r6
 466:	7f 92       	push	r7
 468:	8f 92       	push	r8
 46a:	9f 92       	push	r9
 46c:	af 92       	push	r10
 46e:	bf 92       	push	r11
 470:	cf 92       	push	r12
 472:	df 92       	push	r13
 474:	ef 92       	push	r14
 476:	ff 92       	push	r15
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	2f 93       	push	r18
 47e:	3f 93       	push	r19
 480:	4f 93       	push	r20
 482:	5f 93       	push	r21
 484:	6f 93       	push	r22
 486:	7f 93       	push	r23
 488:	8f 93       	push	r24
 48a:	9f 93       	push	r25
 48c:	af 93       	push	r26
 48e:	bf 93       	push	r27
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
 498:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 49c:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 4a0:	0d b6       	in	r0, 0x3d	; 61
 4a2:	0d 92       	st	X+, r0
 4a4:	0e b6       	in	r0, 0x3e	; 62
 4a6:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 4a8:	86 d3       	rcall	.+1804   	; 0xbb6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 4aa:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 4ae:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 4b2:	cd 91       	ld	r28, X+
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	dd 91       	ld	r29, X+
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	ff 91       	pop	r31
 4bc:	ef 91       	pop	r30
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	bf 91       	pop	r27
 4c4:	af 91       	pop	r26
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	7f 91       	pop	r23
 4cc:	6f 91       	pop	r22
 4ce:	5f 91       	pop	r21
 4d0:	4f 91       	pop	r20
 4d2:	3f 91       	pop	r19
 4d4:	2f 91       	pop	r18
 4d6:	1f 91       	pop	r17
 4d8:	0f 91       	pop	r16
 4da:	ff 90       	pop	r15
 4dc:	ef 90       	pop	r14
 4de:	df 90       	pop	r13
 4e0:	cf 90       	pop	r12
 4e2:	bf 90       	pop	r11
 4e4:	af 90       	pop	r10
 4e6:	9f 90       	pop	r9
 4e8:	8f 90       	pop	r8
 4ea:	7f 90       	pop	r7
 4ec:	6f 90       	pop	r6
 4ee:	5f 90       	pop	r5
 4f0:	4f 90       	pop	r4
 4f2:	3f 90       	pop	r3
 4f4:	2f 90       	pop	r2
 4f6:	1f 90       	pop	r1
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4fe:	08 95       	ret

00000500 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	0f 92       	push	r0
 508:	1f 92       	push	r1
 50a:	11 24       	eor	r1, r1
 50c:	2f 92       	push	r2
 50e:	3f 92       	push	r3
 510:	4f 92       	push	r4
 512:	5f 92       	push	r5
 514:	6f 92       	push	r6
 516:	7f 92       	push	r7
 518:	8f 92       	push	r8
 51a:	9f 92       	push	r9
 51c:	af 92       	push	r10
 51e:	bf 92       	push	r11
 520:	cf 92       	push	r12
 522:	df 92       	push	r13
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	2f 93       	push	r18
 52e:	3f 93       	push	r19
 530:	4f 93       	push	r20
 532:	5f 93       	push	r21
 534:	6f 93       	push	r22
 536:	7f 93       	push	r23
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	ef 93       	push	r30
 546:	ff 93       	push	r31
 548:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 54c:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 550:	0d b6       	in	r0, 0x3d	; 61
 552:	0d 92       	st	X+, r0
 554:	0e b6       	in	r0, 0x3e	; 62
 556:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 558:	ee d1       	rcall	.+988    	; 0x936 <xTaskIncrementTick>
 55a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 55c:	2c d3       	rcall	.+1624   	; 0xbb6 <vTaskSwitchContext>
 55e:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 562:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 566:	cd 91       	ld	r28, X+
 568:	cd bf       	out	0x3d, r28	; 61
 56a:	dd 91       	ld	r29, X+
 56c:	de bf       	out	0x3e, r29	; 62
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	bf 91       	pop	r27
 578:	af 91       	pop	r26
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	7f 91       	pop	r23
 580:	6f 91       	pop	r22
 582:	5f 91       	pop	r21
 584:	4f 91       	pop	r20
 586:	3f 91       	pop	r19
 588:	2f 91       	pop	r18
 58a:	1f 91       	pop	r17
 58c:	0f 91       	pop	r16
 58e:	ff 90       	pop	r15
 590:	ef 90       	pop	r14
 592:	df 90       	pop	r13
 594:	cf 90       	pop	r12
 596:	bf 90       	pop	r11
 598:	af 90       	pop	r10
 59a:	9f 90       	pop	r9
 59c:	8f 90       	pop	r8
 59e:	7f 90       	pop	r7
 5a0:	6f 90       	pop	r6
 5a2:	5f 90       	pop	r5
 5a4:	4f 90       	pop	r4
 5a6:	3f 90       	pop	r3
 5a8:	2f 90       	pop	r2
 5aa:	1f 90       	pop	r1
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	08 95       	ret

000005b4 <__vector_13>:

	asm volatile ( "ret" );
 5b4:	a5 df       	rcall	.-182    	; 0x500 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 5b6:	18 95       	reti

000005b8 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 5b8:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 5bc:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 5c0:	80 81       	ld	r24, Z
 5c2:	81 11       	cpse	r24, r1
 5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <prvResetNextTaskUnblockTime+0x1c>
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	9f ef       	ldi	r25, 0xFF	; 255
 5ca:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5ce:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5d2:	08 95       	ret
 5d4:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 5d8:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 5dc:	05 80       	ldd	r0, Z+5	; 0x05
 5de:	f6 81       	ldd	r31, Z+6	; 0x06
 5e0:	e0 2d       	mov	r30, r0
 5e2:	06 80       	ldd	r0, Z+6	; 0x06
 5e4:	f7 81       	ldd	r31, Z+7	; 0x07
 5e6:	e0 2d       	mov	r30, r0
 5e8:	82 81       	ldd	r24, Z+2	; 0x02
 5ea:	93 81       	ldd	r25, Z+3	; 0x03
 5ec:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5f0:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5f4:	08 95       	ret

000005f6 <prvIdleTask>:
 5f6:	0f ef       	ldi	r16, 0xFF	; 255
 5f8:	16 e0       	ldi	r17, 0x06	; 6
 5fa:	0f 2e       	mov	r0, r31
 5fc:	f7 e2       	ldi	r31, 0x27	; 39
 5fe:	ef 2e       	mov	r14, r31
 600:	f7 e0       	ldi	r31, 0x07	; 7
 602:	ff 2e       	mov	r15, r31
 604:	f0 2d       	mov	r31, r0
 606:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 60a:	88 23       	and	r24, r24
 60c:	11 f1       	breq	.+68     	; 0x652 <prvIdleTask+0x5c>
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	0f 92       	push	r0
 614:	d8 01       	movw	r26, r16
 616:	15 96       	adiw	r26, 0x05	; 5
 618:	ed 91       	ld	r30, X+
 61a:	fc 91       	ld	r31, X
 61c:	16 97       	sbiw	r26, 0x06	; 6
 61e:	c6 81       	ldd	r28, Z+6	; 0x06
 620:	d7 81       	ldd	r29, Z+7	; 0x07
 622:	ce 01       	movw	r24, r28
 624:	02 96       	adiw	r24, 0x02	; 2
 626:	e8 dd       	rcall	.-1072   	; 0x1f8 <uxListRemove>
 628:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 62c:	81 50       	subi	r24, 0x01	; 1
 62e:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 632:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 636:	81 50       	subi	r24, 0x01	; 1
 638:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 63c:	0f 90       	pop	r0
 63e:	0f be       	out	0x3f, r0	; 63
 640:	8f 89       	ldd	r24, Y+23	; 0x17
 642:	98 8d       	ldd	r25, Y+24	; 0x18
 644:	74 dd       	rcall	.-1304   	; 0x12e <vPortFree>
 646:	ce 01       	movw	r24, r28
 648:	72 dd       	rcall	.-1308   	; 0x12e <vPortFree>
 64a:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 64e:	81 11       	cpse	r24, r1
 650:	de cf       	rjmp	.-68     	; 0x60e <prvIdleTask+0x18>
 652:	f7 01       	movw	r30, r14
 654:	80 81       	ld	r24, Z
 656:	82 30       	cpi	r24, 0x02	; 2
 658:	b0 f2       	brcs	.-84     	; 0x606 <prvIdleTask+0x10>
 65a:	fa de       	rcall	.-524    	; 0x450 <vPortYield>
 65c:	d4 cf       	rjmp	.-88     	; 0x606 <prvIdleTask+0x10>

0000065e <prvAddCurrentTaskToDelayedList>:
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	ec 01       	movw	r28, r24
 668:	00 91 fb 06 	lds	r16, 0x06FB	; 0x8006fb <xTickCount>
 66c:	10 91 fc 06 	lds	r17, 0x06FC	; 0x8006fc <xTickCount+0x1>
 670:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 674:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 678:	02 96       	adiw	r24, 0x02	; 2
 67a:	be dd       	rcall	.-1156   	; 0x1f8 <uxListRemove>
 67c:	c0 0f       	add	r28, r16
 67e:	d1 1f       	adc	r29, r17
 680:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 684:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 688:	d3 83       	std	Z+3, r29	; 0x03
 68a:	c2 83       	std	Z+2, r28	; 0x02
 68c:	c0 17       	cp	r28, r16
 68e:	d1 07       	cpc	r29, r17
 690:	60 f4       	brcc	.+24     	; 0x6aa <prvAddCurrentTaskToDelayedList+0x4c>
 692:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 696:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 69a:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 69e:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 6a2:	6e 5f       	subi	r22, 0xFE	; 254
 6a4:	7f 4f       	sbci	r23, 0xFF	; 255
 6a6:	77 dd       	rcall	.-1298   	; 0x196 <vListInsert>
 6a8:	16 c0       	rjmp	.+44     	; 0x6d6 <prvAddCurrentTaskToDelayedList+0x78>
 6aa:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 6ae:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 6b2:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 6b6:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 6ba:	6e 5f       	subi	r22, 0xFE	; 254
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	6b dd       	rcall	.-1322   	; 0x196 <vListInsert>
 6c0:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 6c4:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 6c8:	c8 17       	cp	r28, r24
 6ca:	d9 07       	cpc	r29, r25
 6cc:	20 f4       	brcc	.+8      	; 0x6d6 <prvAddCurrentTaskToDelayedList+0x78>
 6ce:	d0 93 f4 06 	sts	0x06F4, r29	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 6d2:	c0 93 f3 06 	sts	0x06F3, r28	; 0x8006f3 <xNextTaskUnblockTime>
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	0f 91       	pop	r16
 6de:	08 95       	ret

000006e0 <xTaskCreate>:
 6e0:	4f 92       	push	r4
 6e2:	5f 92       	push	r5
 6e4:	6f 92       	push	r6
 6e6:	7f 92       	push	r7
 6e8:	8f 92       	push	r8
 6ea:	9f 92       	push	r9
 6ec:	af 92       	push	r10
 6ee:	bf 92       	push	r11
 6f0:	cf 92       	push	r12
 6f2:	df 92       	push	r13
 6f4:	ef 92       	push	r14
 6f6:	ff 92       	push	r15
 6f8:	0f 93       	push	r16
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	4c 01       	movw	r8, r24
 700:	6b 01       	movw	r12, r22
 702:	5a 01       	movw	r10, r20
 704:	29 01       	movw	r4, r18
 706:	ca 01       	movw	r24, r20
 708:	df dc       	rcall	.-1602   	; 0xc8 <pvPortMalloc>
 70a:	3c 01       	movw	r6, r24
 70c:	89 2b       	or	r24, r25
 70e:	09 f4       	brne	.+2      	; 0x712 <xTaskCreate+0x32>
 710:	d3 c0       	rjmp	.+422    	; 0x8b8 <xTaskCreate+0x1d8>
 712:	86 e2       	ldi	r24, 0x26	; 38
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	d8 dc       	rcall	.-1616   	; 0xc8 <pvPortMalloc>
 718:	ec 01       	movw	r28, r24
 71a:	89 2b       	or	r24, r25
 71c:	59 f0       	breq	.+22     	; 0x734 <xTaskCreate+0x54>
 71e:	78 8e       	std	Y+24, r7	; 0x18
 720:	6f 8a       	std	Y+23, r6	; 0x17
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	a8 1a       	sub	r10, r24
 726:	b1 08       	sbc	r11, r1
 728:	a6 0c       	add	r10, r6
 72a:	b7 1c       	adc	r11, r7
 72c:	c1 14       	cp	r12, r1
 72e:	d1 04       	cpc	r13, r1
 730:	21 f4       	brne	.+8      	; 0x73a <xTaskCreate+0x5a>
 732:	1f c0       	rjmp	.+62     	; 0x772 <xTaskCreate+0x92>
 734:	c3 01       	movw	r24, r6
 736:	fb dc       	rcall	.-1546   	; 0x12e <vPortFree>
 738:	bf c0       	rjmp	.+382    	; 0x8b8 <xTaskCreate+0x1d8>
 73a:	d6 01       	movw	r26, r12
 73c:	8c 91       	ld	r24, X
 73e:	89 8f       	std	Y+25, r24	; 0x19
 740:	8c 91       	ld	r24, X
 742:	88 23       	and	r24, r24
 744:	a1 f0       	breq	.+40     	; 0x76e <xTaskCreate+0x8e>
 746:	ae 01       	movw	r20, r28
 748:	46 5e       	subi	r20, 0xE6	; 230
 74a:	5f 4f       	sbci	r21, 0xFF	; 255
 74c:	f6 01       	movw	r30, r12
 74e:	31 96       	adiw	r30, 0x01	; 1
 750:	b8 e0       	ldi	r27, 0x08	; 8
 752:	cb 0e       	add	r12, r27
 754:	d1 1c       	adc	r13, r1
 756:	cf 01       	movw	r24, r30
 758:	21 91       	ld	r18, Z+
 75a:	da 01       	movw	r26, r20
 75c:	2d 93       	st	X+, r18
 75e:	ad 01       	movw	r20, r26
 760:	dc 01       	movw	r26, r24
 762:	8c 91       	ld	r24, X
 764:	88 23       	and	r24, r24
 766:	19 f0       	breq	.+6      	; 0x76e <xTaskCreate+0x8e>
 768:	ec 15       	cp	r30, r12
 76a:	fd 05       	cpc	r31, r13
 76c:	a1 f7       	brne	.-24     	; 0x756 <xTaskCreate+0x76>
 76e:	18 a2       	std	Y+32, r1	; 0x20
 770:	01 c0       	rjmp	.+2      	; 0x774 <xTaskCreate+0x94>
 772:	19 8e       	std	Y+25, r1	; 0x19
 774:	04 30       	cpi	r16, 0x04	; 4
 776:	08 f0       	brcs	.+2      	; 0x77a <xTaskCreate+0x9a>
 778:	03 e0       	ldi	r16, 0x03	; 3
 77a:	0e 8b       	std	Y+22, r16	; 0x16
 77c:	6e 01       	movw	r12, r28
 77e:	b2 e0       	ldi	r27, 0x02	; 2
 780:	cb 0e       	add	r12, r27
 782:	d1 1c       	adc	r13, r1
 784:	c6 01       	movw	r24, r12
 786:	e2 dc       	rcall	.-1596   	; 0x14c <vListInitialiseItem>
 788:	ce 01       	movw	r24, r28
 78a:	0c 96       	adiw	r24, 0x0c	; 12
 78c:	df dc       	rcall	.-1602   	; 0x14c <vListInitialiseItem>
 78e:	d9 87       	std	Y+9, r29	; 0x09
 790:	c8 87       	std	Y+8, r28	; 0x08
 792:	84 e0       	ldi	r24, 0x04	; 4
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	80 1b       	sub	r24, r16
 798:	91 09       	sbc	r25, r1
 79a:	9d 87       	std	Y+13, r25	; 0x0d
 79c:	8c 87       	std	Y+12, r24	; 0x0c
 79e:	db 8b       	std	Y+19, r29	; 0x13
 7a0:	ca 8b       	std	Y+18, r28	; 0x12
 7a2:	19 a2       	std	Y+33, r1	; 0x21
 7a4:	1a a2       	std	Y+34, r1	; 0x22
 7a6:	1b a2       	std	Y+35, r1	; 0x23
 7a8:	1c a2       	std	Y+36, r1	; 0x24
 7aa:	1d a2       	std	Y+37, r1	; 0x25
 7ac:	a2 01       	movw	r20, r4
 7ae:	b4 01       	movw	r22, r8
 7b0:	c5 01       	movw	r24, r10
 7b2:	a8 dd       	rcall	.-1200   	; 0x304 <pxPortInitialiseStack>
 7b4:	99 83       	std	Y+1, r25	; 0x01
 7b6:	88 83       	st	Y, r24
 7b8:	e1 14       	cp	r14, r1
 7ba:	f1 04       	cpc	r15, r1
 7bc:	19 f0       	breq	.+6      	; 0x7c4 <xTaskCreate+0xe4>
 7be:	f7 01       	movw	r30, r14
 7c0:	d1 83       	std	Z+1, r29	; 0x01
 7c2:	c0 83       	st	Z, r28
 7c4:	0f b6       	in	r0, 0x3f	; 63
 7c6:	f8 94       	cli
 7c8:	0f 92       	push	r0
 7ca:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7ce:	8f 5f       	subi	r24, 0xFF	; 255
 7d0:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 7d4:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 7d8:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 7dc:	89 2b       	or	r24, r25
 7de:	69 f5       	brne	.+90     	; 0x83a <xTaskCreate+0x15a>
 7e0:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 7e4:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 7e8:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	a9 f5       	brne	.+106    	; 0x85a <xTaskCreate+0x17a>
 7f0:	87 e2       	ldi	r24, 0x27	; 39
 7f2:	97 e0       	ldi	r25, 0x07	; 7
 7f4:	9d dc       	rcall	.-1734   	; 0x130 <vListInitialise>
 7f6:	80 e3       	ldi	r24, 0x30	; 48
 7f8:	97 e0       	ldi	r25, 0x07	; 7
 7fa:	9a dc       	rcall	.-1740   	; 0x130 <vListInitialise>
 7fc:	89 e3       	ldi	r24, 0x39	; 57
 7fe:	97 e0       	ldi	r25, 0x07	; 7
 800:	97 dc       	rcall	.-1746   	; 0x130 <vListInitialise>
 802:	82 e4       	ldi	r24, 0x42	; 66
 804:	97 e0       	ldi	r25, 0x07	; 7
 806:	94 dc       	rcall	.-1752   	; 0x130 <vListInitialise>
 808:	8e e1       	ldi	r24, 0x1E	; 30
 80a:	97 e0       	ldi	r25, 0x07	; 7
 80c:	91 dc       	rcall	.-1758   	; 0x130 <vListInitialise>
 80e:	85 e1       	ldi	r24, 0x15	; 21
 810:	97 e0       	ldi	r25, 0x07	; 7
 812:	8e dc       	rcall	.-1764   	; 0x130 <vListInitialise>
 814:	88 e0       	ldi	r24, 0x08	; 8
 816:	97 e0       	ldi	r25, 0x07	; 7
 818:	8b dc       	rcall	.-1770   	; 0x130 <vListInitialise>
 81a:	8f ef       	ldi	r24, 0xFF	; 255
 81c:	96 e0       	ldi	r25, 0x06	; 6
 81e:	88 dc       	rcall	.-1776   	; 0x130 <vListInitialise>
 820:	8e e1       	ldi	r24, 0x1E	; 30
 822:	97 e0       	ldi	r25, 0x07	; 7
 824:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
 828:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
 82c:	85 e1       	ldi	r24, 0x15	; 21
 82e:	97 e0       	ldi	r25, 0x07	; 7
 830:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 834:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 838:	10 c0       	rjmp	.+32     	; 0x85a <xTaskCreate+0x17a>
 83a:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 83e:	81 11       	cpse	r24, r1
 840:	0c c0       	rjmp	.+24     	; 0x85a <xTaskCreate+0x17a>
 842:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 846:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 84a:	96 89       	ldd	r25, Z+22	; 0x16
 84c:	8e 89       	ldd	r24, Y+22	; 0x16
 84e:	89 17       	cp	r24, r25
 850:	20 f0       	brcs	.+8      	; 0x85a <xTaskCreate+0x17a>
 852:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 856:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 85a:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxTaskNumber>
 85e:	8f 5f       	subi	r24, 0xFF	; 255
 860:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTaskNumber>
 864:	8e 89       	ldd	r24, Y+22	; 0x16
 866:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 86a:	98 17       	cp	r25, r24
 86c:	10 f4       	brcc	.+4      	; 0x872 <xTaskCreate+0x192>
 86e:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	9c 01       	movw	r18, r24
 876:	22 0f       	add	r18, r18
 878:	33 1f       	adc	r19, r19
 87a:	22 0f       	add	r18, r18
 87c:	33 1f       	adc	r19, r19
 87e:	22 0f       	add	r18, r18
 880:	33 1f       	adc	r19, r19
 882:	82 0f       	add	r24, r18
 884:	93 1f       	adc	r25, r19
 886:	b6 01       	movw	r22, r12
 888:	89 5d       	subi	r24, 0xD9	; 217
 88a:	98 4f       	sbci	r25, 0xF8	; 248
 88c:	63 dc       	rcall	.-1850   	; 0x154 <vListInsertEnd>
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 896:	88 23       	and	r24, r24
 898:	59 f0       	breq	.+22     	; 0x8b0 <xTaskCreate+0x1d0>
 89a:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 89e:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 8a2:	96 89       	ldd	r25, Z+22	; 0x16
 8a4:	8e 89       	ldd	r24, Y+22	; 0x16
 8a6:	98 17       	cp	r25, r24
 8a8:	28 f4       	brcc	.+10     	; 0x8b4 <xTaskCreate+0x1d4>
 8aa:	d2 dd       	rcall	.-1116   	; 0x450 <vPortYield>
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	05 c0       	rjmp	.+10     	; 0x8ba <xTaskCreate+0x1da>
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <xTaskCreate+0x1da>
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	01 c0       	rjmp	.+2      	; 0x8ba <xTaskCreate+0x1da>
 8b8:	8f ef       	ldi	r24, 0xFF	; 255
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	0f 91       	pop	r16
 8c0:	ff 90       	pop	r15
 8c2:	ef 90       	pop	r14
 8c4:	df 90       	pop	r13
 8c6:	cf 90       	pop	r12
 8c8:	bf 90       	pop	r11
 8ca:	af 90       	pop	r10
 8cc:	9f 90       	pop	r9
 8ce:	8f 90       	pop	r8
 8d0:	7f 90       	pop	r7
 8d2:	6f 90       	pop	r6
 8d4:	5f 90       	pop	r5
 8d6:	4f 90       	pop	r4
 8d8:	08 95       	ret

000008da <vTaskStartScheduler>:
 8da:	ef 92       	push	r14
 8dc:	ff 92       	push	r15
 8de:	0f 93       	push	r16
 8e0:	0f 2e       	mov	r0, r31
 8e2:	f1 ef       	ldi	r31, 0xF1	; 241
 8e4:	ef 2e       	mov	r14, r31
 8e6:	f6 e0       	ldi	r31, 0x06	; 6
 8e8:	ff 2e       	mov	r15, r31
 8ea:	f0 2d       	mov	r31, r0
 8ec:	00 e0       	ldi	r16, 0x00	; 0
 8ee:	20 e0       	ldi	r18, 0x00	; 0
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	45 e5       	ldi	r20, 0x55	; 85
 8f4:	50 e0       	ldi	r21, 0x00	; 0
 8f6:	6b e0       	ldi	r22, 0x0B	; 11
 8f8:	71 e0       	ldi	r23, 0x01	; 1
 8fa:	8b ef       	ldi	r24, 0xFB	; 251
 8fc:	92 e0       	ldi	r25, 0x02	; 2
 8fe:	f0 de       	rcall	.-544    	; 0x6e0 <xTaskCreate>
 900:	81 30       	cpi	r24, 0x01	; 1
 902:	79 f4       	brne	.+30     	; 0x922 <vTaskStartScheduler+0x48>
 904:	f8 94       	cli
 906:	8f ef       	ldi	r24, 0xFF	; 255
 908:	9f ef       	ldi	r25, 0xFF	; 255
 90a:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 90e:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <xSchedulerRunning>
 918:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xTickCount+0x1>
 91c:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount>
 920:	5d dd       	rcall	.-1350   	; 0x3dc <xPortStartScheduler>
 922:	0f 91       	pop	r16
 924:	ff 90       	pop	r15
 926:	ef 90       	pop	r14
 928:	08 95       	ret

0000092a <vTaskSuspendAll>:
 92a:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 92e:	8f 5f       	subi	r24, 0xFF	; 255
 930:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 934:	08 95       	ret

00000936 <xTaskIncrementTick>:
 936:	cf 92       	push	r12
 938:	df 92       	push	r13
 93a:	ef 92       	push	r14
 93c:	ff 92       	push	r15
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 94a:	81 11       	cpse	r24, r1
 94c:	95 c0       	rjmp	.+298    	; 0xa78 <xTaskIncrementTick+0x142>
 94e:	e0 90 fb 06 	lds	r14, 0x06FB	; 0x8006fb <xTickCount>
 952:	f0 90 fc 06 	lds	r15, 0x06FC	; 0x8006fc <xTickCount+0x1>
 956:	8f ef       	ldi	r24, 0xFF	; 255
 958:	e8 1a       	sub	r14, r24
 95a:	f8 0a       	sbc	r15, r24
 95c:	f0 92 fc 06 	sts	0x06FC, r15	; 0x8006fc <xTickCount+0x1>
 960:	e0 92 fb 06 	sts	0x06FB, r14	; 0x8006fb <xTickCount>
 964:	e1 14       	cp	r14, r1
 966:	f1 04       	cpc	r15, r1
 968:	b1 f4       	brne	.+44     	; 0x996 <xTaskIncrementTick+0x60>
 96a:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 96e:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 972:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 976:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 97a:	30 93 14 07 	sts	0x0714, r19	; 0x800714 <pxDelayedTaskList+0x1>
 97e:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <pxDelayedTaskList>
 982:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 986:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 98a:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNumOfOverflows>
 98e:	8f 5f       	subi	r24, 0xFF	; 255
 990:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNumOfOverflows>
 994:	11 de       	rcall	.-990    	; 0x5b8 <prvResetNextTaskUnblockTime>
 996:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 99a:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 99e:	e8 16       	cp	r14, r24
 9a0:	f9 06       	cpc	r15, r25
 9a2:	10 f4       	brcc	.+4      	; 0x9a8 <xTaskIncrementTick+0x72>
 9a4:	d1 2c       	mov	r13, r1
 9a6:	50 c0       	rjmp	.+160    	; 0xa48 <xTaskIncrementTick+0x112>
 9a8:	d1 2c       	mov	r13, r1
 9aa:	cc 24       	eor	r12, r12
 9ac:	c3 94       	inc	r12
 9ae:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 9b2:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 9b6:	80 81       	ld	r24, Z
 9b8:	81 11       	cpse	r24, r1
 9ba:	07 c0       	rjmp	.+14     	; 0x9ca <xTaskIncrementTick+0x94>
 9bc:	8f ef       	ldi	r24, 0xFF	; 255
 9be:	9f ef       	ldi	r25, 0xFF	; 255
 9c0:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9c4:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9c8:	3f c0       	rjmp	.+126    	; 0xa48 <xTaskIncrementTick+0x112>
 9ca:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 9ce:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 9d2:	05 80       	ldd	r0, Z+5	; 0x05
 9d4:	f6 81       	ldd	r31, Z+6	; 0x06
 9d6:	e0 2d       	mov	r30, r0
 9d8:	c6 81       	ldd	r28, Z+6	; 0x06
 9da:	d7 81       	ldd	r29, Z+7	; 0x07
 9dc:	8a 81       	ldd	r24, Y+2	; 0x02
 9de:	9b 81       	ldd	r25, Y+3	; 0x03
 9e0:	e8 16       	cp	r14, r24
 9e2:	f9 06       	cpc	r15, r25
 9e4:	28 f4       	brcc	.+10     	; 0x9f0 <xTaskIncrementTick+0xba>
 9e6:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9ea:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9ee:	2c c0       	rjmp	.+88     	; 0xa48 <xTaskIncrementTick+0x112>
 9f0:	8e 01       	movw	r16, r28
 9f2:	0e 5f       	subi	r16, 0xFE	; 254
 9f4:	1f 4f       	sbci	r17, 0xFF	; 255
 9f6:	c8 01       	movw	r24, r16
 9f8:	ff db       	rcall	.-2050   	; 0x1f8 <uxListRemove>
 9fa:	8c 89       	ldd	r24, Y+20	; 0x14
 9fc:	9d 89       	ldd	r25, Y+21	; 0x15
 9fe:	89 2b       	or	r24, r25
 a00:	19 f0       	breq	.+6      	; 0xa08 <xTaskIncrementTick+0xd2>
 a02:	ce 01       	movw	r24, r28
 a04:	0c 96       	adiw	r24, 0x0c	; 12
 a06:	f8 db       	rcall	.-2064   	; 0x1f8 <uxListRemove>
 a08:	8e 89       	ldd	r24, Y+22	; 0x16
 a0a:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 a0e:	98 17       	cp	r25, r24
 a10:	10 f4       	brcc	.+4      	; 0xa16 <xTaskIncrementTick+0xe0>
 a12:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	9c 01       	movw	r18, r24
 a1a:	22 0f       	add	r18, r18
 a1c:	33 1f       	adc	r19, r19
 a1e:	22 0f       	add	r18, r18
 a20:	33 1f       	adc	r19, r19
 a22:	22 0f       	add	r18, r18
 a24:	33 1f       	adc	r19, r19
 a26:	82 0f       	add	r24, r18
 a28:	93 1f       	adc	r25, r19
 a2a:	b8 01       	movw	r22, r16
 a2c:	89 5d       	subi	r24, 0xD9	; 217
 a2e:	98 4f       	sbci	r25, 0xF8	; 248
 a30:	91 db       	rcall	.-2270   	; 0x154 <vListInsertEnd>
 a32:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a36:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a3a:	9e 89       	ldd	r25, Y+22	; 0x16
 a3c:	86 89       	ldd	r24, Z+22	; 0x16
 a3e:	98 17       	cp	r25, r24
 a40:	08 f4       	brcc	.+2      	; 0xa44 <xTaskIncrementTick+0x10e>
 a42:	b5 cf       	rjmp	.-150    	; 0x9ae <xTaskIncrementTick+0x78>
 a44:	dc 2c       	mov	r13, r12
 a46:	b3 cf       	rjmp	.-154    	; 0x9ae <xTaskIncrementTick+0x78>
 a48:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a4c:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a50:	86 89       	ldd	r24, Z+22	; 0x16
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	fc 01       	movw	r30, r24
 a56:	ee 0f       	add	r30, r30
 a58:	ff 1f       	adc	r31, r31
 a5a:	ee 0f       	add	r30, r30
 a5c:	ff 1f       	adc	r31, r31
 a5e:	ee 0f       	add	r30, r30
 a60:	ff 1f       	adc	r31, r31
 a62:	8e 0f       	add	r24, r30
 a64:	9f 1f       	adc	r25, r31
 a66:	fc 01       	movw	r30, r24
 a68:	e9 5d       	subi	r30, 0xD9	; 217
 a6a:	f8 4f       	sbci	r31, 0xF8	; 248
 a6c:	80 81       	ld	r24, Z
 a6e:	82 30       	cpi	r24, 0x02	; 2
 a70:	48 f0       	brcs	.+18     	; 0xa84 <xTaskIncrementTick+0x14e>
 a72:	dd 24       	eor	r13, r13
 a74:	d3 94       	inc	r13
 a76:	06 c0       	rjmp	.+12     	; 0xa84 <xTaskIncrementTick+0x14e>
 a78:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxPendedTicks>
 a7c:	8f 5f       	subi	r24, 0xFF	; 255
 a7e:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxPendedTicks>
 a82:	d1 2c       	mov	r13, r1
 a84:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 a88:	88 23       	and	r24, r24
 a8a:	11 f0       	breq	.+4      	; 0xa90 <xTaskIncrementTick+0x15a>
 a8c:	dd 24       	eor	r13, r13
 a8e:	d3 94       	inc	r13
 a90:	8d 2d       	mov	r24, r13
 a92:	df 91       	pop	r29
 a94:	cf 91       	pop	r28
 a96:	1f 91       	pop	r17
 a98:	0f 91       	pop	r16
 a9a:	ff 90       	pop	r15
 a9c:	ef 90       	pop	r14
 a9e:	df 90       	pop	r13
 aa0:	cf 90       	pop	r12
 aa2:	08 95       	ret

00000aa4 <xTaskResumeAll>:
 aa4:	df 92       	push	r13
 aa6:	ef 92       	push	r14
 aa8:	ff 92       	push	r15
 aaa:	0f 93       	push	r16
 aac:	1f 93       	push	r17
 aae:	cf 93       	push	r28
 ab0:	df 93       	push	r29
 ab2:	0f b6       	in	r0, 0x3f	; 63
 ab4:	f8 94       	cli
 ab6:	0f 92       	push	r0
 ab8:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 abc:	81 50       	subi	r24, 0x01	; 1
 abe:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 ac2:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 ac6:	81 11       	cpse	r24, r1
 ac8:	59 c0       	rjmp	.+178    	; 0xb7c <xTaskResumeAll+0xd8>
 aca:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 ace:	81 11       	cpse	r24, r1
 ad0:	30 c0       	rjmp	.+96     	; 0xb32 <xTaskResumeAll+0x8e>
 ad2:	57 c0       	rjmp	.+174    	; 0xb82 <xTaskResumeAll+0xde>
 ad4:	d7 01       	movw	r26, r14
 ad6:	15 96       	adiw	r26, 0x05	; 5
 ad8:	ed 91       	ld	r30, X+
 ada:	fc 91       	ld	r31, X
 adc:	16 97       	sbiw	r26, 0x06	; 6
 ade:	c6 81       	ldd	r28, Z+6	; 0x06
 ae0:	d7 81       	ldd	r29, Z+7	; 0x07
 ae2:	ce 01       	movw	r24, r28
 ae4:	0c 96       	adiw	r24, 0x0c	; 12
 ae6:	88 db       	rcall	.-2288   	; 0x1f8 <uxListRemove>
 ae8:	8e 01       	movw	r16, r28
 aea:	0e 5f       	subi	r16, 0xFE	; 254
 aec:	1f 4f       	sbci	r17, 0xFF	; 255
 aee:	c8 01       	movw	r24, r16
 af0:	83 db       	rcall	.-2298   	; 0x1f8 <uxListRemove>
 af2:	8e 89       	ldd	r24, Y+22	; 0x16
 af4:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 af8:	98 17       	cp	r25, r24
 afa:	10 f4       	brcc	.+4      	; 0xb00 <xTaskResumeAll+0x5c>
 afc:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	9c 01       	movw	r18, r24
 b04:	22 0f       	add	r18, r18
 b06:	33 1f       	adc	r19, r19
 b08:	22 0f       	add	r18, r18
 b0a:	33 1f       	adc	r19, r19
 b0c:	22 0f       	add	r18, r18
 b0e:	33 1f       	adc	r19, r19
 b10:	82 0f       	add	r24, r18
 b12:	93 1f       	adc	r25, r19
 b14:	b8 01       	movw	r22, r16
 b16:	89 5d       	subi	r24, 0xD9	; 217
 b18:	98 4f       	sbci	r25, 0xF8	; 248
 b1a:	1c db       	rcall	.-2504   	; 0x154 <vListInsertEnd>
 b1c:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 b20:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 b24:	9e 89       	ldd	r25, Y+22	; 0x16
 b26:	86 89       	ldd	r24, Z+22	; 0x16
 b28:	98 17       	cp	r25, r24
 b2a:	68 f0       	brcs	.+26     	; 0xb46 <xTaskResumeAll+0xa2>
 b2c:	d0 92 f7 06 	sts	0x06F7, r13	; 0x8006f7 <xYieldPending>
 b30:	0a c0       	rjmp	.+20     	; 0xb46 <xTaskResumeAll+0xa2>
 b32:	c0 e0       	ldi	r28, 0x00	; 0
 b34:	d0 e0       	ldi	r29, 0x00	; 0
 b36:	0f 2e       	mov	r0, r31
 b38:	f8 e0       	ldi	r31, 0x08	; 8
 b3a:	ef 2e       	mov	r14, r31
 b3c:	f7 e0       	ldi	r31, 0x07	; 7
 b3e:	ff 2e       	mov	r15, r31
 b40:	f0 2d       	mov	r31, r0
 b42:	dd 24       	eor	r13, r13
 b44:	d3 94       	inc	r13
 b46:	f7 01       	movw	r30, r14
 b48:	80 81       	ld	r24, Z
 b4a:	81 11       	cpse	r24, r1
 b4c:	c3 cf       	rjmp	.-122    	; 0xad4 <xTaskResumeAll+0x30>
 b4e:	cd 2b       	or	r28, r29
 b50:	09 f0       	breq	.+2      	; 0xb54 <xTaskResumeAll+0xb0>
 b52:	32 dd       	rcall	.-1436   	; 0x5b8 <prvResetNextTaskUnblockTime>
 b54:	c0 91 f8 06 	lds	r28, 0x06F8	; 0x8006f8 <uxPendedTicks>
 b58:	cc 23       	and	r28, r28
 b5a:	49 f0       	breq	.+18     	; 0xb6e <xTaskResumeAll+0xca>
 b5c:	d1 e0       	ldi	r29, 0x01	; 1
 b5e:	eb de       	rcall	.-554    	; 0x936 <xTaskIncrementTick>
 b60:	81 11       	cpse	r24, r1
 b62:	d0 93 f7 06 	sts	0x06F7, r29	; 0x8006f7 <xYieldPending>
 b66:	c1 50       	subi	r28, 0x01	; 1
 b68:	d1 f7       	brne	.-12     	; 0xb5e <xTaskResumeAll+0xba>
 b6a:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <uxPendedTicks>
 b6e:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 b72:	88 23       	and	r24, r24
 b74:	29 f0       	breq	.+10     	; 0xb80 <xTaskResumeAll+0xdc>
 b76:	6c dc       	rcall	.-1832   	; 0x450 <vPortYield>
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	03 c0       	rjmp	.+6      	; 0xb82 <xTaskResumeAll+0xde>
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	01 c0       	rjmp	.+2      	; 0xb82 <xTaskResumeAll+0xde>
 b80:	80 e0       	ldi	r24, 0x00	; 0
 b82:	0f 90       	pop	r0
 b84:	0f be       	out	0x3f, r0	; 63
 b86:	df 91       	pop	r29
 b88:	cf 91       	pop	r28
 b8a:	1f 91       	pop	r17
 b8c:	0f 91       	pop	r16
 b8e:	ff 90       	pop	r15
 b90:	ef 90       	pop	r14
 b92:	df 90       	pop	r13
 b94:	08 95       	ret

00000b96 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 b96:	cf 93       	push	r28
 b98:	df 93       	push	r29
 b9a:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 b9c:	89 2b       	or	r24, r25
 b9e:	39 f0       	breq	.+14     	; 0xbae <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 ba0:	c4 de       	rcall	.-632    	; 0x92a <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 ba2:	60 e0       	ldi	r22, 0x00	; 0
 ba4:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 ba6:	5b dd       	rcall	.-1354   	; 0x65e <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 ba8:	7d df       	rcall	.-262    	; 0xaa4 <xTaskResumeAll>
 baa:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 bac:	01 c0       	rjmp	.+2      	; 0xbb0 <vTaskDelay+0x1a>
 bae:	50 dc       	rcall	.-1888   	; 0x450 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 bb0:	df 91       	pop	r29
 bb2:	cf 91       	pop	r28
 bb4:	08 95       	ret

00000bb6 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 bb6:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 bba:	88 23       	and	r24, r24
 bbc:	21 f0       	breq	.+8      	; 0xbc6 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 bbe:	81 e0       	ldi	r24, 0x01	; 1
 bc0:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xYieldPending>
 bc4:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 bc6:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 bca:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 bce:	82 2f       	mov	r24, r18
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	fc 01       	movw	r30, r24
 bd4:	ee 0f       	add	r30, r30
 bd6:	ff 1f       	adc	r31, r31
 bd8:	ee 0f       	add	r30, r30
 bda:	ff 1f       	adc	r31, r31
 bdc:	ee 0f       	add	r30, r30
 bde:	ff 1f       	adc	r31, r31
 be0:	e8 0f       	add	r30, r24
 be2:	f9 1f       	adc	r31, r25
 be4:	e9 5d       	subi	r30, 0xD9	; 217
 be6:	f8 4f       	sbci	r31, 0xF8	; 248
 be8:	30 81       	ld	r19, Z
 bea:	31 11       	cpse	r19, r1
 bec:	11 c0       	rjmp	.+34     	; 0xc10 <vTaskSwitchContext+0x5a>
 bee:	21 50       	subi	r18, 0x01	; 1
 bf0:	82 2f       	mov	r24, r18
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	fc 01       	movw	r30, r24
 bf6:	ee 0f       	add	r30, r30
 bf8:	ff 1f       	adc	r31, r31
 bfa:	ee 0f       	add	r30, r30
 bfc:	ff 1f       	adc	r31, r31
 bfe:	ee 0f       	add	r30, r30
 c00:	ff 1f       	adc	r31, r31
 c02:	e8 0f       	add	r30, r24
 c04:	f9 1f       	adc	r31, r25
 c06:	e9 5d       	subi	r30, 0xD9	; 217
 c08:	f8 4f       	sbci	r31, 0xF8	; 248
 c0a:	30 81       	ld	r19, Z
 c0c:	33 23       	and	r19, r19
 c0e:	79 f3       	breq	.-34     	; 0xbee <vTaskSwitchContext+0x38>
 c10:	ac 01       	movw	r20, r24
 c12:	44 0f       	add	r20, r20
 c14:	55 1f       	adc	r21, r21
 c16:	44 0f       	add	r20, r20
 c18:	55 1f       	adc	r21, r21
 c1a:	44 0f       	add	r20, r20
 c1c:	55 1f       	adc	r21, r21
 c1e:	48 0f       	add	r20, r24
 c20:	59 1f       	adc	r21, r25
 c22:	da 01       	movw	r26, r20
 c24:	a9 5d       	subi	r26, 0xD9	; 217
 c26:	b8 4f       	sbci	r27, 0xF8	; 248
 c28:	11 96       	adiw	r26, 0x01	; 1
 c2a:	ed 91       	ld	r30, X+
 c2c:	fc 91       	ld	r31, X
 c2e:	12 97       	sbiw	r26, 0x02	; 2
 c30:	02 80       	ldd	r0, Z+2	; 0x02
 c32:	f3 81       	ldd	r31, Z+3	; 0x03
 c34:	e0 2d       	mov	r30, r0
 c36:	12 96       	adiw	r26, 0x02	; 2
 c38:	fc 93       	st	X, r31
 c3a:	ee 93       	st	-X, r30
 c3c:	11 97       	sbiw	r26, 0x01	; 1
 c3e:	46 5d       	subi	r20, 0xD6	; 214
 c40:	58 4f       	sbci	r21, 0xF8	; 248
 c42:	e4 17       	cp	r30, r20
 c44:	f5 07       	cpc	r31, r21
 c46:	29 f4       	brne	.+10     	; 0xc52 <vTaskSwitchContext+0x9c>
 c48:	42 81       	ldd	r20, Z+2	; 0x02
 c4a:	53 81       	ldd	r21, Z+3	; 0x03
 c4c:	fd 01       	movw	r30, r26
 c4e:	52 83       	std	Z+2, r21	; 0x02
 c50:	41 83       	std	Z+1, r20	; 0x01
 c52:	fc 01       	movw	r30, r24
 c54:	ee 0f       	add	r30, r30
 c56:	ff 1f       	adc	r31, r31
 c58:	ee 0f       	add	r30, r30
 c5a:	ff 1f       	adc	r31, r31
 c5c:	ee 0f       	add	r30, r30
 c5e:	ff 1f       	adc	r31, r31
 c60:	8e 0f       	add	r24, r30
 c62:	9f 1f       	adc	r25, r31
 c64:	fc 01       	movw	r30, r24
 c66:	e9 5d       	subi	r30, 0xD9	; 217
 c68:	f8 4f       	sbci	r31, 0xF8	; 248
 c6a:	01 80       	ldd	r0, Z+1	; 0x01
 c6c:	f2 81       	ldd	r31, Z+2	; 0x02
 c6e:	e0 2d       	mov	r30, r0
 c70:	86 81       	ldd	r24, Z+6	; 0x06
 c72:	97 81       	ldd	r25, Z+7	; 0x07
 c74:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxCurrentTCB+0x1>
 c78:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxCurrentTCB>
 c7c:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <uxTopReadyPriority>
 c80:	08 95       	ret

00000c82 <_exit>:
 c82:	f8 94       	cli

00000c84 <__stop_program>:
 c84:	ff cf       	rjmp	.-2      	; 0xc84 <__stop_program>
