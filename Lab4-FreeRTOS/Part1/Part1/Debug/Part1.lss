
Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000c76  00000d0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063e  00800110  00800110  00000d1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028af  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef2  00000000  00000000  00003853  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000189a  00000000  00000000  00004745  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00005fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f4a  00000000  00000000  00006594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef4  00000000  00000000  000074de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  000093d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b7 c2       	rjmp	.+1390   	; 0x5a4 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 34       	cpi	r26, 0x4E	; 78
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4f d0       	rcall	.+158    	; 0x162 <main>
  c4:	d6 c5       	rjmp	.+2988   	; 0xc72 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LEDS_Tick>:
	led_state = INIT;
}

void LEDS_Tick(){
	//Actions
	switch(led_state){
  c8:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	41 f0       	breq	.+16     	; 0xe0 <LEDS_Tick+0x18>
  d0:	28 f0       	brcs	.+10     	; 0xdc <LEDS_Tick+0x14>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	41 f0       	breq	.+16     	; 0xe6 <LEDS_Tick+0x1e>
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	49 f0       	breq	.+18     	; 0xec <LEDS_Tick+0x24>
  da:	0b c0       	rjmp	.+22     	; 0xf2 <LEDS_Tick+0x2a>
		case INIT:
            PORTD = 0;
  dc:	1b b8       	out	0x0b, r1	; 11
            break;
  de:	0a c0       	rjmp	.+20     	; 0xf4 <LEDS_Tick+0x2c>
		case L0:
            PORTD = 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	8b b9       	out	0x0b, r24	; 11
            break;
  e4:	07 c0       	rjmp	.+14     	; 0xf4 <LEDS_Tick+0x2c>
		case L2:
            PORTD = 4;
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	8b b9       	out	0x0b, r24	; 11
            break;
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <LEDS_Tick+0x2c>
		case L4:
            PORTD = 16;
  ec:	80 e1       	ldi	r24, 0x10	; 16
  ee:	8b b9       	out	0x0b, r24	; 11
            break;
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <LEDS_Tick+0x2c>
		default:
            PORTD = 0;
  f2:	1b b8       	out	0x0b, r1	; 11
            break;
	}
	//Transitions
	switch(led_state){
  f4:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	51 f0       	breq	.+20     	; 0x110 <LEDS_Tick+0x48>
  fc:	28 f0       	brcs	.+10     	; 0x108 <LEDS_Tick+0x40>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	59 f0       	breq	.+22     	; 0x118 <LEDS_Tick+0x50>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	69 f0       	breq	.+26     	; 0x120 <LEDS_Tick+0x58>
 106:	10 c0       	rjmp	.+32     	; 0x128 <LEDS_Tick+0x60>
		case INIT:
			led_state = L0;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
            break;
 10e:	08 95       	ret
		case L0:
			led_state = L2;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
            break;
 116:	08 95       	ret
		case L2:
			led_state = L4;
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
            break;
 11e:	08 95       	ret
		case L4:
			led_state = L0;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
            break;
 126:	08 95       	ret
		default:
			led_state = INIT;
 128:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
 12c:	08 95       	ret

0000012e <LedSecTask>:
#include "task.h" 
#include "croutine.h" 
enum LEDState {INIT,L0,L2,L4} led_state;

void LEDS_Init(){
	led_state = INIT;
 12e:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
}

void LedSecTask() {
    LEDS_Init();
    for(;;) { 	
        LEDS_Tick();
 132:	ca df       	rcall	.-108    	; 0xc8 <LEDS_Tick>
        vTaskDelay(1000); 
 134:	88 ee       	ldi	r24, 0xE8	; 232
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	26 d5       	rcall	.+2636   	; 0xb86 <vTaskDelay>
 13a:	fb cf       	rjmp	.-10     	; 0x132 <LedSecTask+0x4>

0000013c <StartSecPulse>:
    } 
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
    xTaskCreate(LedSecTask, 
 142:	e1 2c       	mov	r14, r1
 144:	f1 2c       	mov	r15, r1
 146:	08 2f       	mov	r16, r24
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	45 e5       	ldi	r20, 0x55	; 85
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	71 e0       	ldi	r23, 0x01	; 1
 154:	87 e9       	ldi	r24, 0x97	; 151
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	bb d2       	rcall	.+1398   	; 0x6d0 <xTaskCreate>
            (signed portCHAR *)"LedSecTask", 
            configMINIMAL_STACK_SIZE, 
            NULL, 
            Priority, 
            NULL );
}	
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	08 95       	ret

00000162 <main>:
 
int main(void) { 
    DDRA = 0x00; PORTA=0xFF;
 162:	11 b8       	out	0x01, r1	; 1
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	82 b9       	out	0x02, r24	; 2
    DDRD = 0xFF;
 168:	8a b9       	out	0x0a, r24	; 10
    //Start Tasks  
    StartSecPulse(1);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	e7 df       	rcall	.-50     	; 0x13c <StartSecPulse>
    //RunSchedular 
    vTaskStartScheduler(); 
 16e:	ad d3       	rcall	.+1882   	; 0x8ca <vTaskStartScheduler>
 170:	80 e0       	ldi	r24, 0x00	; 0
    return 0; 
}
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	08 95       	ret

00000176 <pvPortMalloc>:
 176:	cf 93       	push	r28
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
 17c:	ce d3       	rcall	.+1948   	; 0x91a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 17e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 182:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 186:	89 2b       	or	r24, r25
 188:	31 f4       	brne	.+12     	; 0x196 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 18a:	85 e1       	ldi	r24, 0x15	; 21
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 192:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 196:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <xNextFreeByte>
 19a:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <xNextFreeByte+0x1>
 19e:	c9 01       	movw	r24, r18
 1a0:	8c 0f       	add	r24, r28
 1a2:	9d 1f       	adc	r25, r29
 1a4:	8b 3d       	cpi	r24, 0xDB	; 219
 1a6:	45 e0       	ldi	r20, 0x05	; 5
 1a8:	94 07       	cpc	r25, r20
 1aa:	70 f4       	brcc	.+28     	; 0x1c8 <pvPortMalloc+0x52>
 1ac:	28 17       	cp	r18, r24
 1ae:	39 07       	cpc	r19, r25
 1b0:	70 f4       	brcc	.+28     	; 0x1ce <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 1b2:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <__data_end>
 1b6:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <__data_end+0x1>
 1ba:	c2 0f       	add	r28, r18
 1bc:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 1be:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextFreeByte+0x1>
 1c2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextFreeByte>
 1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <pvPortMalloc+0x5c>
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
 1d2:	60 d4       	rcall	.+2240   	; 0xa94 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 1d4:	ce 01       	movw	r24, r28
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 1dc:	08 95       	ret

000001de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 1de:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1e0:	03 96       	adiw	r24, 0x03	; 3
 1e2:	92 83       	std	Z+2, r25	; 0x02
 1e4:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	3f ef       	ldi	r19, 0xFF	; 255
 1ea:	34 83       	std	Z+4, r19	; 0x04
 1ec:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1ee:	96 83       	std	Z+6, r25	; 0x06
 1f0:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1f2:	90 87       	std	Z+8, r25	; 0x08
 1f4:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 1f6:	10 82       	st	Z, r1
 1f8:	08 95       	ret

000001fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 1fa:	fc 01       	movw	r30, r24
 1fc:	11 86       	std	Z+9, r1	; 0x09
 1fe:	10 86       	std	Z+8, r1	; 0x08
 200:	08 95       	ret

00000202 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	9c 01       	movw	r18, r24
 208:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 20a:	dc 01       	movw	r26, r24
 20c:	11 96       	adiw	r26, 0x01	; 1
 20e:	cd 91       	ld	r28, X+
 210:	dc 91       	ld	r29, X
 212:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 214:	d3 83       	std	Z+3, r29	; 0x03
 216:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 218:	8c 81       	ldd	r24, Y+4	; 0x04
 21a:	9d 81       	ldd	r25, Y+5	; 0x05
 21c:	95 83       	std	Z+5, r25	; 0x05
 21e:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 220:	8c 81       	ldd	r24, Y+4	; 0x04
 222:	9d 81       	ldd	r25, Y+5	; 0x05
 224:	dc 01       	movw	r26, r24
 226:	13 96       	adiw	r26, 0x03	; 3
 228:	7c 93       	st	X, r23
 22a:	6e 93       	st	-X, r22
 22c:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 22e:	7d 83       	std	Y+5, r23	; 0x05
 230:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 232:	31 87       	std	Z+9, r19	; 0x09
 234:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 236:	f9 01       	movw	r30, r18
 238:	80 81       	ld	r24, Z
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	80 83       	st	Z, r24
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 24a:	48 81       	ld	r20, Y
 24c:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 24e:	4f 3f       	cpi	r20, 0xFF	; 255
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	52 07       	cpc	r21, r18
 254:	21 f4       	brne	.+8      	; 0x25e <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 256:	fc 01       	movw	r30, r24
 258:	a7 81       	ldd	r26, Z+7	; 0x07
 25a:	b0 85       	ldd	r27, Z+8	; 0x08
 25c:	0d c0       	rjmp	.+26     	; 0x278 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 25e:	dc 01       	movw	r26, r24
 260:	13 96       	adiw	r26, 0x03	; 3
 262:	01 c0       	rjmp	.+2      	; 0x266 <vListInsert+0x22>
 264:	df 01       	movw	r26, r30
 266:	12 96       	adiw	r26, 0x02	; 2
 268:	ed 91       	ld	r30, X+
 26a:	fc 91       	ld	r31, X
 26c:	13 97       	sbiw	r26, 0x03	; 3
 26e:	20 81       	ld	r18, Z
 270:	31 81       	ldd	r19, Z+1	; 0x01
 272:	42 17       	cp	r20, r18
 274:	53 07       	cpc	r21, r19
 276:	b0 f7       	brcc	.-20     	; 0x264 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 278:	12 96       	adiw	r26, 0x02	; 2
 27a:	ed 91       	ld	r30, X+
 27c:	fc 91       	ld	r31, X
 27e:	13 97       	sbiw	r26, 0x03	; 3
 280:	fb 83       	std	Y+3, r31	; 0x03
 282:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 284:	d5 83       	std	Z+5, r29	; 0x05
 286:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 288:	bd 83       	std	Y+5, r27	; 0x05
 28a:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 28c:	13 96       	adiw	r26, 0x03	; 3
 28e:	dc 93       	st	X, r29
 290:	ce 93       	st	-X, r28
 292:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 294:	99 87       	std	Y+9, r25	; 0x09
 296:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 298:	fc 01       	movw	r30, r24
 29a:	20 81       	ld	r18, Z
 29c:	2f 5f       	subi	r18, 0xFF	; 255
 29e:	20 83       	st	Z, r18
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 2ac:	a0 85       	ldd	r26, Z+8	; 0x08
 2ae:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 2b0:	c2 81       	ldd	r28, Z+2	; 0x02
 2b2:	d3 81       	ldd	r29, Z+3	; 0x03
 2b4:	84 81       	ldd	r24, Z+4	; 0x04
 2b6:	95 81       	ldd	r25, Z+5	; 0x05
 2b8:	9d 83       	std	Y+5, r25	; 0x05
 2ba:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 2bc:	c4 81       	ldd	r28, Z+4	; 0x04
 2be:	d5 81       	ldd	r29, Z+5	; 0x05
 2c0:	82 81       	ldd	r24, Z+2	; 0x02
 2c2:	93 81       	ldd	r25, Z+3	; 0x03
 2c4:	9b 83       	std	Y+3, r25	; 0x03
 2c6:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 2c8:	11 96       	adiw	r26, 0x01	; 1
 2ca:	8d 91       	ld	r24, X+
 2cc:	9c 91       	ld	r25, X
 2ce:	12 97       	sbiw	r26, 0x02	; 2
 2d0:	e8 17       	cp	r30, r24
 2d2:	f9 07       	cpc	r31, r25
 2d4:	31 f4       	brne	.+12     	; 0x2e2 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 2d6:	84 81       	ldd	r24, Z+4	; 0x04
 2d8:	95 81       	ldd	r25, Z+5	; 0x05
 2da:	12 96       	adiw	r26, 0x02	; 2
 2dc:	9c 93       	st	X, r25
 2de:	8e 93       	st	-X, r24
 2e0:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 2e2:	11 86       	std	Z+9, r1	; 0x09
 2e4:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 2e6:	8c 91       	ld	r24, X
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 2ec:	8c 91       	ld	r24, X
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2f4:	31 e1       	ldi	r19, 0x11	; 17
 2f6:	fc 01       	movw	r30, r24
 2f8:	30 83       	st	Z, r19
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	22 e2       	ldi	r18, 0x22	; 34
 2fe:	20 83       	st	Z, r18
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	a3 e3       	ldi	r26, 0x33	; 51
 304:	a0 83       	st	Z, r26
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	60 83       	st	Z, r22
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	70 83       	st	Z, r23
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	10 82       	st	Z, r1
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	60 e8       	ldi	r22, 0x80	; 128
 316:	60 83       	st	Z, r22
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	10 82       	st	Z, r1
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	62 e0       	ldi	r22, 0x02	; 2
 320:	60 83       	st	Z, r22
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	63 e0       	ldi	r22, 0x03	; 3
 326:	60 83       	st	Z, r22
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	64 e0       	ldi	r22, 0x04	; 4
 32c:	60 83       	st	Z, r22
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	65 e0       	ldi	r22, 0x05	; 5
 332:	60 83       	st	Z, r22
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	66 e0       	ldi	r22, 0x06	; 6
 338:	60 83       	st	Z, r22
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	67 e0       	ldi	r22, 0x07	; 7
 33e:	60 83       	st	Z, r22
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	68 e0       	ldi	r22, 0x08	; 8
 344:	60 83       	st	Z, r22
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	69 e0       	ldi	r22, 0x09	; 9
 34a:	60 83       	st	Z, r22
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	60 e1       	ldi	r22, 0x10	; 16
 350:	60 83       	st	Z, r22
 352:	31 97       	sbiw	r30, 0x01	; 1
 354:	30 83       	st	Z, r19
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	32 e1       	ldi	r19, 0x12	; 18
 35a:	30 83       	st	Z, r19
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	33 e1       	ldi	r19, 0x13	; 19
 360:	30 83       	st	Z, r19
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	34 e1       	ldi	r19, 0x14	; 20
 366:	30 83       	st	Z, r19
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	35 e1       	ldi	r19, 0x15	; 21
 36c:	30 83       	st	Z, r19
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	36 e1       	ldi	r19, 0x16	; 22
 372:	30 83       	st	Z, r19
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	37 e1       	ldi	r19, 0x17	; 23
 378:	30 83       	st	Z, r19
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	38 e1       	ldi	r19, 0x18	; 24
 37e:	30 83       	st	Z, r19
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	39 e1       	ldi	r19, 0x19	; 25
 384:	30 83       	st	Z, r19
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	30 e2       	ldi	r19, 0x20	; 32
 38a:	30 83       	st	Z, r19
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	31 e2       	ldi	r19, 0x21	; 33
 390:	30 83       	st	Z, r19
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	20 83       	st	Z, r18
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	23 e2       	ldi	r18, 0x23	; 35
 39a:	20 83       	st	Z, r18
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	40 83       	st	Z, r20
 3a0:	31 97       	sbiw	r30, 0x01	; 1
 3a2:	50 83       	st	Z, r21
 3a4:	31 97       	sbiw	r30, 0x01	; 1
 3a6:	26 e2       	ldi	r18, 0x26	; 38
 3a8:	20 83       	st	Z, r18
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	27 e2       	ldi	r18, 0x27	; 39
 3ae:	20 83       	st	Z, r18
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	28 e2       	ldi	r18, 0x28	; 40
 3b4:	20 83       	st	Z, r18
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	29 e2       	ldi	r18, 0x29	; 41
 3ba:	20 83       	st	Z, r18
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	20 e3       	ldi	r18, 0x30	; 48
 3c0:	20 83       	st	Z, r18
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	21 e3       	ldi	r18, 0x31	; 49
 3c6:	20 83       	st	Z, r18
 3c8:	86 97       	sbiw	r24, 0x26	; 38
 3ca:	08 95       	ret

000003cc <xPortStartScheduler>:
 3cc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3d0:	8c e7       	ldi	r24, 0x7C	; 124
 3d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3d6:	8b e0       	ldi	r24, 0x0B	; 11
 3d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3dc:	ef e6       	ldi	r30, 0x6F	; 111
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	80 83       	st	Z, r24
 3e6:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 3ea:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 3ee:	cd 91       	ld	r28, X+
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	dd 91       	ld	r29, X+
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	bf 91       	pop	r27
 400:	af 91       	pop	r26
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	7f 91       	pop	r23
 408:	6f 91       	pop	r22
 40a:	5f 91       	pop	r21
 40c:	4f 91       	pop	r20
 40e:	3f 91       	pop	r19
 410:	2f 91       	pop	r18
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	df 90       	pop	r13
 41c:	cf 90       	pop	r12
 41e:	bf 90       	pop	r11
 420:	af 90       	pop	r10
 422:	9f 90       	pop	r9
 424:	8f 90       	pop	r8
 426:	7f 90       	pop	r7
 428:	6f 90       	pop	r6
 42a:	5f 90       	pop	r5
 42c:	4f 90       	pop	r4
 42e:	3f 90       	pop	r3
 430:	2f 90       	pop	r2
 432:	1f 90       	pop	r1
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	08 95       	ret
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	08 95       	ret

00000440 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	0f 92       	push	r0
 448:	1f 92       	push	r1
 44a:	11 24       	eor	r1, r1
 44c:	2f 92       	push	r2
 44e:	3f 92       	push	r3
 450:	4f 92       	push	r4
 452:	5f 92       	push	r5
 454:	6f 92       	push	r6
 456:	7f 92       	push	r7
 458:	8f 92       	push	r8
 45a:	9f 92       	push	r9
 45c:	af 92       	push	r10
 45e:	bf 92       	push	r11
 460:	cf 92       	push	r12
 462:	df 92       	push	r13
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
 488:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 48c:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 490:	0d b6       	in	r0, 0x3d	; 61
 492:	0d 92       	st	X+, r0
 494:	0e b6       	in	r0, 0x3e	; 62
 496:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 498:	86 d3       	rcall	.+1804   	; 0xba6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 49a:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 49e:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 4a2:	cd 91       	ld	r28, X+
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	dd 91       	ld	r29, X+
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	bf 91       	pop	r27
 4b4:	af 91       	pop	r26
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	7f 91       	pop	r23
 4bc:	6f 91       	pop	r22
 4be:	5f 91       	pop	r21
 4c0:	4f 91       	pop	r20
 4c2:	3f 91       	pop	r19
 4c4:	2f 91       	pop	r18
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	df 90       	pop	r13
 4d0:	cf 90       	pop	r12
 4d2:	bf 90       	pop	r11
 4d4:	af 90       	pop	r10
 4d6:	9f 90       	pop	r9
 4d8:	8f 90       	pop	r8
 4da:	7f 90       	pop	r7
 4dc:	6f 90       	pop	r6
 4de:	5f 90       	pop	r5
 4e0:	4f 90       	pop	r4
 4e2:	3f 90       	pop	r3
 4e4:	2f 90       	pop	r2
 4e6:	1f 90       	pop	r1
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4ee:	08 95       	ret

000004f0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4f0:	0f 92       	push	r0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	0f 92       	push	r0
 4f8:	1f 92       	push	r1
 4fa:	11 24       	eor	r1, r1
 4fc:	2f 92       	push	r2
 4fe:	3f 92       	push	r3
 500:	4f 92       	push	r4
 502:	5f 92       	push	r5
 504:	6f 92       	push	r6
 506:	7f 92       	push	r7
 508:	8f 92       	push	r8
 50a:	9f 92       	push	r9
 50c:	af 92       	push	r10
 50e:	bf 92       	push	r11
 510:	cf 92       	push	r12
 512:	df 92       	push	r13
 514:	ef 92       	push	r14
 516:	ff 92       	push	r15
 518:	0f 93       	push	r16
 51a:	1f 93       	push	r17
 51c:	2f 93       	push	r18
 51e:	3f 93       	push	r19
 520:	4f 93       	push	r20
 522:	5f 93       	push	r21
 524:	6f 93       	push	r22
 526:	7f 93       	push	r23
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	af 93       	push	r26
 52e:	bf 93       	push	r27
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	ef 93       	push	r30
 536:	ff 93       	push	r31
 538:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 53c:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 540:	0d b6       	in	r0, 0x3d	; 61
 542:	0d 92       	st	X+, r0
 544:	0e b6       	in	r0, 0x3e	; 62
 546:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 548:	ee d1       	rcall	.+988    	; 0x926 <xTaskIncrementTick>
 54a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 54c:	2c d3       	rcall	.+1624   	; 0xba6 <vTaskSwitchContext>
 54e:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 552:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 556:	cd 91       	ld	r28, X+
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	dd 91       	ld	r29, X+
 55c:	de bf       	out	0x3e, r29	; 62
 55e:	ff 91       	pop	r31
 560:	ef 91       	pop	r30
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	bf 91       	pop	r27
 568:	af 91       	pop	r26
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	7f 91       	pop	r23
 570:	6f 91       	pop	r22
 572:	5f 91       	pop	r21
 574:	4f 91       	pop	r20
 576:	3f 91       	pop	r19
 578:	2f 91       	pop	r18
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	df 90       	pop	r13
 584:	cf 90       	pop	r12
 586:	bf 90       	pop	r11
 588:	af 90       	pop	r10
 58a:	9f 90       	pop	r9
 58c:	8f 90       	pop	r8
 58e:	7f 90       	pop	r7
 590:	6f 90       	pop	r6
 592:	5f 90       	pop	r5
 594:	4f 90       	pop	r4
 596:	3f 90       	pop	r3
 598:	2f 90       	pop	r2
 59a:	1f 90       	pop	r1
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	08 95       	ret

000005a4 <__vector_13>:

	asm volatile ( "ret" );
 5a4:	a5 df       	rcall	.-182    	; 0x4f0 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 5a6:	18 95       	reti

000005a8 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 5a8:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 5ac:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 5b0:	80 81       	ld	r24, Z
 5b2:	81 11       	cpse	r24, r1
 5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <prvResetNextTaskUnblockTime+0x1c>
 5b6:	8f ef       	ldi	r24, 0xFF	; 255
 5b8:	9f ef       	ldi	r25, 0xFF	; 255
 5ba:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5be:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5c2:	08 95       	ret
 5c4:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 5c8:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 5cc:	05 80       	ldd	r0, Z+5	; 0x05
 5ce:	f6 81       	ldd	r31, Z+6	; 0x06
 5d0:	e0 2d       	mov	r30, r0
 5d2:	06 80       	ldd	r0, Z+6	; 0x06
 5d4:	f7 81       	ldd	r31, Z+7	; 0x07
 5d6:	e0 2d       	mov	r30, r0
 5d8:	82 81       	ldd	r24, Z+2	; 0x02
 5da:	93 81       	ldd	r25, Z+3	; 0x03
 5dc:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5e0:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5e4:	08 95       	ret

000005e6 <prvIdleTask>:
 5e6:	0f ef       	ldi	r16, 0xFF	; 255
 5e8:	16 e0       	ldi	r17, 0x06	; 6
 5ea:	0f 2e       	mov	r0, r31
 5ec:	f7 e2       	ldi	r31, 0x27	; 39
 5ee:	ef 2e       	mov	r14, r31
 5f0:	f7 e0       	ldi	r31, 0x07	; 7
 5f2:	ff 2e       	mov	r15, r31
 5f4:	f0 2d       	mov	r31, r0
 5f6:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 5fa:	88 23       	and	r24, r24
 5fc:	11 f1       	breq	.+68     	; 0x642 <prvIdleTask+0x5c>
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	f8 94       	cli
 602:	0f 92       	push	r0
 604:	d8 01       	movw	r26, r16
 606:	15 96       	adiw	r26, 0x05	; 5
 608:	ed 91       	ld	r30, X+
 60a:	fc 91       	ld	r31, X
 60c:	16 97       	sbiw	r26, 0x06	; 6
 60e:	c6 81       	ldd	r28, Z+6	; 0x06
 610:	d7 81       	ldd	r29, Z+7	; 0x07
 612:	ce 01       	movw	r24, r28
 614:	02 96       	adiw	r24, 0x02	; 2
 616:	47 de       	rcall	.-882    	; 0x2a6 <uxListRemove>
 618:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 61c:	81 50       	subi	r24, 0x01	; 1
 61e:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 622:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 626:	81 50       	subi	r24, 0x01	; 1
 628:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 62c:	0f 90       	pop	r0
 62e:	0f be       	out	0x3f, r0	; 63
 630:	8f 89       	ldd	r24, Y+23	; 0x17
 632:	98 8d       	ldd	r25, Y+24	; 0x18
 634:	d3 dd       	rcall	.-1114   	; 0x1dc <vPortFree>
 636:	ce 01       	movw	r24, r28
 638:	d1 dd       	rcall	.-1118   	; 0x1dc <vPortFree>
 63a:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 63e:	81 11       	cpse	r24, r1
 640:	de cf       	rjmp	.-68     	; 0x5fe <prvIdleTask+0x18>
 642:	f7 01       	movw	r30, r14
 644:	80 81       	ld	r24, Z
 646:	82 30       	cpi	r24, 0x02	; 2
 648:	b0 f2       	brcs	.-84     	; 0x5f6 <prvIdleTask+0x10>
 64a:	fa de       	rcall	.-524    	; 0x440 <vPortYield>
 64c:	d4 cf       	rjmp	.-88     	; 0x5f6 <prvIdleTask+0x10>

0000064e <prvAddCurrentTaskToDelayedList>:
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	ec 01       	movw	r28, r24
 658:	00 91 fb 06 	lds	r16, 0x06FB	; 0x8006fb <xTickCount>
 65c:	10 91 fc 06 	lds	r17, 0x06FC	; 0x8006fc <xTickCount+0x1>
 660:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 664:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 668:	02 96       	adiw	r24, 0x02	; 2
 66a:	1d de       	rcall	.-966    	; 0x2a6 <uxListRemove>
 66c:	c0 0f       	add	r28, r16
 66e:	d1 1f       	adc	r29, r17
 670:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 674:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 678:	d3 83       	std	Z+3, r29	; 0x03
 67a:	c2 83       	std	Z+2, r28	; 0x02
 67c:	c0 17       	cp	r28, r16
 67e:	d1 07       	cpc	r29, r17
 680:	60 f4       	brcc	.+24     	; 0x69a <prvAddCurrentTaskToDelayedList+0x4c>
 682:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 686:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 68a:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 68e:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 692:	6e 5f       	subi	r22, 0xFE	; 254
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	d6 dd       	rcall	.-1108   	; 0x244 <vListInsert>
 698:	16 c0       	rjmp	.+44     	; 0x6c6 <prvAddCurrentTaskToDelayedList+0x78>
 69a:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 69e:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 6a2:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 6a6:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 6aa:	6e 5f       	subi	r22, 0xFE	; 254
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	ca dd       	rcall	.-1132   	; 0x244 <vListInsert>
 6b0:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 6b4:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 6b8:	c8 17       	cp	r28, r24
 6ba:	d9 07       	cpc	r29, r25
 6bc:	20 f4       	brcc	.+8      	; 0x6c6 <prvAddCurrentTaskToDelayedList+0x78>
 6be:	d0 93 f4 06 	sts	0x06F4, r29	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 6c2:	c0 93 f3 06 	sts	0x06F3, r28	; 0x8006f3 <xNextTaskUnblockTime>
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	08 95       	ret

000006d0 <xTaskCreate>:
 6d0:	4f 92       	push	r4
 6d2:	5f 92       	push	r5
 6d4:	6f 92       	push	r6
 6d6:	7f 92       	push	r7
 6d8:	8f 92       	push	r8
 6da:	9f 92       	push	r9
 6dc:	af 92       	push	r10
 6de:	bf 92       	push	r11
 6e0:	cf 92       	push	r12
 6e2:	df 92       	push	r13
 6e4:	ef 92       	push	r14
 6e6:	ff 92       	push	r15
 6e8:	0f 93       	push	r16
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	4c 01       	movw	r8, r24
 6f0:	6b 01       	movw	r12, r22
 6f2:	5a 01       	movw	r10, r20
 6f4:	29 01       	movw	r4, r18
 6f6:	ca 01       	movw	r24, r20
 6f8:	3e dd       	rcall	.-1412   	; 0x176 <pvPortMalloc>
 6fa:	3c 01       	movw	r6, r24
 6fc:	89 2b       	or	r24, r25
 6fe:	09 f4       	brne	.+2      	; 0x702 <xTaskCreate+0x32>
 700:	d3 c0       	rjmp	.+422    	; 0x8a8 <xTaskCreate+0x1d8>
 702:	86 e2       	ldi	r24, 0x26	; 38
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	37 dd       	rcall	.-1426   	; 0x176 <pvPortMalloc>
 708:	ec 01       	movw	r28, r24
 70a:	89 2b       	or	r24, r25
 70c:	59 f0       	breq	.+22     	; 0x724 <xTaskCreate+0x54>
 70e:	78 8e       	std	Y+24, r7	; 0x18
 710:	6f 8a       	std	Y+23, r6	; 0x17
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	a8 1a       	sub	r10, r24
 716:	b1 08       	sbc	r11, r1
 718:	a6 0c       	add	r10, r6
 71a:	b7 1c       	adc	r11, r7
 71c:	c1 14       	cp	r12, r1
 71e:	d1 04       	cpc	r13, r1
 720:	21 f4       	brne	.+8      	; 0x72a <xTaskCreate+0x5a>
 722:	1f c0       	rjmp	.+62     	; 0x762 <xTaskCreate+0x92>
 724:	c3 01       	movw	r24, r6
 726:	5a dd       	rcall	.-1356   	; 0x1dc <vPortFree>
 728:	bf c0       	rjmp	.+382    	; 0x8a8 <xTaskCreate+0x1d8>
 72a:	d6 01       	movw	r26, r12
 72c:	8c 91       	ld	r24, X
 72e:	89 8f       	std	Y+25, r24	; 0x19
 730:	8c 91       	ld	r24, X
 732:	88 23       	and	r24, r24
 734:	a1 f0       	breq	.+40     	; 0x75e <xTaskCreate+0x8e>
 736:	ae 01       	movw	r20, r28
 738:	46 5e       	subi	r20, 0xE6	; 230
 73a:	5f 4f       	sbci	r21, 0xFF	; 255
 73c:	f6 01       	movw	r30, r12
 73e:	31 96       	adiw	r30, 0x01	; 1
 740:	b8 e0       	ldi	r27, 0x08	; 8
 742:	cb 0e       	add	r12, r27
 744:	d1 1c       	adc	r13, r1
 746:	cf 01       	movw	r24, r30
 748:	21 91       	ld	r18, Z+
 74a:	da 01       	movw	r26, r20
 74c:	2d 93       	st	X+, r18
 74e:	ad 01       	movw	r20, r26
 750:	dc 01       	movw	r26, r24
 752:	8c 91       	ld	r24, X
 754:	88 23       	and	r24, r24
 756:	19 f0       	breq	.+6      	; 0x75e <xTaskCreate+0x8e>
 758:	ec 15       	cp	r30, r12
 75a:	fd 05       	cpc	r31, r13
 75c:	a1 f7       	brne	.-24     	; 0x746 <xTaskCreate+0x76>
 75e:	18 a2       	std	Y+32, r1	; 0x20
 760:	01 c0       	rjmp	.+2      	; 0x764 <xTaskCreate+0x94>
 762:	19 8e       	std	Y+25, r1	; 0x19
 764:	04 30       	cpi	r16, 0x04	; 4
 766:	08 f0       	brcs	.+2      	; 0x76a <xTaskCreate+0x9a>
 768:	03 e0       	ldi	r16, 0x03	; 3
 76a:	0e 8b       	std	Y+22, r16	; 0x16
 76c:	6e 01       	movw	r12, r28
 76e:	b2 e0       	ldi	r27, 0x02	; 2
 770:	cb 0e       	add	r12, r27
 772:	d1 1c       	adc	r13, r1
 774:	c6 01       	movw	r24, r12
 776:	41 dd       	rcall	.-1406   	; 0x1fa <vListInitialiseItem>
 778:	ce 01       	movw	r24, r28
 77a:	0c 96       	adiw	r24, 0x0c	; 12
 77c:	3e dd       	rcall	.-1412   	; 0x1fa <vListInitialiseItem>
 77e:	d9 87       	std	Y+9, r29	; 0x09
 780:	c8 87       	std	Y+8, r28	; 0x08
 782:	84 e0       	ldi	r24, 0x04	; 4
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	80 1b       	sub	r24, r16
 788:	91 09       	sbc	r25, r1
 78a:	9d 87       	std	Y+13, r25	; 0x0d
 78c:	8c 87       	std	Y+12, r24	; 0x0c
 78e:	db 8b       	std	Y+19, r29	; 0x13
 790:	ca 8b       	std	Y+18, r28	; 0x12
 792:	19 a2       	std	Y+33, r1	; 0x21
 794:	1a a2       	std	Y+34, r1	; 0x22
 796:	1b a2       	std	Y+35, r1	; 0x23
 798:	1c a2       	std	Y+36, r1	; 0x24
 79a:	1d a2       	std	Y+37, r1	; 0x25
 79c:	a2 01       	movw	r20, r4
 79e:	b4 01       	movw	r22, r8
 7a0:	c5 01       	movw	r24, r10
 7a2:	a8 dd       	rcall	.-1200   	; 0x2f4 <pxPortInitialiseStack>
 7a4:	99 83       	std	Y+1, r25	; 0x01
 7a6:	88 83       	st	Y, r24
 7a8:	e1 14       	cp	r14, r1
 7aa:	f1 04       	cpc	r15, r1
 7ac:	19 f0       	breq	.+6      	; 0x7b4 <xTaskCreate+0xe4>
 7ae:	f7 01       	movw	r30, r14
 7b0:	d1 83       	std	Z+1, r29	; 0x01
 7b2:	c0 83       	st	Z, r28
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	f8 94       	cli
 7b8:	0f 92       	push	r0
 7ba:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7be:	8f 5f       	subi	r24, 0xFF	; 255
 7c0:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 7c4:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 7c8:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 7cc:	89 2b       	or	r24, r25
 7ce:	69 f5       	brne	.+90     	; 0x82a <xTaskCreate+0x15a>
 7d0:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 7d4:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 7d8:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	a9 f5       	brne	.+106    	; 0x84a <xTaskCreate+0x17a>
 7e0:	87 e2       	ldi	r24, 0x27	; 39
 7e2:	97 e0       	ldi	r25, 0x07	; 7
 7e4:	fc dc       	rcall	.-1544   	; 0x1de <vListInitialise>
 7e6:	80 e3       	ldi	r24, 0x30	; 48
 7e8:	97 e0       	ldi	r25, 0x07	; 7
 7ea:	f9 dc       	rcall	.-1550   	; 0x1de <vListInitialise>
 7ec:	89 e3       	ldi	r24, 0x39	; 57
 7ee:	97 e0       	ldi	r25, 0x07	; 7
 7f0:	f6 dc       	rcall	.-1556   	; 0x1de <vListInitialise>
 7f2:	82 e4       	ldi	r24, 0x42	; 66
 7f4:	97 e0       	ldi	r25, 0x07	; 7
 7f6:	f3 dc       	rcall	.-1562   	; 0x1de <vListInitialise>
 7f8:	8e e1       	ldi	r24, 0x1E	; 30
 7fa:	97 e0       	ldi	r25, 0x07	; 7
 7fc:	f0 dc       	rcall	.-1568   	; 0x1de <vListInitialise>
 7fe:	85 e1       	ldi	r24, 0x15	; 21
 800:	97 e0       	ldi	r25, 0x07	; 7
 802:	ed dc       	rcall	.-1574   	; 0x1de <vListInitialise>
 804:	88 e0       	ldi	r24, 0x08	; 8
 806:	97 e0       	ldi	r25, 0x07	; 7
 808:	ea dc       	rcall	.-1580   	; 0x1de <vListInitialise>
 80a:	8f ef       	ldi	r24, 0xFF	; 255
 80c:	96 e0       	ldi	r25, 0x06	; 6
 80e:	e7 dc       	rcall	.-1586   	; 0x1de <vListInitialise>
 810:	8e e1       	ldi	r24, 0x1E	; 30
 812:	97 e0       	ldi	r25, 0x07	; 7
 814:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
 818:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
 81c:	85 e1       	ldi	r24, 0x15	; 21
 81e:	97 e0       	ldi	r25, 0x07	; 7
 820:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 824:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 828:	10 c0       	rjmp	.+32     	; 0x84a <xTaskCreate+0x17a>
 82a:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 82e:	81 11       	cpse	r24, r1
 830:	0c c0       	rjmp	.+24     	; 0x84a <xTaskCreate+0x17a>
 832:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 836:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 83a:	96 89       	ldd	r25, Z+22	; 0x16
 83c:	8e 89       	ldd	r24, Y+22	; 0x16
 83e:	89 17       	cp	r24, r25
 840:	20 f0       	brcs	.+8      	; 0x84a <xTaskCreate+0x17a>
 842:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 846:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 84a:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxTaskNumber>
 84e:	8f 5f       	subi	r24, 0xFF	; 255
 850:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTaskNumber>
 854:	8e 89       	ldd	r24, Y+22	; 0x16
 856:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 85a:	98 17       	cp	r25, r24
 85c:	10 f4       	brcc	.+4      	; 0x862 <xTaskCreate+0x192>
 85e:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	9c 01       	movw	r18, r24
 866:	22 0f       	add	r18, r18
 868:	33 1f       	adc	r19, r19
 86a:	22 0f       	add	r18, r18
 86c:	33 1f       	adc	r19, r19
 86e:	22 0f       	add	r18, r18
 870:	33 1f       	adc	r19, r19
 872:	82 0f       	add	r24, r18
 874:	93 1f       	adc	r25, r19
 876:	b6 01       	movw	r22, r12
 878:	89 5d       	subi	r24, 0xD9	; 217
 87a:	98 4f       	sbci	r25, 0xF8	; 248
 87c:	c2 dc       	rcall	.-1660   	; 0x202 <vListInsertEnd>
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 886:	88 23       	and	r24, r24
 888:	59 f0       	breq	.+22     	; 0x8a0 <xTaskCreate+0x1d0>
 88a:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 88e:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 892:	96 89       	ldd	r25, Z+22	; 0x16
 894:	8e 89       	ldd	r24, Y+22	; 0x16
 896:	98 17       	cp	r25, r24
 898:	28 f4       	brcc	.+10     	; 0x8a4 <xTaskCreate+0x1d4>
 89a:	d2 dd       	rcall	.-1116   	; 0x440 <vPortYield>
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <xTaskCreate+0x1da>
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <xTaskCreate+0x1da>
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <xTaskCreate+0x1da>
 8a8:	8f ef       	ldi	r24, 0xFF	; 255
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	0f 91       	pop	r16
 8b0:	ff 90       	pop	r15
 8b2:	ef 90       	pop	r14
 8b4:	df 90       	pop	r13
 8b6:	cf 90       	pop	r12
 8b8:	bf 90       	pop	r11
 8ba:	af 90       	pop	r10
 8bc:	9f 90       	pop	r9
 8be:	8f 90       	pop	r8
 8c0:	7f 90       	pop	r7
 8c2:	6f 90       	pop	r6
 8c4:	5f 90       	pop	r5
 8c6:	4f 90       	pop	r4
 8c8:	08 95       	ret

000008ca <vTaskStartScheduler>:
 8ca:	ef 92       	push	r14
 8cc:	ff 92       	push	r15
 8ce:	0f 93       	push	r16
 8d0:	0f 2e       	mov	r0, r31
 8d2:	f1 ef       	ldi	r31, 0xF1	; 241
 8d4:	ef 2e       	mov	r14, r31
 8d6:	f6 e0       	ldi	r31, 0x06	; 6
 8d8:	ff 2e       	mov	r15, r31
 8da:	f0 2d       	mov	r31, r0
 8dc:	00 e0       	ldi	r16, 0x00	; 0
 8de:	20 e0       	ldi	r18, 0x00	; 0
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	45 e5       	ldi	r20, 0x55	; 85
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	6b e0       	ldi	r22, 0x0B	; 11
 8e8:	71 e0       	ldi	r23, 0x01	; 1
 8ea:	83 ef       	ldi	r24, 0xF3	; 243
 8ec:	92 e0       	ldi	r25, 0x02	; 2
 8ee:	f0 de       	rcall	.-544    	; 0x6d0 <xTaskCreate>
 8f0:	81 30       	cpi	r24, 0x01	; 1
 8f2:	79 f4       	brne	.+30     	; 0x912 <vTaskStartScheduler+0x48>
 8f4:	f8 94       	cli
 8f6:	8f ef       	ldi	r24, 0xFF	; 255
 8f8:	9f ef       	ldi	r25, 0xFF	; 255
 8fa:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 8fe:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <xSchedulerRunning>
 908:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xTickCount+0x1>
 90c:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount>
 910:	5d dd       	rcall	.-1350   	; 0x3cc <xPortStartScheduler>
 912:	0f 91       	pop	r16
 914:	ff 90       	pop	r15
 916:	ef 90       	pop	r14
 918:	08 95       	ret

0000091a <vTaskSuspendAll>:
 91a:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 91e:	8f 5f       	subi	r24, 0xFF	; 255
 920:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 924:	08 95       	ret

00000926 <xTaskIncrementTick>:
 926:	cf 92       	push	r12
 928:	df 92       	push	r13
 92a:	ef 92       	push	r14
 92c:	ff 92       	push	r15
 92e:	0f 93       	push	r16
 930:	1f 93       	push	r17
 932:	cf 93       	push	r28
 934:	df 93       	push	r29
 936:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 93a:	81 11       	cpse	r24, r1
 93c:	95 c0       	rjmp	.+298    	; 0xa68 <xTaskIncrementTick+0x142>
 93e:	e0 90 fb 06 	lds	r14, 0x06FB	; 0x8006fb <xTickCount>
 942:	f0 90 fc 06 	lds	r15, 0x06FC	; 0x8006fc <xTickCount+0x1>
 946:	8f ef       	ldi	r24, 0xFF	; 255
 948:	e8 1a       	sub	r14, r24
 94a:	f8 0a       	sbc	r15, r24
 94c:	f0 92 fc 06 	sts	0x06FC, r15	; 0x8006fc <xTickCount+0x1>
 950:	e0 92 fb 06 	sts	0x06FB, r14	; 0x8006fb <xTickCount>
 954:	e1 14       	cp	r14, r1
 956:	f1 04       	cpc	r15, r1
 958:	b1 f4       	brne	.+44     	; 0x986 <xTaskIncrementTick+0x60>
 95a:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 95e:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 962:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 966:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 96a:	30 93 14 07 	sts	0x0714, r19	; 0x800714 <pxDelayedTaskList+0x1>
 96e:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <pxDelayedTaskList>
 972:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 976:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 97a:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNumOfOverflows>
 97e:	8f 5f       	subi	r24, 0xFF	; 255
 980:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNumOfOverflows>
 984:	11 de       	rcall	.-990    	; 0x5a8 <prvResetNextTaskUnblockTime>
 986:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 98a:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 98e:	e8 16       	cp	r14, r24
 990:	f9 06       	cpc	r15, r25
 992:	10 f4       	brcc	.+4      	; 0x998 <xTaskIncrementTick+0x72>
 994:	d1 2c       	mov	r13, r1
 996:	50 c0       	rjmp	.+160    	; 0xa38 <xTaskIncrementTick+0x112>
 998:	d1 2c       	mov	r13, r1
 99a:	cc 24       	eor	r12, r12
 99c:	c3 94       	inc	r12
 99e:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 9a2:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 9a6:	80 81       	ld	r24, Z
 9a8:	81 11       	cpse	r24, r1
 9aa:	07 c0       	rjmp	.+14     	; 0x9ba <xTaskIncrementTick+0x94>
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	9f ef       	ldi	r25, 0xFF	; 255
 9b0:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9b4:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9b8:	3f c0       	rjmp	.+126    	; 0xa38 <xTaskIncrementTick+0x112>
 9ba:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 9be:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 9c2:	05 80       	ldd	r0, Z+5	; 0x05
 9c4:	f6 81       	ldd	r31, Z+6	; 0x06
 9c6:	e0 2d       	mov	r30, r0
 9c8:	c6 81       	ldd	r28, Z+6	; 0x06
 9ca:	d7 81       	ldd	r29, Z+7	; 0x07
 9cc:	8a 81       	ldd	r24, Y+2	; 0x02
 9ce:	9b 81       	ldd	r25, Y+3	; 0x03
 9d0:	e8 16       	cp	r14, r24
 9d2:	f9 06       	cpc	r15, r25
 9d4:	28 f4       	brcc	.+10     	; 0x9e0 <xTaskIncrementTick+0xba>
 9d6:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9da:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9de:	2c c0       	rjmp	.+88     	; 0xa38 <xTaskIncrementTick+0x112>
 9e0:	8e 01       	movw	r16, r28
 9e2:	0e 5f       	subi	r16, 0xFE	; 254
 9e4:	1f 4f       	sbci	r17, 0xFF	; 255
 9e6:	c8 01       	movw	r24, r16
 9e8:	5e dc       	rcall	.-1860   	; 0x2a6 <uxListRemove>
 9ea:	8c 89       	ldd	r24, Y+20	; 0x14
 9ec:	9d 89       	ldd	r25, Y+21	; 0x15
 9ee:	89 2b       	or	r24, r25
 9f0:	19 f0       	breq	.+6      	; 0x9f8 <xTaskIncrementTick+0xd2>
 9f2:	ce 01       	movw	r24, r28
 9f4:	0c 96       	adiw	r24, 0x0c	; 12
 9f6:	57 dc       	rcall	.-1874   	; 0x2a6 <uxListRemove>
 9f8:	8e 89       	ldd	r24, Y+22	; 0x16
 9fa:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 9fe:	98 17       	cp	r25, r24
 a00:	10 f4       	brcc	.+4      	; 0xa06 <xTaskIncrementTick+0xe0>
 a02:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	9c 01       	movw	r18, r24
 a0a:	22 0f       	add	r18, r18
 a0c:	33 1f       	adc	r19, r19
 a0e:	22 0f       	add	r18, r18
 a10:	33 1f       	adc	r19, r19
 a12:	22 0f       	add	r18, r18
 a14:	33 1f       	adc	r19, r19
 a16:	82 0f       	add	r24, r18
 a18:	93 1f       	adc	r25, r19
 a1a:	b8 01       	movw	r22, r16
 a1c:	89 5d       	subi	r24, 0xD9	; 217
 a1e:	98 4f       	sbci	r25, 0xF8	; 248
 a20:	f0 db       	rcall	.-2080   	; 0x202 <vListInsertEnd>
 a22:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a26:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a2a:	9e 89       	ldd	r25, Y+22	; 0x16
 a2c:	86 89       	ldd	r24, Z+22	; 0x16
 a2e:	98 17       	cp	r25, r24
 a30:	08 f4       	brcc	.+2      	; 0xa34 <xTaskIncrementTick+0x10e>
 a32:	b5 cf       	rjmp	.-150    	; 0x99e <xTaskIncrementTick+0x78>
 a34:	dc 2c       	mov	r13, r12
 a36:	b3 cf       	rjmp	.-154    	; 0x99e <xTaskIncrementTick+0x78>
 a38:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a3c:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a40:	86 89       	ldd	r24, Z+22	; 0x16
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	fc 01       	movw	r30, r24
 a46:	ee 0f       	add	r30, r30
 a48:	ff 1f       	adc	r31, r31
 a4a:	ee 0f       	add	r30, r30
 a4c:	ff 1f       	adc	r31, r31
 a4e:	ee 0f       	add	r30, r30
 a50:	ff 1f       	adc	r31, r31
 a52:	8e 0f       	add	r24, r30
 a54:	9f 1f       	adc	r25, r31
 a56:	fc 01       	movw	r30, r24
 a58:	e9 5d       	subi	r30, 0xD9	; 217
 a5a:	f8 4f       	sbci	r31, 0xF8	; 248
 a5c:	80 81       	ld	r24, Z
 a5e:	82 30       	cpi	r24, 0x02	; 2
 a60:	48 f0       	brcs	.+18     	; 0xa74 <xTaskIncrementTick+0x14e>
 a62:	dd 24       	eor	r13, r13
 a64:	d3 94       	inc	r13
 a66:	06 c0       	rjmp	.+12     	; 0xa74 <xTaskIncrementTick+0x14e>
 a68:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxPendedTicks>
 a6c:	8f 5f       	subi	r24, 0xFF	; 255
 a6e:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxPendedTicks>
 a72:	d1 2c       	mov	r13, r1
 a74:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 a78:	88 23       	and	r24, r24
 a7a:	11 f0       	breq	.+4      	; 0xa80 <xTaskIncrementTick+0x15a>
 a7c:	dd 24       	eor	r13, r13
 a7e:	d3 94       	inc	r13
 a80:	8d 2d       	mov	r24, r13
 a82:	df 91       	pop	r29
 a84:	cf 91       	pop	r28
 a86:	1f 91       	pop	r17
 a88:	0f 91       	pop	r16
 a8a:	ff 90       	pop	r15
 a8c:	ef 90       	pop	r14
 a8e:	df 90       	pop	r13
 a90:	cf 90       	pop	r12
 a92:	08 95       	ret

00000a94 <xTaskResumeAll>:
 a94:	df 92       	push	r13
 a96:	ef 92       	push	r14
 a98:	ff 92       	push	r15
 a9a:	0f 93       	push	r16
 a9c:	1f 93       	push	r17
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	f8 94       	cli
 aa6:	0f 92       	push	r0
 aa8:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 aac:	81 50       	subi	r24, 0x01	; 1
 aae:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 ab2:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 ab6:	81 11       	cpse	r24, r1
 ab8:	59 c0       	rjmp	.+178    	; 0xb6c <xTaskResumeAll+0xd8>
 aba:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 abe:	81 11       	cpse	r24, r1
 ac0:	30 c0       	rjmp	.+96     	; 0xb22 <xTaskResumeAll+0x8e>
 ac2:	57 c0       	rjmp	.+174    	; 0xb72 <xTaskResumeAll+0xde>
 ac4:	d7 01       	movw	r26, r14
 ac6:	15 96       	adiw	r26, 0x05	; 5
 ac8:	ed 91       	ld	r30, X+
 aca:	fc 91       	ld	r31, X
 acc:	16 97       	sbiw	r26, 0x06	; 6
 ace:	c6 81       	ldd	r28, Z+6	; 0x06
 ad0:	d7 81       	ldd	r29, Z+7	; 0x07
 ad2:	ce 01       	movw	r24, r28
 ad4:	0c 96       	adiw	r24, 0x0c	; 12
 ad6:	e7 db       	rcall	.-2098   	; 0x2a6 <uxListRemove>
 ad8:	8e 01       	movw	r16, r28
 ada:	0e 5f       	subi	r16, 0xFE	; 254
 adc:	1f 4f       	sbci	r17, 0xFF	; 255
 ade:	c8 01       	movw	r24, r16
 ae0:	e2 db       	rcall	.-2108   	; 0x2a6 <uxListRemove>
 ae2:	8e 89       	ldd	r24, Y+22	; 0x16
 ae4:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 ae8:	98 17       	cp	r25, r24
 aea:	10 f4       	brcc	.+4      	; 0xaf0 <xTaskResumeAll+0x5c>
 aec:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	9c 01       	movw	r18, r24
 af4:	22 0f       	add	r18, r18
 af6:	33 1f       	adc	r19, r19
 af8:	22 0f       	add	r18, r18
 afa:	33 1f       	adc	r19, r19
 afc:	22 0f       	add	r18, r18
 afe:	33 1f       	adc	r19, r19
 b00:	82 0f       	add	r24, r18
 b02:	93 1f       	adc	r25, r19
 b04:	b8 01       	movw	r22, r16
 b06:	89 5d       	subi	r24, 0xD9	; 217
 b08:	98 4f       	sbci	r25, 0xF8	; 248
 b0a:	7b db       	rcall	.-2314   	; 0x202 <vListInsertEnd>
 b0c:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 b10:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 b14:	9e 89       	ldd	r25, Y+22	; 0x16
 b16:	86 89       	ldd	r24, Z+22	; 0x16
 b18:	98 17       	cp	r25, r24
 b1a:	68 f0       	brcs	.+26     	; 0xb36 <xTaskResumeAll+0xa2>
 b1c:	d0 92 f7 06 	sts	0x06F7, r13	; 0x8006f7 <xYieldPending>
 b20:	0a c0       	rjmp	.+20     	; 0xb36 <xTaskResumeAll+0xa2>
 b22:	c0 e0       	ldi	r28, 0x00	; 0
 b24:	d0 e0       	ldi	r29, 0x00	; 0
 b26:	0f 2e       	mov	r0, r31
 b28:	f8 e0       	ldi	r31, 0x08	; 8
 b2a:	ef 2e       	mov	r14, r31
 b2c:	f7 e0       	ldi	r31, 0x07	; 7
 b2e:	ff 2e       	mov	r15, r31
 b30:	f0 2d       	mov	r31, r0
 b32:	dd 24       	eor	r13, r13
 b34:	d3 94       	inc	r13
 b36:	f7 01       	movw	r30, r14
 b38:	80 81       	ld	r24, Z
 b3a:	81 11       	cpse	r24, r1
 b3c:	c3 cf       	rjmp	.-122    	; 0xac4 <xTaskResumeAll+0x30>
 b3e:	cd 2b       	or	r28, r29
 b40:	09 f0       	breq	.+2      	; 0xb44 <xTaskResumeAll+0xb0>
 b42:	32 dd       	rcall	.-1436   	; 0x5a8 <prvResetNextTaskUnblockTime>
 b44:	c0 91 f8 06 	lds	r28, 0x06F8	; 0x8006f8 <uxPendedTicks>
 b48:	cc 23       	and	r28, r28
 b4a:	49 f0       	breq	.+18     	; 0xb5e <xTaskResumeAll+0xca>
 b4c:	d1 e0       	ldi	r29, 0x01	; 1
 b4e:	eb de       	rcall	.-554    	; 0x926 <xTaskIncrementTick>
 b50:	81 11       	cpse	r24, r1
 b52:	d0 93 f7 06 	sts	0x06F7, r29	; 0x8006f7 <xYieldPending>
 b56:	c1 50       	subi	r28, 0x01	; 1
 b58:	d1 f7       	brne	.-12     	; 0xb4e <xTaskResumeAll+0xba>
 b5a:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <uxPendedTicks>
 b5e:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 b62:	88 23       	and	r24, r24
 b64:	29 f0       	breq	.+10     	; 0xb70 <xTaskResumeAll+0xdc>
 b66:	6c dc       	rcall	.-1832   	; 0x440 <vPortYield>
 b68:	81 e0       	ldi	r24, 0x01	; 1
 b6a:	03 c0       	rjmp	.+6      	; 0xb72 <xTaskResumeAll+0xde>
 b6c:	80 e0       	ldi	r24, 0x00	; 0
 b6e:	01 c0       	rjmp	.+2      	; 0xb72 <xTaskResumeAll+0xde>
 b70:	80 e0       	ldi	r24, 0x00	; 0
 b72:	0f 90       	pop	r0
 b74:	0f be       	out	0x3f, r0	; 63
 b76:	df 91       	pop	r29
 b78:	cf 91       	pop	r28
 b7a:	1f 91       	pop	r17
 b7c:	0f 91       	pop	r16
 b7e:	ff 90       	pop	r15
 b80:	ef 90       	pop	r14
 b82:	df 90       	pop	r13
 b84:	08 95       	ret

00000b86 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 b86:	cf 93       	push	r28
 b88:	df 93       	push	r29
 b8a:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 b8c:	89 2b       	or	r24, r25
 b8e:	39 f0       	breq	.+14     	; 0xb9e <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 b90:	c4 de       	rcall	.-632    	; 0x91a <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 b92:	60 e0       	ldi	r22, 0x00	; 0
 b94:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 b96:	5b dd       	rcall	.-1354   	; 0x64e <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b98:	7d df       	rcall	.-262    	; 0xa94 <xTaskResumeAll>
 b9a:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <vTaskDelay+0x1a>
 b9e:	50 dc       	rcall	.-1888   	; 0x440 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 ba0:	df 91       	pop	r29
 ba2:	cf 91       	pop	r28
 ba4:	08 95       	ret

00000ba6 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 ba6:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 baa:	88 23       	and	r24, r24
 bac:	21 f0       	breq	.+8      	; 0xbb6 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 bae:	81 e0       	ldi	r24, 0x01	; 1
 bb0:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xYieldPending>
 bb4:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 bb6:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 bba:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 bbe:	82 2f       	mov	r24, r18
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	fc 01       	movw	r30, r24
 bc4:	ee 0f       	add	r30, r30
 bc6:	ff 1f       	adc	r31, r31
 bc8:	ee 0f       	add	r30, r30
 bca:	ff 1f       	adc	r31, r31
 bcc:	ee 0f       	add	r30, r30
 bce:	ff 1f       	adc	r31, r31
 bd0:	e8 0f       	add	r30, r24
 bd2:	f9 1f       	adc	r31, r25
 bd4:	e9 5d       	subi	r30, 0xD9	; 217
 bd6:	f8 4f       	sbci	r31, 0xF8	; 248
 bd8:	30 81       	ld	r19, Z
 bda:	31 11       	cpse	r19, r1
 bdc:	11 c0       	rjmp	.+34     	; 0xc00 <vTaskSwitchContext+0x5a>
 bde:	21 50       	subi	r18, 0x01	; 1
 be0:	82 2f       	mov	r24, r18
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	fc 01       	movw	r30, r24
 be6:	ee 0f       	add	r30, r30
 be8:	ff 1f       	adc	r31, r31
 bea:	ee 0f       	add	r30, r30
 bec:	ff 1f       	adc	r31, r31
 bee:	ee 0f       	add	r30, r30
 bf0:	ff 1f       	adc	r31, r31
 bf2:	e8 0f       	add	r30, r24
 bf4:	f9 1f       	adc	r31, r25
 bf6:	e9 5d       	subi	r30, 0xD9	; 217
 bf8:	f8 4f       	sbci	r31, 0xF8	; 248
 bfa:	30 81       	ld	r19, Z
 bfc:	33 23       	and	r19, r19
 bfe:	79 f3       	breq	.-34     	; 0xbde <vTaskSwitchContext+0x38>
 c00:	ac 01       	movw	r20, r24
 c02:	44 0f       	add	r20, r20
 c04:	55 1f       	adc	r21, r21
 c06:	44 0f       	add	r20, r20
 c08:	55 1f       	adc	r21, r21
 c0a:	44 0f       	add	r20, r20
 c0c:	55 1f       	adc	r21, r21
 c0e:	48 0f       	add	r20, r24
 c10:	59 1f       	adc	r21, r25
 c12:	da 01       	movw	r26, r20
 c14:	a9 5d       	subi	r26, 0xD9	; 217
 c16:	b8 4f       	sbci	r27, 0xF8	; 248
 c18:	11 96       	adiw	r26, 0x01	; 1
 c1a:	ed 91       	ld	r30, X+
 c1c:	fc 91       	ld	r31, X
 c1e:	12 97       	sbiw	r26, 0x02	; 2
 c20:	02 80       	ldd	r0, Z+2	; 0x02
 c22:	f3 81       	ldd	r31, Z+3	; 0x03
 c24:	e0 2d       	mov	r30, r0
 c26:	12 96       	adiw	r26, 0x02	; 2
 c28:	fc 93       	st	X, r31
 c2a:	ee 93       	st	-X, r30
 c2c:	11 97       	sbiw	r26, 0x01	; 1
 c2e:	46 5d       	subi	r20, 0xD6	; 214
 c30:	58 4f       	sbci	r21, 0xF8	; 248
 c32:	e4 17       	cp	r30, r20
 c34:	f5 07       	cpc	r31, r21
 c36:	29 f4       	brne	.+10     	; 0xc42 <vTaskSwitchContext+0x9c>
 c38:	42 81       	ldd	r20, Z+2	; 0x02
 c3a:	53 81       	ldd	r21, Z+3	; 0x03
 c3c:	fd 01       	movw	r30, r26
 c3e:	52 83       	std	Z+2, r21	; 0x02
 c40:	41 83       	std	Z+1, r20	; 0x01
 c42:	fc 01       	movw	r30, r24
 c44:	ee 0f       	add	r30, r30
 c46:	ff 1f       	adc	r31, r31
 c48:	ee 0f       	add	r30, r30
 c4a:	ff 1f       	adc	r31, r31
 c4c:	ee 0f       	add	r30, r30
 c4e:	ff 1f       	adc	r31, r31
 c50:	8e 0f       	add	r24, r30
 c52:	9f 1f       	adc	r25, r31
 c54:	fc 01       	movw	r30, r24
 c56:	e9 5d       	subi	r30, 0xD9	; 217
 c58:	f8 4f       	sbci	r31, 0xF8	; 248
 c5a:	01 80       	ldd	r0, Z+1	; 0x01
 c5c:	f2 81       	ldd	r31, Z+2	; 0x02
 c5e:	e0 2d       	mov	r30, r0
 c60:	86 81       	ldd	r24, Z+6	; 0x06
 c62:	97 81       	ldd	r25, Z+7	; 0x07
 c64:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxCurrentTCB+0x1>
 c68:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxCurrentTCB>
 c6c:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <uxTopReadyPriority>
 c70:	08 95       	ret

00000c72 <_exit>:
 c72:	f8 94       	cli

00000c74 <__stop_program>:
 c74:	ff cf       	rjmp	.-2      	; 0xc74 <__stop_program>
