
Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000d46  00000dda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000640  00800110  00800110  00000dea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b1c  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef2  00000000  00000000  00003bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019da  00000000  00000000  00004ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000654  00000000  00000000  0000649c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fe1  00000000  00000000  00006af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fc4  00000000  00000000  00007ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00009a95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	1f c3       	rjmp	.+1598   	; 0x674 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 35       	cpi	r26, 0x50	; 80
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	72 d1       	rcall	.+740    	; 0x3a8 <main>
  c4:	3e c6       	rjmp	.+3196   	; 0xd42 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
  ce:	8d d4       	rcall	.+2330   	; 0x9ea <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
  d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  d4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
  d8:	89 2b       	or	r24, r25
  da:	31 f4       	brne	.+12     	; 0xe8 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  dc:	85 e1       	ldi	r24, 0x15	; 21
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  e8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <xNextFreeByte>
  ec:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <xNextFreeByte+0x1>
  f0:	c9 01       	movw	r24, r18
  f2:	8c 0f       	add	r24, r28
  f4:	9d 1f       	adc	r25, r29
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	94 07       	cpc	r25, r20
  fc:	70 f4       	brcc	.+28     	; 0x11a <pvPortMalloc+0x52>
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	70 f4       	brcc	.+28     	; 0x120 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 104:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <__data_end>
 108:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <__data_end+0x1>
 10c:	c2 0f       	add	r28, r18
 10e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 110:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextFreeByte+0x1>
 114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextFreeByte>
 118:	05 c0       	rjmp	.+10     	; 0x124 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <pvPortMalloc+0x5c>
 120:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	1f d5       	rcall	.+2622   	; 0xb64 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 126:	ce 01       	movw	r24, r28
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 132:	03 96       	adiw	r24, 0x03	; 3
 134:	92 83       	std	Z+2, r25	; 0x02
 136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	34 83       	std	Z+4, r19	; 0x04
 13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 140:	96 83       	std	Z+6, r25	; 0x06
 142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 144:	90 87       	std	Z+8, r25	; 0x08
 146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 148:	10 82       	st	Z, r1
 14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 14c:	fc 01       	movw	r30, r24
 14e:	11 86       	std	Z+9, r1	; 0x09
 150:	10 86       	std	Z+8, r1	; 0x08
 152:	08 95       	ret

00000154 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	9c 01       	movw	r18, r24
 15a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 15c:	dc 01       	movw	r26, r24
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	cd 91       	ld	r28, X+
 162:	dc 91       	ld	r29, X
 164:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 166:	d3 83       	std	Z+3, r29	; 0x03
 168:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	9d 81       	ldd	r25, Y+5	; 0x05
 176:	dc 01       	movw	r26, r24
 178:	13 96       	adiw	r26, 0x03	; 3
 17a:	7c 93       	st	X, r23
 17c:	6e 93       	st	-X, r22
 17e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 180:	7d 83       	std	Y+5, r23	; 0x05
 182:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 184:	31 87       	std	Z+9, r19	; 0x09
 186:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 188:	f9 01       	movw	r30, r18
 18a:	80 81       	ld	r24, Z
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 83       	st	Z, r24
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 19c:	48 81       	ld	r20, Y
 19e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	52 07       	cpc	r21, r18
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1a8:	fc 01       	movw	r30, r24
 1aa:	a7 81       	ldd	r26, Z+7	; 0x07
 1ac:	b0 85       	ldd	r27, Z+8	; 0x08
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1b0:	dc 01       	movw	r26, r24
 1b2:	13 96       	adiw	r26, 0x03	; 3
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <vListInsert+0x22>
 1b6:	df 01       	movw	r26, r30
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ed 91       	ld	r30, X+
 1bc:	fc 91       	ld	r31, X
 1be:	13 97       	sbiw	r26, 0x03	; 3
 1c0:	20 81       	ld	r18, Z
 1c2:	31 81       	ldd	r19, Z+1	; 0x01
 1c4:	42 17       	cp	r20, r18
 1c6:	53 07       	cpc	r21, r19
 1c8:	b0 f7       	brcc	.-20     	; 0x1b6 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	fb 83       	std	Y+3, r31	; 0x03
 1d4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1d6:	d5 83       	std	Z+5, r29	; 0x05
 1d8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 1da:	bd 83       	std	Y+5, r27	; 0x05
 1dc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	dc 93       	st	X, r29
 1e2:	ce 93       	st	-X, r28
 1e4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1e6:	99 87       	std	Y+9, r25	; 0x09
 1e8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 81       	ld	r18, Z
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	20 83       	st	Z, r18
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1fe:	a0 85       	ldd	r26, Z+8	; 0x08
 200:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202:	c2 81       	ldd	r28, Z+2	; 0x02
 204:	d3 81       	ldd	r29, Z+3	; 0x03
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	95 81       	ldd	r25, Z+5	; 0x05
 20a:	9d 83       	std	Y+5, r25	; 0x05
 20c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	c4 81       	ldd	r28, Z+4	; 0x04
 210:	d5 81       	ldd	r29, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	8d 91       	ld	r24, X+
 21e:	9c 91       	ld	r25, X
 220:	12 97       	sbiw	r26, 0x02	; 2
 222:	e8 17       	cp	r30, r24
 224:	f9 07       	cpc	r31, r25
 226:	31 f4       	brne	.+12     	; 0x234 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:	84 81       	ldd	r24, Z+4	; 0x04
 22a:	95 81       	ldd	r25, Z+5	; 0x05
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 234:	11 86       	std	Z+9, r1	; 0x09
 236:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 238:	8c 91       	ld	r24, X
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 23e:	8c 91       	ld	r24, X
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LED0_Tick>:
	led_state4 = INIT4;
}

void LED0_Tick(){
	//Actions
	switch(led_state0){
 246:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <led_state0>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	19 f0       	breq	.+6      	; 0x254 <LED0_Tick+0xe>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	19 f0       	breq	.+6      	; 0x258 <LED0_Tick+0x12>
 252:	03 c0       	rjmp	.+6      	; 0x25a <LED0_Tick+0x14>
		case INIT0:
		//do nothing
		break;
		case OFF0:
		PORTD &= 0xFE;
 254:	58 98       	cbi	0x0b, 0	; 11
		break;
 256:	01 c0       	rjmp	.+2      	; 0x25a <LED0_Tick+0x14>
		case ON0:
		PORTD |= 0x01;
 258:	58 9a       	sbi	0x0b, 0	; 11
		default:
		//do nothing
		break;
	}
	//Transitions
	switch(led_state0){
 25a:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <led_state0>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	41 f0       	breq	.+16     	; 0x272 <LED0_Tick+0x2c>
 262:	18 f0       	brcs	.+6      	; 0x26a <LED0_Tick+0x24>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	49 f0       	breq	.+18     	; 0x27a <LED0_Tick+0x34>
 268:	0c c0       	rjmp	.+24     	; 0x282 <LED0_Tick+0x3c>
		case INIT0:
		led_state0 = OFF0;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <led_state0>
		break;
 270:	08 95       	ret
		case OFF0:
		led_state0 = ON0;
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <led_state0>
		break;
 278:	08 95       	ret
		case ON0:
		led_state0 = OFF0;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <led_state0>
		break;
 280:	08 95       	ret
		default:
		led_state0 = INIT0;
 282:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <led_state0>
 286:	08 95       	ret

00000288 <Led0SecTask>:
enum LEDState0 {INIT0, OFF0, ON0} led_state0;
enum LEDState2 {INIT2, OFF2, ON2} led_state2;
enum LEDState4 {INIT4, OFF4, ON4} led_state4;

void LED0_Init(){
	led_state0 = INIT0;
 288:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <led_state0>


void Led0SecTask() {
	LED0_Init();
	for(;;) {
		LED0_Tick();
 28c:	dc df       	rcall	.-72     	; 0x246 <LED0_Tick>
		vTaskDelay(500);
 28e:	84 ef       	ldi	r24, 0xF4	; 244
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	e1 d4       	rcall	.+2498   	; 0xc56 <vTaskDelay>
 294:	fb cf       	rjmp	.-10     	; 0x28c <Led0SecTask+0x4>

00000296 <LED2_Tick>:
	}
}

void LED2_Tick(){
	//Actions
	switch(led_state2){
 296:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state2>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	19 f0       	breq	.+6      	; 0x2a4 <LED2_Tick+0xe>
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	19 f0       	breq	.+6      	; 0x2a8 <LED2_Tick+0x12>
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <LED2_Tick+0x14>
		case INIT2:
		//do nothing
		break;
		case OFF2:
		PORTD &= 0xFD;
 2a4:	59 98       	cbi	0x0b, 1	; 11
		break;
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <LED2_Tick+0x14>
		case ON2:
		PORTD |= 0x02;
 2a8:	59 9a       	sbi	0x0b, 1	; 11
		default:
		//do nothing
		break;
	}
	//Transitions
	switch(led_state2){
 2aa:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state2>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	41 f0       	breq	.+16     	; 0x2c2 <LED2_Tick+0x2c>
 2b2:	18 f0       	brcs	.+6      	; 0x2ba <LED2_Tick+0x24>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	49 f0       	breq	.+18     	; 0x2ca <LED2_Tick+0x34>
 2b8:	0c c0       	rjmp	.+24     	; 0x2d2 <LED2_Tick+0x3c>
		case INIT2:
		led_state2 = OFF2;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state2>
		break;
 2c0:	08 95       	ret
		case OFF2:
		led_state2 = ON2;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state2>
		break;
 2c8:	08 95       	ret
		case ON2:
		led_state2 = OFF2;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state2>
		break;
 2d0:	08 95       	ret
		default:
		led_state2 = INIT2;
 2d2:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state2>
 2d6:	08 95       	ret

000002d8 <Led2SecTask>:
void LED0_Init(){
	led_state0 = INIT0;
}

void LED2_Init(){
	led_state2 = INIT2;
 2d8:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state2>
}

void Led2SecTask() {
	LED2_Init();
	for(;;) {
		LED2_Tick();
 2dc:	dc df       	rcall	.-72     	; 0x296 <LED2_Tick>
		vTaskDelay(1000);
 2de:	88 ee       	ldi	r24, 0xE8	; 232
 2e0:	93 e0       	ldi	r25, 0x03	; 3
 2e2:	b9 d4       	rcall	.+2418   	; 0xc56 <vTaskDelay>
 2e4:	fb cf       	rjmp	.-10     	; 0x2dc <Led2SecTask+0x4>

000002e6 <LED4_Tick>:
	}
}

void LED4_Tick(){
	//Actions
	switch(led_state4){
 2e6:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <led_state4>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	19 f0       	breq	.+6      	; 0x2f4 <LED4_Tick+0xe>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	19 f0       	breq	.+6      	; 0x2f8 <LED4_Tick+0x12>
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LED4_Tick+0x14>
		case INIT4:
		//do nothing
		break;
		case OFF4:
		PORTD &= 0xFB;
 2f4:	5a 98       	cbi	0x0b, 2	; 11
		break;
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <LED4_Tick+0x14>
		case ON4:
		PORTD |= 0x04;
 2f8:	5a 9a       	sbi	0x0b, 2	; 11
		default:
		//do nothing
		break;
	}
	//Transitions
	switch(led_state4){
 2fa:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <led_state4>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	41 f0       	breq	.+16     	; 0x312 <LED4_Tick+0x2c>
 302:	18 f0       	brcs	.+6      	; 0x30a <LED4_Tick+0x24>
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	49 f0       	breq	.+18     	; 0x31a <LED4_Tick+0x34>
 308:	0c c0       	rjmp	.+24     	; 0x322 <LED4_Tick+0x3c>
		case INIT4:
		led_state4 = OFF4;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <led_state4>
		break;
 310:	08 95       	ret
		case OFF4:
		led_state4 = ON4;
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <led_state4>
		break;
 318:	08 95       	ret
		case ON4:
		led_state4 = OFF4;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <led_state4>
		break;
 320:	08 95       	ret
		default:
		led_state4 = INIT4;
 322:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <led_state4>
 326:	08 95       	ret

00000328 <Led4SecTask>:
void LED2_Init(){
	led_state2 = INIT2;
}

void LED4_Init(){
	led_state4 = INIT4;
 328:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <led_state4>
}

void Led4SecTask() {
	LED4_Init();
	for(;;) {
		LED4_Tick();
 32c:	dc df       	rcall	.-72     	; 0x2e6 <LED4_Tick>
		vTaskDelay(2500);
 32e:	84 ec       	ldi	r24, 0xC4	; 196
 330:	99 e0       	ldi	r25, 0x09	; 9
 332:	91 d4       	rcall	.+2338   	; 0xc56 <vTaskDelay>
 334:	fb cf       	rjmp	.-10     	; 0x32c <Led4SecTask+0x4>

00000336 <StartSecPulse0>:
	}
}

void StartSecPulse0(unsigned portBASE_TYPE Priority) {
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
	xTaskCreate(Led0SecTask,
 33c:	e1 2c       	mov	r14, r1
 33e:	f1 2c       	mov	r15, r1
 340:	08 2f       	mov	r16, r24
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	45 e5       	ldi	r20, 0x55	; 85
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	71 e0       	ldi	r23, 0x01	; 1
 34e:	84 e4       	ldi	r24, 0x44	; 68
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	26 d2       	rcall	.+1100   	; 0x7a0 <xTaskCreate>
	(signed portCHAR *)"LedSecTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	Priority,
	NULL );
}
 354:	0f 91       	pop	r16
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	08 95       	ret

0000035c <StartSecPulse2>:

void StartSecPulse2(unsigned portBASE_TYPE Priority) {
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
 360:	0f 93       	push	r16
	xTaskCreate(Led2SecTask,
 362:	e1 2c       	mov	r14, r1
 364:	f1 2c       	mov	r15, r1
 366:	08 2f       	mov	r16, r24
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	45 e5       	ldi	r20, 0x55	; 85
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	71 e0       	ldi	r23, 0x01	; 1
 374:	8c e6       	ldi	r24, 0x6C	; 108
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	13 d2       	rcall	.+1062   	; 0x7a0 <xTaskCreate>
	(signed portCHAR *)"LedSecTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	Priority,
	NULL );
}
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	08 95       	ret

00000382 <StartSecPulse4>:

void StartSecPulse4(unsigned portBASE_TYPE Priority) {
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	0f 93       	push	r16
	xTaskCreate(Led4SecTask,
 388:	e1 2c       	mov	r14, r1
 38a:	f1 2c       	mov	r15, r1
 38c:	08 2f       	mov	r16, r24
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	45 e5       	ldi	r20, 0x55	; 85
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	71 e0       	ldi	r23, 0x01	; 1
 39a:	84 e9       	ldi	r24, 0x94	; 148
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	00 d2       	rcall	.+1024   	; 0x7a0 <xTaskCreate>
	(signed portCHAR *)"LedSecTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	Priority,
	NULL );
}
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	08 95       	ret

000003a8 <main>:

int main(void) {
	DDRA = 0x00; PORTA=0xFF;
 3a8:	11 b8       	out	0x01, r1	; 1
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;
 3ae:	8a b9       	out	0x0a, r24	; 10
	//Start Tasks
	StartSecPulse0(1);
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	c1 df       	rcall	.-126    	; 0x336 <StartSecPulse0>
	StartSecPulse2(2);
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	d2 df       	rcall	.-92     	; 0x35c <StartSecPulse2>
	StartSecPulse4(3);
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	e3 df       	rcall	.-58     	; 0x382 <StartSecPulse4>
	//RunSchedular
	vTaskStartScheduler();
 3bc:	ee d2       	rcall	.+1500   	; 0x99a <vTaskStartScheduler>
 3be:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	08 95       	ret

000003c4 <pxPortInitialiseStack>:
 3c4:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 3c6:	fc 01       	movw	r30, r24
 3c8:	30 83       	st	Z, r19
 3ca:	31 97       	sbiw	r30, 0x01	; 1
 3cc:	22 e2       	ldi	r18, 0x22	; 34
 3ce:	20 83       	st	Z, r18
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	a3 e3       	ldi	r26, 0x33	; 51
 3d4:	a0 83       	st	Z, r26
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	60 83       	st	Z, r22
 3da:	31 97       	sbiw	r30, 0x01	; 1
 3dc:	70 83       	st	Z, r23
 3de:	31 97       	sbiw	r30, 0x01	; 1
 3e0:	10 82       	st	Z, r1
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	60 e8       	ldi	r22, 0x80	; 128
 3e6:	60 83       	st	Z, r22
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	10 82       	st	Z, r1
 3ec:	31 97       	sbiw	r30, 0x01	; 1
 3ee:	62 e0       	ldi	r22, 0x02	; 2
 3f0:	60 83       	st	Z, r22
 3f2:	31 97       	sbiw	r30, 0x01	; 1
 3f4:	63 e0       	ldi	r22, 0x03	; 3
 3f6:	60 83       	st	Z, r22
 3f8:	31 97       	sbiw	r30, 0x01	; 1
 3fa:	64 e0       	ldi	r22, 0x04	; 4
 3fc:	60 83       	st	Z, r22
 3fe:	31 97       	sbiw	r30, 0x01	; 1
 400:	65 e0       	ldi	r22, 0x05	; 5
 402:	60 83       	st	Z, r22
 404:	31 97       	sbiw	r30, 0x01	; 1
 406:	66 e0       	ldi	r22, 0x06	; 6
 408:	60 83       	st	Z, r22
 40a:	31 97       	sbiw	r30, 0x01	; 1
 40c:	67 e0       	ldi	r22, 0x07	; 7
 40e:	60 83       	st	Z, r22
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	68 e0       	ldi	r22, 0x08	; 8
 414:	60 83       	st	Z, r22
 416:	31 97       	sbiw	r30, 0x01	; 1
 418:	69 e0       	ldi	r22, 0x09	; 9
 41a:	60 83       	st	Z, r22
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	60 e1       	ldi	r22, 0x10	; 16
 420:	60 83       	st	Z, r22
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	30 83       	st	Z, r19
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	32 e1       	ldi	r19, 0x12	; 18
 42a:	30 83       	st	Z, r19
 42c:	31 97       	sbiw	r30, 0x01	; 1
 42e:	33 e1       	ldi	r19, 0x13	; 19
 430:	30 83       	st	Z, r19
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	34 e1       	ldi	r19, 0x14	; 20
 436:	30 83       	st	Z, r19
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	35 e1       	ldi	r19, 0x15	; 21
 43c:	30 83       	st	Z, r19
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	36 e1       	ldi	r19, 0x16	; 22
 442:	30 83       	st	Z, r19
 444:	31 97       	sbiw	r30, 0x01	; 1
 446:	37 e1       	ldi	r19, 0x17	; 23
 448:	30 83       	st	Z, r19
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	38 e1       	ldi	r19, 0x18	; 24
 44e:	30 83       	st	Z, r19
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	39 e1       	ldi	r19, 0x19	; 25
 454:	30 83       	st	Z, r19
 456:	31 97       	sbiw	r30, 0x01	; 1
 458:	30 e2       	ldi	r19, 0x20	; 32
 45a:	30 83       	st	Z, r19
 45c:	31 97       	sbiw	r30, 0x01	; 1
 45e:	31 e2       	ldi	r19, 0x21	; 33
 460:	30 83       	st	Z, r19
 462:	31 97       	sbiw	r30, 0x01	; 1
 464:	20 83       	st	Z, r18
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	23 e2       	ldi	r18, 0x23	; 35
 46a:	20 83       	st	Z, r18
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	40 83       	st	Z, r20
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	50 83       	st	Z, r21
 474:	31 97       	sbiw	r30, 0x01	; 1
 476:	26 e2       	ldi	r18, 0x26	; 38
 478:	20 83       	st	Z, r18
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	27 e2       	ldi	r18, 0x27	; 39
 47e:	20 83       	st	Z, r18
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	28 e2       	ldi	r18, 0x28	; 40
 484:	20 83       	st	Z, r18
 486:	31 97       	sbiw	r30, 0x01	; 1
 488:	29 e2       	ldi	r18, 0x29	; 41
 48a:	20 83       	st	Z, r18
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	20 e3       	ldi	r18, 0x30	; 48
 490:	20 83       	st	Z, r18
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	21 e3       	ldi	r18, 0x31	; 49
 496:	20 83       	st	Z, r18
 498:	86 97       	sbiw	r24, 0x26	; 38
 49a:	08 95       	ret

0000049c <xPortStartScheduler>:
 49c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4a0:	8c e7       	ldi	r24, 0x7C	; 124
 4a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 4a6:	8b e0       	ldi	r24, 0x0B	; 11
 4a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4ac:	ef e6       	ldi	r30, 0x6F	; 111
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	82 60       	ori	r24, 0x02	; 2
 4b4:	80 83       	st	Z, r24
 4b6:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 4ba:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 4be:	cd 91       	ld	r28, X+
 4c0:	cd bf       	out	0x3d, r28	; 61
 4c2:	dd 91       	ld	r29, X+
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	ff 91       	pop	r31
 4c8:	ef 91       	pop	r30
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	df 90       	pop	r13
 4ec:	cf 90       	pop	r12
 4ee:	bf 90       	pop	r11
 4f0:	af 90       	pop	r10
 4f2:	9f 90       	pop	r9
 4f4:	8f 90       	pop	r8
 4f6:	7f 90       	pop	r7
 4f8:	6f 90       	pop	r6
 4fa:	5f 90       	pop	r5
 4fc:	4f 90       	pop	r4
 4fe:	3f 90       	pop	r3
 500:	2f 90       	pop	r2
 502:	1f 90       	pop	r1
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	08 95       	ret
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	08 95       	ret

00000510 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	0f 92       	push	r0
 518:	1f 92       	push	r1
 51a:	11 24       	eor	r1, r1
 51c:	2f 92       	push	r2
 51e:	3f 92       	push	r3
 520:	4f 92       	push	r4
 522:	5f 92       	push	r5
 524:	6f 92       	push	r6
 526:	7f 92       	push	r7
 528:	8f 92       	push	r8
 52a:	9f 92       	push	r9
 52c:	af 92       	push	r10
 52e:	bf 92       	push	r11
 530:	cf 92       	push	r12
 532:	df 92       	push	r13
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	ef 93       	push	r30
 556:	ff 93       	push	r31
 558:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 55c:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 560:	0d b6       	in	r0, 0x3d	; 61
 562:	0d 92       	st	X+, r0
 564:	0e b6       	in	r0, 0x3e	; 62
 566:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 568:	86 d3       	rcall	.+1804   	; 0xc76 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 56a:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 56e:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 572:	cd 91       	ld	r28, X+
 574:	cd bf       	out	0x3d, r28	; 61
 576:	dd 91       	ld	r29, X+
 578:	de bf       	out	0x3e, r29	; 62
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	bf 91       	pop	r27
 584:	af 91       	pop	r26
 586:	9f 91       	pop	r25
 588:	8f 91       	pop	r24
 58a:	7f 91       	pop	r23
 58c:	6f 91       	pop	r22
 58e:	5f 91       	pop	r21
 590:	4f 91       	pop	r20
 592:	3f 91       	pop	r19
 594:	2f 91       	pop	r18
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	df 90       	pop	r13
 5a0:	cf 90       	pop	r12
 5a2:	bf 90       	pop	r11
 5a4:	af 90       	pop	r10
 5a6:	9f 90       	pop	r9
 5a8:	8f 90       	pop	r8
 5aa:	7f 90       	pop	r7
 5ac:	6f 90       	pop	r6
 5ae:	5f 90       	pop	r5
 5b0:	4f 90       	pop	r4
 5b2:	3f 90       	pop	r3
 5b4:	2f 90       	pop	r2
 5b6:	1f 90       	pop	r1
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0

	asm volatile ( "ret" );
 5be:	08 95       	ret

000005c0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 5c0:	0f 92       	push	r0
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	0f 92       	push	r0
 5c8:	1f 92       	push	r1
 5ca:	11 24       	eor	r1, r1
 5cc:	2f 92       	push	r2
 5ce:	3f 92       	push	r3
 5d0:	4f 92       	push	r4
 5d2:	5f 92       	push	r5
 5d4:	6f 92       	push	r6
 5d6:	7f 92       	push	r7
 5d8:	8f 92       	push	r8
 5da:	9f 92       	push	r9
 5dc:	af 92       	push	r10
 5de:	bf 92       	push	r11
 5e0:	cf 92       	push	r12
 5e2:	df 92       	push	r13
 5e4:	ef 92       	push	r14
 5e6:	ff 92       	push	r15
 5e8:	0f 93       	push	r16
 5ea:	1f 93       	push	r17
 5ec:	2f 93       	push	r18
 5ee:	3f 93       	push	r19
 5f0:	4f 93       	push	r20
 5f2:	5f 93       	push	r21
 5f4:	6f 93       	push	r22
 5f6:	7f 93       	push	r23
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	af 93       	push	r26
 5fe:	bf 93       	push	r27
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
 608:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 60c:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 610:	0d b6       	in	r0, 0x3d	; 61
 612:	0d 92       	st	X+, r0
 614:	0e b6       	in	r0, 0x3e	; 62
 616:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 618:	ee d1       	rcall	.+988    	; 0x9f6 <xTaskIncrementTick>
 61a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 61c:	2c d3       	rcall	.+1624   	; 0xc76 <vTaskSwitchContext>
 61e:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 622:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 626:	cd 91       	ld	r28, X+
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	dd 91       	ld	r29, X+
 62c:	de bf       	out	0x3e, r29	; 62
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	ff 90       	pop	r15
 650:	ef 90       	pop	r14
 652:	df 90       	pop	r13
 654:	cf 90       	pop	r12
 656:	bf 90       	pop	r11
 658:	af 90       	pop	r10
 65a:	9f 90       	pop	r9
 65c:	8f 90       	pop	r8
 65e:	7f 90       	pop	r7
 660:	6f 90       	pop	r6
 662:	5f 90       	pop	r5
 664:	4f 90       	pop	r4
 666:	3f 90       	pop	r3
 668:	2f 90       	pop	r2
 66a:	1f 90       	pop	r1
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	08 95       	ret

00000674 <__vector_13>:

	asm volatile ( "ret" );
 674:	a5 df       	rcall	.-182    	; 0x5c0 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 676:	18 95       	reti

00000678 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 678:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 67c:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 680:	80 81       	ld	r24, Z
 682:	81 11       	cpse	r24, r1
 684:	07 c0       	rjmp	.+14     	; 0x694 <prvResetNextTaskUnblockTime+0x1c>
 686:	8f ef       	ldi	r24, 0xFF	; 255
 688:	9f ef       	ldi	r25, 0xFF	; 255
 68a:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 68e:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 692:	08 95       	ret
 694:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 698:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 69c:	05 80       	ldd	r0, Z+5	; 0x05
 69e:	f6 81       	ldd	r31, Z+6	; 0x06
 6a0:	e0 2d       	mov	r30, r0
 6a2:	06 80       	ldd	r0, Z+6	; 0x06
 6a4:	f7 81       	ldd	r31, Z+7	; 0x07
 6a6:	e0 2d       	mov	r30, r0
 6a8:	82 81       	ldd	r24, Z+2	; 0x02
 6aa:	93 81       	ldd	r25, Z+3	; 0x03
 6ac:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 6b0:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 6b4:	08 95       	ret

000006b6 <prvIdleTask>:
 6b6:	0f ef       	ldi	r16, 0xFF	; 255
 6b8:	16 e0       	ldi	r17, 0x06	; 6
 6ba:	0f 2e       	mov	r0, r31
 6bc:	f7 e2       	ldi	r31, 0x27	; 39
 6be:	ef 2e       	mov	r14, r31
 6c0:	f7 e0       	ldi	r31, 0x07	; 7
 6c2:	ff 2e       	mov	r15, r31
 6c4:	f0 2d       	mov	r31, r0
 6c6:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 6ca:	88 23       	and	r24, r24
 6cc:	11 f1       	breq	.+68     	; 0x712 <prvIdleTask+0x5c>
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	f8 94       	cli
 6d2:	0f 92       	push	r0
 6d4:	d8 01       	movw	r26, r16
 6d6:	15 96       	adiw	r26, 0x05	; 5
 6d8:	ed 91       	ld	r30, X+
 6da:	fc 91       	ld	r31, X
 6dc:	16 97       	sbiw	r26, 0x06	; 6
 6de:	c6 81       	ldd	r28, Z+6	; 0x06
 6e0:	d7 81       	ldd	r29, Z+7	; 0x07
 6e2:	ce 01       	movw	r24, r28
 6e4:	02 96       	adiw	r24, 0x02	; 2
 6e6:	88 dd       	rcall	.-1264   	; 0x1f8 <uxListRemove>
 6e8:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 6ec:	81 50       	subi	r24, 0x01	; 1
 6ee:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 6f2:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 6f6:	81 50       	subi	r24, 0x01	; 1
 6f8:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	8f 89       	ldd	r24, Y+23	; 0x17
 702:	98 8d       	ldd	r25, Y+24	; 0x18
 704:	14 dd       	rcall	.-1496   	; 0x12e <vPortFree>
 706:	ce 01       	movw	r24, r28
 708:	12 dd       	rcall	.-1500   	; 0x12e <vPortFree>
 70a:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 70e:	81 11       	cpse	r24, r1
 710:	de cf       	rjmp	.-68     	; 0x6ce <prvIdleTask+0x18>
 712:	f7 01       	movw	r30, r14
 714:	80 81       	ld	r24, Z
 716:	82 30       	cpi	r24, 0x02	; 2
 718:	b0 f2       	brcs	.-84     	; 0x6c6 <prvIdleTask+0x10>
 71a:	fa de       	rcall	.-524    	; 0x510 <vPortYield>
 71c:	d4 cf       	rjmp	.-88     	; 0x6c6 <prvIdleTask+0x10>

0000071e <prvAddCurrentTaskToDelayedList>:
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	ec 01       	movw	r28, r24
 728:	00 91 fb 06 	lds	r16, 0x06FB	; 0x8006fb <xTickCount>
 72c:	10 91 fc 06 	lds	r17, 0x06FC	; 0x8006fc <xTickCount+0x1>
 730:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 734:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 738:	02 96       	adiw	r24, 0x02	; 2
 73a:	5e dd       	rcall	.-1348   	; 0x1f8 <uxListRemove>
 73c:	c0 0f       	add	r28, r16
 73e:	d1 1f       	adc	r29, r17
 740:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 744:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 748:	d3 83       	std	Z+3, r29	; 0x03
 74a:	c2 83       	std	Z+2, r28	; 0x02
 74c:	c0 17       	cp	r28, r16
 74e:	d1 07       	cpc	r29, r17
 750:	60 f4       	brcc	.+24     	; 0x76a <prvAddCurrentTaskToDelayedList+0x4c>
 752:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 756:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 75a:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 75e:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 762:	6e 5f       	subi	r22, 0xFE	; 254
 764:	7f 4f       	sbci	r23, 0xFF	; 255
 766:	17 dd       	rcall	.-1490   	; 0x196 <vListInsert>
 768:	16 c0       	rjmp	.+44     	; 0x796 <prvAddCurrentTaskToDelayedList+0x78>
 76a:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 76e:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 772:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 776:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 77a:	6e 5f       	subi	r22, 0xFE	; 254
 77c:	7f 4f       	sbci	r23, 0xFF	; 255
 77e:	0b dd       	rcall	.-1514   	; 0x196 <vListInsert>
 780:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 784:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 788:	c8 17       	cp	r28, r24
 78a:	d9 07       	cpc	r29, r25
 78c:	20 f4       	brcc	.+8      	; 0x796 <prvAddCurrentTaskToDelayedList+0x78>
 78e:	d0 93 f4 06 	sts	0x06F4, r29	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 792:	c0 93 f3 06 	sts	0x06F3, r28	; 0x8006f3 <xNextTaskUnblockTime>
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	1f 91       	pop	r17
 79c:	0f 91       	pop	r16
 79e:	08 95       	ret

000007a0 <xTaskCreate>:
 7a0:	4f 92       	push	r4
 7a2:	5f 92       	push	r5
 7a4:	6f 92       	push	r6
 7a6:	7f 92       	push	r7
 7a8:	8f 92       	push	r8
 7aa:	9f 92       	push	r9
 7ac:	af 92       	push	r10
 7ae:	bf 92       	push	r11
 7b0:	cf 92       	push	r12
 7b2:	df 92       	push	r13
 7b4:	ef 92       	push	r14
 7b6:	ff 92       	push	r15
 7b8:	0f 93       	push	r16
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	4c 01       	movw	r8, r24
 7c0:	6b 01       	movw	r12, r22
 7c2:	5a 01       	movw	r10, r20
 7c4:	29 01       	movw	r4, r18
 7c6:	ca 01       	movw	r24, r20
 7c8:	7f dc       	rcall	.-1794   	; 0xc8 <pvPortMalloc>
 7ca:	3c 01       	movw	r6, r24
 7cc:	89 2b       	or	r24, r25
 7ce:	09 f4       	brne	.+2      	; 0x7d2 <xTaskCreate+0x32>
 7d0:	d3 c0       	rjmp	.+422    	; 0x978 <xTaskCreate+0x1d8>
 7d2:	86 e2       	ldi	r24, 0x26	; 38
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	78 dc       	rcall	.-1808   	; 0xc8 <pvPortMalloc>
 7d8:	ec 01       	movw	r28, r24
 7da:	89 2b       	or	r24, r25
 7dc:	59 f0       	breq	.+22     	; 0x7f4 <xTaskCreate+0x54>
 7de:	78 8e       	std	Y+24, r7	; 0x18
 7e0:	6f 8a       	std	Y+23, r6	; 0x17
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	a8 1a       	sub	r10, r24
 7e6:	b1 08       	sbc	r11, r1
 7e8:	a6 0c       	add	r10, r6
 7ea:	b7 1c       	adc	r11, r7
 7ec:	c1 14       	cp	r12, r1
 7ee:	d1 04       	cpc	r13, r1
 7f0:	21 f4       	brne	.+8      	; 0x7fa <xTaskCreate+0x5a>
 7f2:	1f c0       	rjmp	.+62     	; 0x832 <xTaskCreate+0x92>
 7f4:	c3 01       	movw	r24, r6
 7f6:	9b dc       	rcall	.-1738   	; 0x12e <vPortFree>
 7f8:	bf c0       	rjmp	.+382    	; 0x978 <xTaskCreate+0x1d8>
 7fa:	d6 01       	movw	r26, r12
 7fc:	8c 91       	ld	r24, X
 7fe:	89 8f       	std	Y+25, r24	; 0x19
 800:	8c 91       	ld	r24, X
 802:	88 23       	and	r24, r24
 804:	a1 f0       	breq	.+40     	; 0x82e <xTaskCreate+0x8e>
 806:	ae 01       	movw	r20, r28
 808:	46 5e       	subi	r20, 0xE6	; 230
 80a:	5f 4f       	sbci	r21, 0xFF	; 255
 80c:	f6 01       	movw	r30, r12
 80e:	31 96       	adiw	r30, 0x01	; 1
 810:	b8 e0       	ldi	r27, 0x08	; 8
 812:	cb 0e       	add	r12, r27
 814:	d1 1c       	adc	r13, r1
 816:	cf 01       	movw	r24, r30
 818:	21 91       	ld	r18, Z+
 81a:	da 01       	movw	r26, r20
 81c:	2d 93       	st	X+, r18
 81e:	ad 01       	movw	r20, r26
 820:	dc 01       	movw	r26, r24
 822:	8c 91       	ld	r24, X
 824:	88 23       	and	r24, r24
 826:	19 f0       	breq	.+6      	; 0x82e <xTaskCreate+0x8e>
 828:	ec 15       	cp	r30, r12
 82a:	fd 05       	cpc	r31, r13
 82c:	a1 f7       	brne	.-24     	; 0x816 <xTaskCreate+0x76>
 82e:	18 a2       	std	Y+32, r1	; 0x20
 830:	01 c0       	rjmp	.+2      	; 0x834 <xTaskCreate+0x94>
 832:	19 8e       	std	Y+25, r1	; 0x19
 834:	04 30       	cpi	r16, 0x04	; 4
 836:	08 f0       	brcs	.+2      	; 0x83a <xTaskCreate+0x9a>
 838:	03 e0       	ldi	r16, 0x03	; 3
 83a:	0e 8b       	std	Y+22, r16	; 0x16
 83c:	6e 01       	movw	r12, r28
 83e:	b2 e0       	ldi	r27, 0x02	; 2
 840:	cb 0e       	add	r12, r27
 842:	d1 1c       	adc	r13, r1
 844:	c6 01       	movw	r24, r12
 846:	82 dc       	rcall	.-1788   	; 0x14c <vListInitialiseItem>
 848:	ce 01       	movw	r24, r28
 84a:	0c 96       	adiw	r24, 0x0c	; 12
 84c:	7f dc       	rcall	.-1794   	; 0x14c <vListInitialiseItem>
 84e:	d9 87       	std	Y+9, r29	; 0x09
 850:	c8 87       	std	Y+8, r28	; 0x08
 852:	84 e0       	ldi	r24, 0x04	; 4
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	80 1b       	sub	r24, r16
 858:	91 09       	sbc	r25, r1
 85a:	9d 87       	std	Y+13, r25	; 0x0d
 85c:	8c 87       	std	Y+12, r24	; 0x0c
 85e:	db 8b       	std	Y+19, r29	; 0x13
 860:	ca 8b       	std	Y+18, r28	; 0x12
 862:	19 a2       	std	Y+33, r1	; 0x21
 864:	1a a2       	std	Y+34, r1	; 0x22
 866:	1b a2       	std	Y+35, r1	; 0x23
 868:	1c a2       	std	Y+36, r1	; 0x24
 86a:	1d a2       	std	Y+37, r1	; 0x25
 86c:	a2 01       	movw	r20, r4
 86e:	b4 01       	movw	r22, r8
 870:	c5 01       	movw	r24, r10
 872:	a8 dd       	rcall	.-1200   	; 0x3c4 <pxPortInitialiseStack>
 874:	99 83       	std	Y+1, r25	; 0x01
 876:	88 83       	st	Y, r24
 878:	e1 14       	cp	r14, r1
 87a:	f1 04       	cpc	r15, r1
 87c:	19 f0       	breq	.+6      	; 0x884 <xTaskCreate+0xe4>
 87e:	f7 01       	movw	r30, r14
 880:	d1 83       	std	Z+1, r29	; 0x01
 882:	c0 83       	st	Z, r28
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	f8 94       	cli
 888:	0f 92       	push	r0
 88a:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 88e:	8f 5f       	subi	r24, 0xFF	; 255
 890:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 894:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 898:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 89c:	89 2b       	or	r24, r25
 89e:	69 f5       	brne	.+90     	; 0x8fa <xTaskCreate+0x15a>
 8a0:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 8a4:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 8a8:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 8ac:	81 30       	cpi	r24, 0x01	; 1
 8ae:	a9 f5       	brne	.+106    	; 0x91a <xTaskCreate+0x17a>
 8b0:	87 e2       	ldi	r24, 0x27	; 39
 8b2:	97 e0       	ldi	r25, 0x07	; 7
 8b4:	3d dc       	rcall	.-1926   	; 0x130 <vListInitialise>
 8b6:	80 e3       	ldi	r24, 0x30	; 48
 8b8:	97 e0       	ldi	r25, 0x07	; 7
 8ba:	3a dc       	rcall	.-1932   	; 0x130 <vListInitialise>
 8bc:	89 e3       	ldi	r24, 0x39	; 57
 8be:	97 e0       	ldi	r25, 0x07	; 7
 8c0:	37 dc       	rcall	.-1938   	; 0x130 <vListInitialise>
 8c2:	82 e4       	ldi	r24, 0x42	; 66
 8c4:	97 e0       	ldi	r25, 0x07	; 7
 8c6:	34 dc       	rcall	.-1944   	; 0x130 <vListInitialise>
 8c8:	8e e1       	ldi	r24, 0x1E	; 30
 8ca:	97 e0       	ldi	r25, 0x07	; 7
 8cc:	31 dc       	rcall	.-1950   	; 0x130 <vListInitialise>
 8ce:	85 e1       	ldi	r24, 0x15	; 21
 8d0:	97 e0       	ldi	r25, 0x07	; 7
 8d2:	2e dc       	rcall	.-1956   	; 0x130 <vListInitialise>
 8d4:	88 e0       	ldi	r24, 0x08	; 8
 8d6:	97 e0       	ldi	r25, 0x07	; 7
 8d8:	2b dc       	rcall	.-1962   	; 0x130 <vListInitialise>
 8da:	8f ef       	ldi	r24, 0xFF	; 255
 8dc:	96 e0       	ldi	r25, 0x06	; 6
 8de:	28 dc       	rcall	.-1968   	; 0x130 <vListInitialise>
 8e0:	8e e1       	ldi	r24, 0x1E	; 30
 8e2:	97 e0       	ldi	r25, 0x07	; 7
 8e4:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
 8e8:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
 8ec:	85 e1       	ldi	r24, 0x15	; 21
 8ee:	97 e0       	ldi	r25, 0x07	; 7
 8f0:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 8f4:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 8f8:	10 c0       	rjmp	.+32     	; 0x91a <xTaskCreate+0x17a>
 8fa:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 8fe:	81 11       	cpse	r24, r1
 900:	0c c0       	rjmp	.+24     	; 0x91a <xTaskCreate+0x17a>
 902:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 906:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 90a:	96 89       	ldd	r25, Z+22	; 0x16
 90c:	8e 89       	ldd	r24, Y+22	; 0x16
 90e:	89 17       	cp	r24, r25
 910:	20 f0       	brcs	.+8      	; 0x91a <xTaskCreate+0x17a>
 912:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 916:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 91a:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxTaskNumber>
 91e:	8f 5f       	subi	r24, 0xFF	; 255
 920:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTaskNumber>
 924:	8e 89       	ldd	r24, Y+22	; 0x16
 926:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 92a:	98 17       	cp	r25, r24
 92c:	10 f4       	brcc	.+4      	; 0x932 <xTaskCreate+0x192>
 92e:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	9c 01       	movw	r18, r24
 936:	22 0f       	add	r18, r18
 938:	33 1f       	adc	r19, r19
 93a:	22 0f       	add	r18, r18
 93c:	33 1f       	adc	r19, r19
 93e:	22 0f       	add	r18, r18
 940:	33 1f       	adc	r19, r19
 942:	82 0f       	add	r24, r18
 944:	93 1f       	adc	r25, r19
 946:	b6 01       	movw	r22, r12
 948:	89 5d       	subi	r24, 0xD9	; 217
 94a:	98 4f       	sbci	r25, 0xF8	; 248
 94c:	03 dc       	rcall	.-2042   	; 0x154 <vListInsertEnd>
 94e:	0f 90       	pop	r0
 950:	0f be       	out	0x3f, r0	; 63
 952:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 956:	88 23       	and	r24, r24
 958:	59 f0       	breq	.+22     	; 0x970 <xTaskCreate+0x1d0>
 95a:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 95e:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 962:	96 89       	ldd	r25, Z+22	; 0x16
 964:	8e 89       	ldd	r24, Y+22	; 0x16
 966:	98 17       	cp	r25, r24
 968:	28 f4       	brcc	.+10     	; 0x974 <xTaskCreate+0x1d4>
 96a:	d2 dd       	rcall	.-1116   	; 0x510 <vPortYield>
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	05 c0       	rjmp	.+10     	; 0x97a <xTaskCreate+0x1da>
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	03 c0       	rjmp	.+6      	; 0x97a <xTaskCreate+0x1da>
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	01 c0       	rjmp	.+2      	; 0x97a <xTaskCreate+0x1da>
 978:	8f ef       	ldi	r24, 0xFF	; 255
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	0f 91       	pop	r16
 980:	ff 90       	pop	r15
 982:	ef 90       	pop	r14
 984:	df 90       	pop	r13
 986:	cf 90       	pop	r12
 988:	bf 90       	pop	r11
 98a:	af 90       	pop	r10
 98c:	9f 90       	pop	r9
 98e:	8f 90       	pop	r8
 990:	7f 90       	pop	r7
 992:	6f 90       	pop	r6
 994:	5f 90       	pop	r5
 996:	4f 90       	pop	r4
 998:	08 95       	ret

0000099a <vTaskStartScheduler>:
 99a:	ef 92       	push	r14
 99c:	ff 92       	push	r15
 99e:	0f 93       	push	r16
 9a0:	0f 2e       	mov	r0, r31
 9a2:	f1 ef       	ldi	r31, 0xF1	; 241
 9a4:	ef 2e       	mov	r14, r31
 9a6:	f6 e0       	ldi	r31, 0x06	; 6
 9a8:	ff 2e       	mov	r15, r31
 9aa:	f0 2d       	mov	r31, r0
 9ac:	00 e0       	ldi	r16, 0x00	; 0
 9ae:	20 e0       	ldi	r18, 0x00	; 0
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	45 e5       	ldi	r20, 0x55	; 85
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	6b e0       	ldi	r22, 0x0B	; 11
 9b8:	71 e0       	ldi	r23, 0x01	; 1
 9ba:	8b e5       	ldi	r24, 0x5B	; 91
 9bc:	93 e0       	ldi	r25, 0x03	; 3
 9be:	f0 de       	rcall	.-544    	; 0x7a0 <xTaskCreate>
 9c0:	81 30       	cpi	r24, 0x01	; 1
 9c2:	79 f4       	brne	.+30     	; 0x9e2 <vTaskStartScheduler+0x48>
 9c4:	f8 94       	cli
 9c6:	8f ef       	ldi	r24, 0xFF	; 255
 9c8:	9f ef       	ldi	r25, 0xFF	; 255
 9ca:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9ce:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <xSchedulerRunning>
 9d8:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xTickCount+0x1>
 9dc:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount>
 9e0:	5d dd       	rcall	.-1350   	; 0x49c <xPortStartScheduler>
 9e2:	0f 91       	pop	r16
 9e4:	ff 90       	pop	r15
 9e6:	ef 90       	pop	r14
 9e8:	08 95       	ret

000009ea <vTaskSuspendAll>:
 9ea:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 9ee:	8f 5f       	subi	r24, 0xFF	; 255
 9f0:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 9f4:	08 95       	ret

000009f6 <xTaskIncrementTick>:
 9f6:	cf 92       	push	r12
 9f8:	df 92       	push	r13
 9fa:	ef 92       	push	r14
 9fc:	ff 92       	push	r15
 9fe:	0f 93       	push	r16
 a00:	1f 93       	push	r17
 a02:	cf 93       	push	r28
 a04:	df 93       	push	r29
 a06:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 a0a:	81 11       	cpse	r24, r1
 a0c:	95 c0       	rjmp	.+298    	; 0xb38 <xTaskIncrementTick+0x142>
 a0e:	e0 90 fb 06 	lds	r14, 0x06FB	; 0x8006fb <xTickCount>
 a12:	f0 90 fc 06 	lds	r15, 0x06FC	; 0x8006fc <xTickCount+0x1>
 a16:	8f ef       	ldi	r24, 0xFF	; 255
 a18:	e8 1a       	sub	r14, r24
 a1a:	f8 0a       	sbc	r15, r24
 a1c:	f0 92 fc 06 	sts	0x06FC, r15	; 0x8006fc <xTickCount+0x1>
 a20:	e0 92 fb 06 	sts	0x06FB, r14	; 0x8006fb <xTickCount>
 a24:	e1 14       	cp	r14, r1
 a26:	f1 04       	cpc	r15, r1
 a28:	b1 f4       	brne	.+44     	; 0xa56 <xTaskIncrementTick+0x60>
 a2a:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 a2e:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 a32:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 a36:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 a3a:	30 93 14 07 	sts	0x0714, r19	; 0x800714 <pxDelayedTaskList+0x1>
 a3e:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <pxDelayedTaskList>
 a42:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 a46:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 a4a:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNumOfOverflows>
 a4e:	8f 5f       	subi	r24, 0xFF	; 255
 a50:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNumOfOverflows>
 a54:	11 de       	rcall	.-990    	; 0x678 <prvResetNextTaskUnblockTime>
 a56:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 a5a:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 a5e:	e8 16       	cp	r14, r24
 a60:	f9 06       	cpc	r15, r25
 a62:	10 f4       	brcc	.+4      	; 0xa68 <xTaskIncrementTick+0x72>
 a64:	d1 2c       	mov	r13, r1
 a66:	50 c0       	rjmp	.+160    	; 0xb08 <xTaskIncrementTick+0x112>
 a68:	d1 2c       	mov	r13, r1
 a6a:	cc 24       	eor	r12, r12
 a6c:	c3 94       	inc	r12
 a6e:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 a72:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 a76:	80 81       	ld	r24, Z
 a78:	81 11       	cpse	r24, r1
 a7a:	07 c0       	rjmp	.+14     	; 0xa8a <xTaskIncrementTick+0x94>
 a7c:	8f ef       	ldi	r24, 0xFF	; 255
 a7e:	9f ef       	ldi	r25, 0xFF	; 255
 a80:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 a84:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 a88:	3f c0       	rjmp	.+126    	; 0xb08 <xTaskIncrementTick+0x112>
 a8a:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 a8e:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 a92:	05 80       	ldd	r0, Z+5	; 0x05
 a94:	f6 81       	ldd	r31, Z+6	; 0x06
 a96:	e0 2d       	mov	r30, r0
 a98:	c6 81       	ldd	r28, Z+6	; 0x06
 a9a:	d7 81       	ldd	r29, Z+7	; 0x07
 a9c:	8a 81       	ldd	r24, Y+2	; 0x02
 a9e:	9b 81       	ldd	r25, Y+3	; 0x03
 aa0:	e8 16       	cp	r14, r24
 aa2:	f9 06       	cpc	r15, r25
 aa4:	28 f4       	brcc	.+10     	; 0xab0 <xTaskIncrementTick+0xba>
 aa6:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 aaa:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 aae:	2c c0       	rjmp	.+88     	; 0xb08 <xTaskIncrementTick+0x112>
 ab0:	8e 01       	movw	r16, r28
 ab2:	0e 5f       	subi	r16, 0xFE	; 254
 ab4:	1f 4f       	sbci	r17, 0xFF	; 255
 ab6:	c8 01       	movw	r24, r16
 ab8:	9f db       	rcall	.-2242   	; 0x1f8 <uxListRemove>
 aba:	8c 89       	ldd	r24, Y+20	; 0x14
 abc:	9d 89       	ldd	r25, Y+21	; 0x15
 abe:	89 2b       	or	r24, r25
 ac0:	19 f0       	breq	.+6      	; 0xac8 <xTaskIncrementTick+0xd2>
 ac2:	ce 01       	movw	r24, r28
 ac4:	0c 96       	adiw	r24, 0x0c	; 12
 ac6:	98 db       	rcall	.-2256   	; 0x1f8 <uxListRemove>
 ac8:	8e 89       	ldd	r24, Y+22	; 0x16
 aca:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 ace:	98 17       	cp	r25, r24
 ad0:	10 f4       	brcc	.+4      	; 0xad6 <xTaskIncrementTick+0xe0>
 ad2:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	9c 01       	movw	r18, r24
 ada:	22 0f       	add	r18, r18
 adc:	33 1f       	adc	r19, r19
 ade:	22 0f       	add	r18, r18
 ae0:	33 1f       	adc	r19, r19
 ae2:	22 0f       	add	r18, r18
 ae4:	33 1f       	adc	r19, r19
 ae6:	82 0f       	add	r24, r18
 ae8:	93 1f       	adc	r25, r19
 aea:	b8 01       	movw	r22, r16
 aec:	89 5d       	subi	r24, 0xD9	; 217
 aee:	98 4f       	sbci	r25, 0xF8	; 248
 af0:	31 db       	rcall	.-2462   	; 0x154 <vListInsertEnd>
 af2:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 af6:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 afa:	9e 89       	ldd	r25, Y+22	; 0x16
 afc:	86 89       	ldd	r24, Z+22	; 0x16
 afe:	98 17       	cp	r25, r24
 b00:	08 f4       	brcc	.+2      	; 0xb04 <xTaskIncrementTick+0x10e>
 b02:	b5 cf       	rjmp	.-150    	; 0xa6e <xTaskIncrementTick+0x78>
 b04:	dc 2c       	mov	r13, r12
 b06:	b3 cf       	rjmp	.-154    	; 0xa6e <xTaskIncrementTick+0x78>
 b08:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 b0c:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 b10:	86 89       	ldd	r24, Z+22	; 0x16
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	fc 01       	movw	r30, r24
 b16:	ee 0f       	add	r30, r30
 b18:	ff 1f       	adc	r31, r31
 b1a:	ee 0f       	add	r30, r30
 b1c:	ff 1f       	adc	r31, r31
 b1e:	ee 0f       	add	r30, r30
 b20:	ff 1f       	adc	r31, r31
 b22:	8e 0f       	add	r24, r30
 b24:	9f 1f       	adc	r25, r31
 b26:	fc 01       	movw	r30, r24
 b28:	e9 5d       	subi	r30, 0xD9	; 217
 b2a:	f8 4f       	sbci	r31, 0xF8	; 248
 b2c:	80 81       	ld	r24, Z
 b2e:	82 30       	cpi	r24, 0x02	; 2
 b30:	48 f0       	brcs	.+18     	; 0xb44 <xTaskIncrementTick+0x14e>
 b32:	dd 24       	eor	r13, r13
 b34:	d3 94       	inc	r13
 b36:	06 c0       	rjmp	.+12     	; 0xb44 <xTaskIncrementTick+0x14e>
 b38:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxPendedTicks>
 b3c:	8f 5f       	subi	r24, 0xFF	; 255
 b3e:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxPendedTicks>
 b42:	d1 2c       	mov	r13, r1
 b44:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 b48:	88 23       	and	r24, r24
 b4a:	11 f0       	breq	.+4      	; 0xb50 <xTaskIncrementTick+0x15a>
 b4c:	dd 24       	eor	r13, r13
 b4e:	d3 94       	inc	r13
 b50:	8d 2d       	mov	r24, r13
 b52:	df 91       	pop	r29
 b54:	cf 91       	pop	r28
 b56:	1f 91       	pop	r17
 b58:	0f 91       	pop	r16
 b5a:	ff 90       	pop	r15
 b5c:	ef 90       	pop	r14
 b5e:	df 90       	pop	r13
 b60:	cf 90       	pop	r12
 b62:	08 95       	ret

00000b64 <xTaskResumeAll>:
 b64:	df 92       	push	r13
 b66:	ef 92       	push	r14
 b68:	ff 92       	push	r15
 b6a:	0f 93       	push	r16
 b6c:	1f 93       	push	r17
 b6e:	cf 93       	push	r28
 b70:	df 93       	push	r29
 b72:	0f b6       	in	r0, 0x3f	; 63
 b74:	f8 94       	cli
 b76:	0f 92       	push	r0
 b78:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 b7c:	81 50       	subi	r24, 0x01	; 1
 b7e:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 b82:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 b86:	81 11       	cpse	r24, r1
 b88:	59 c0       	rjmp	.+178    	; 0xc3c <xTaskResumeAll+0xd8>
 b8a:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 b8e:	81 11       	cpse	r24, r1
 b90:	30 c0       	rjmp	.+96     	; 0xbf2 <xTaskResumeAll+0x8e>
 b92:	57 c0       	rjmp	.+174    	; 0xc42 <xTaskResumeAll+0xde>
 b94:	d7 01       	movw	r26, r14
 b96:	15 96       	adiw	r26, 0x05	; 5
 b98:	ed 91       	ld	r30, X+
 b9a:	fc 91       	ld	r31, X
 b9c:	16 97       	sbiw	r26, 0x06	; 6
 b9e:	c6 81       	ldd	r28, Z+6	; 0x06
 ba0:	d7 81       	ldd	r29, Z+7	; 0x07
 ba2:	ce 01       	movw	r24, r28
 ba4:	0c 96       	adiw	r24, 0x0c	; 12
 ba6:	28 db       	rcall	.-2480   	; 0x1f8 <uxListRemove>
 ba8:	8e 01       	movw	r16, r28
 baa:	0e 5f       	subi	r16, 0xFE	; 254
 bac:	1f 4f       	sbci	r17, 0xFF	; 255
 bae:	c8 01       	movw	r24, r16
 bb0:	23 db       	rcall	.-2490   	; 0x1f8 <uxListRemove>
 bb2:	8e 89       	ldd	r24, Y+22	; 0x16
 bb4:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 bb8:	98 17       	cp	r25, r24
 bba:	10 f4       	brcc	.+4      	; 0xbc0 <xTaskResumeAll+0x5c>
 bbc:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	9c 01       	movw	r18, r24
 bc4:	22 0f       	add	r18, r18
 bc6:	33 1f       	adc	r19, r19
 bc8:	22 0f       	add	r18, r18
 bca:	33 1f       	adc	r19, r19
 bcc:	22 0f       	add	r18, r18
 bce:	33 1f       	adc	r19, r19
 bd0:	82 0f       	add	r24, r18
 bd2:	93 1f       	adc	r25, r19
 bd4:	b8 01       	movw	r22, r16
 bd6:	89 5d       	subi	r24, 0xD9	; 217
 bd8:	98 4f       	sbci	r25, 0xF8	; 248
 bda:	bc da       	rcall	.-2696   	; 0x154 <vListInsertEnd>
 bdc:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 be0:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 be4:	9e 89       	ldd	r25, Y+22	; 0x16
 be6:	86 89       	ldd	r24, Z+22	; 0x16
 be8:	98 17       	cp	r25, r24
 bea:	68 f0       	brcs	.+26     	; 0xc06 <xTaskResumeAll+0xa2>
 bec:	d0 92 f7 06 	sts	0x06F7, r13	; 0x8006f7 <xYieldPending>
 bf0:	0a c0       	rjmp	.+20     	; 0xc06 <xTaskResumeAll+0xa2>
 bf2:	c0 e0       	ldi	r28, 0x00	; 0
 bf4:	d0 e0       	ldi	r29, 0x00	; 0
 bf6:	0f 2e       	mov	r0, r31
 bf8:	f8 e0       	ldi	r31, 0x08	; 8
 bfa:	ef 2e       	mov	r14, r31
 bfc:	f7 e0       	ldi	r31, 0x07	; 7
 bfe:	ff 2e       	mov	r15, r31
 c00:	f0 2d       	mov	r31, r0
 c02:	dd 24       	eor	r13, r13
 c04:	d3 94       	inc	r13
 c06:	f7 01       	movw	r30, r14
 c08:	80 81       	ld	r24, Z
 c0a:	81 11       	cpse	r24, r1
 c0c:	c3 cf       	rjmp	.-122    	; 0xb94 <xTaskResumeAll+0x30>
 c0e:	cd 2b       	or	r28, r29
 c10:	09 f0       	breq	.+2      	; 0xc14 <xTaskResumeAll+0xb0>
 c12:	32 dd       	rcall	.-1436   	; 0x678 <prvResetNextTaskUnblockTime>
 c14:	c0 91 f8 06 	lds	r28, 0x06F8	; 0x8006f8 <uxPendedTicks>
 c18:	cc 23       	and	r28, r28
 c1a:	49 f0       	breq	.+18     	; 0xc2e <xTaskResumeAll+0xca>
 c1c:	d1 e0       	ldi	r29, 0x01	; 1
 c1e:	eb de       	rcall	.-554    	; 0x9f6 <xTaskIncrementTick>
 c20:	81 11       	cpse	r24, r1
 c22:	d0 93 f7 06 	sts	0x06F7, r29	; 0x8006f7 <xYieldPending>
 c26:	c1 50       	subi	r28, 0x01	; 1
 c28:	d1 f7       	brne	.-12     	; 0xc1e <xTaskResumeAll+0xba>
 c2a:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <uxPendedTicks>
 c2e:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 c32:	88 23       	and	r24, r24
 c34:	29 f0       	breq	.+10     	; 0xc40 <xTaskResumeAll+0xdc>
 c36:	6c dc       	rcall	.-1832   	; 0x510 <vPortYield>
 c38:	81 e0       	ldi	r24, 0x01	; 1
 c3a:	03 c0       	rjmp	.+6      	; 0xc42 <xTaskResumeAll+0xde>
 c3c:	80 e0       	ldi	r24, 0x00	; 0
 c3e:	01 c0       	rjmp	.+2      	; 0xc42 <xTaskResumeAll+0xde>
 c40:	80 e0       	ldi	r24, 0x00	; 0
 c42:	0f 90       	pop	r0
 c44:	0f be       	out	0x3f, r0	; 63
 c46:	df 91       	pop	r29
 c48:	cf 91       	pop	r28
 c4a:	1f 91       	pop	r17
 c4c:	0f 91       	pop	r16
 c4e:	ff 90       	pop	r15
 c50:	ef 90       	pop	r14
 c52:	df 90       	pop	r13
 c54:	08 95       	ret

00000c56 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 c5c:	89 2b       	or	r24, r25
 c5e:	39 f0       	breq	.+14     	; 0xc6e <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 c60:	c4 de       	rcall	.-632    	; 0x9ea <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 c62:	60 e0       	ldi	r22, 0x00	; 0
 c64:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 c66:	5b dd       	rcall	.-1354   	; 0x71e <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c68:	7d df       	rcall	.-262    	; 0xb64 <xTaskResumeAll>
 c6a:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 c6c:	01 c0       	rjmp	.+2      	; 0xc70 <vTaskDelay+0x1a>
 c6e:	50 dc       	rcall	.-1888   	; 0x510 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 c70:	df 91       	pop	r29
 c72:	cf 91       	pop	r28
 c74:	08 95       	ret

00000c76 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 c76:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 c7a:	88 23       	and	r24, r24
 c7c:	21 f0       	breq	.+8      	; 0xc86 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 c7e:	81 e0       	ldi	r24, 0x01	; 1
 c80:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xYieldPending>
 c84:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 c86:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 c8a:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 c8e:	82 2f       	mov	r24, r18
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	fc 01       	movw	r30, r24
 c94:	ee 0f       	add	r30, r30
 c96:	ff 1f       	adc	r31, r31
 c98:	ee 0f       	add	r30, r30
 c9a:	ff 1f       	adc	r31, r31
 c9c:	ee 0f       	add	r30, r30
 c9e:	ff 1f       	adc	r31, r31
 ca0:	e8 0f       	add	r30, r24
 ca2:	f9 1f       	adc	r31, r25
 ca4:	e9 5d       	subi	r30, 0xD9	; 217
 ca6:	f8 4f       	sbci	r31, 0xF8	; 248
 ca8:	30 81       	ld	r19, Z
 caa:	31 11       	cpse	r19, r1
 cac:	11 c0       	rjmp	.+34     	; 0xcd0 <vTaskSwitchContext+0x5a>
 cae:	21 50       	subi	r18, 0x01	; 1
 cb0:	82 2f       	mov	r24, r18
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	fc 01       	movw	r30, r24
 cb6:	ee 0f       	add	r30, r30
 cb8:	ff 1f       	adc	r31, r31
 cba:	ee 0f       	add	r30, r30
 cbc:	ff 1f       	adc	r31, r31
 cbe:	ee 0f       	add	r30, r30
 cc0:	ff 1f       	adc	r31, r31
 cc2:	e8 0f       	add	r30, r24
 cc4:	f9 1f       	adc	r31, r25
 cc6:	e9 5d       	subi	r30, 0xD9	; 217
 cc8:	f8 4f       	sbci	r31, 0xF8	; 248
 cca:	30 81       	ld	r19, Z
 ccc:	33 23       	and	r19, r19
 cce:	79 f3       	breq	.-34     	; 0xcae <vTaskSwitchContext+0x38>
 cd0:	ac 01       	movw	r20, r24
 cd2:	44 0f       	add	r20, r20
 cd4:	55 1f       	adc	r21, r21
 cd6:	44 0f       	add	r20, r20
 cd8:	55 1f       	adc	r21, r21
 cda:	44 0f       	add	r20, r20
 cdc:	55 1f       	adc	r21, r21
 cde:	48 0f       	add	r20, r24
 ce0:	59 1f       	adc	r21, r25
 ce2:	da 01       	movw	r26, r20
 ce4:	a9 5d       	subi	r26, 0xD9	; 217
 ce6:	b8 4f       	sbci	r27, 0xF8	; 248
 ce8:	11 96       	adiw	r26, 0x01	; 1
 cea:	ed 91       	ld	r30, X+
 cec:	fc 91       	ld	r31, X
 cee:	12 97       	sbiw	r26, 0x02	; 2
 cf0:	02 80       	ldd	r0, Z+2	; 0x02
 cf2:	f3 81       	ldd	r31, Z+3	; 0x03
 cf4:	e0 2d       	mov	r30, r0
 cf6:	12 96       	adiw	r26, 0x02	; 2
 cf8:	fc 93       	st	X, r31
 cfa:	ee 93       	st	-X, r30
 cfc:	11 97       	sbiw	r26, 0x01	; 1
 cfe:	46 5d       	subi	r20, 0xD6	; 214
 d00:	58 4f       	sbci	r21, 0xF8	; 248
 d02:	e4 17       	cp	r30, r20
 d04:	f5 07       	cpc	r31, r21
 d06:	29 f4       	brne	.+10     	; 0xd12 <vTaskSwitchContext+0x9c>
 d08:	42 81       	ldd	r20, Z+2	; 0x02
 d0a:	53 81       	ldd	r21, Z+3	; 0x03
 d0c:	fd 01       	movw	r30, r26
 d0e:	52 83       	std	Z+2, r21	; 0x02
 d10:	41 83       	std	Z+1, r20	; 0x01
 d12:	fc 01       	movw	r30, r24
 d14:	ee 0f       	add	r30, r30
 d16:	ff 1f       	adc	r31, r31
 d18:	ee 0f       	add	r30, r30
 d1a:	ff 1f       	adc	r31, r31
 d1c:	ee 0f       	add	r30, r30
 d1e:	ff 1f       	adc	r31, r31
 d20:	8e 0f       	add	r24, r30
 d22:	9f 1f       	adc	r25, r31
 d24:	fc 01       	movw	r30, r24
 d26:	e9 5d       	subi	r30, 0xD9	; 217
 d28:	f8 4f       	sbci	r31, 0xF8	; 248
 d2a:	01 80       	ldd	r0, Z+1	; 0x01
 d2c:	f2 81       	ldd	r31, Z+2	; 0x02
 d2e:	e0 2d       	mov	r30, r0
 d30:	86 81       	ldd	r24, Z+6	; 0x06
 d32:	97 81       	ldd	r25, Z+7	; 0x07
 d34:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxCurrentTCB+0x1>
 d38:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxCurrentTCB>
 d3c:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <uxTopReadyPriority>
 d40:	08 95       	ret

00000d42 <_exit>:
 d42:	f8 94       	cli

00000d44 <__stop_program>:
 d44:	ff cf       	rjmp	.-2      	; 0xd44 <__stop_program>
