
Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000002ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f8  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089d  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003da  00000000  00000000  00001629  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000199  00000000  00000000  00001f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	87 d0       	rcall	.+270    	; 0x1d2 <main>
  c4:	b4 c0       	rjmp	.+360    	; 0x22e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
  dc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
  e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
  e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 11e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 122:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 126:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 144:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 148:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 14c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 150:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 15e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 162:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 166:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 18c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 190:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 194:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <transmit_data>:
        TimerFlag = 0;
    }
}

void transmit_data(uc data) {
	PORTD |= SRCLR;
 1aa:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD &= 0xFD;
 1ac:	59 98       	cbi	0x0b, 1	; 11
 1ae:	98 e0       	ldi	r25, 0x08	; 8
	uc sendBit = 0x00;
	for(uc i = 0; i < 8; ++i) {
		//SRCLR set to 1 allowing for data to be sent
		//Also clears SRCLK in preparation for sending data
		PORTD &= 0xFB;
 1b0:	5a 98       	cbi	0x0b, 2	; 11
		//SER = next bit of data to be sent
		sendBit = 0x01 & data;
 1b2:	28 2f       	mov	r18, r24
 1b4:	21 70       	andi	r18, 0x01	; 1
		//Shift data over
		data = data >> 1;
 1b6:	86 95       	lsr	r24
		//Set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		if(sendBit) {
 1b8:	22 23       	and	r18, r18
 1ba:	11 f0       	breq	.+4      	; 0x1c0 <transmit_data+0x16>
			PORTD |= 0x01;
 1bc:	58 9a       	sbi	0x0b, 0	; 11
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <transmit_data+0x18>
		}
		else {
			PORTD &= 0xFE;
 1c0:	58 98       	cbi	0x0b, 0	; 11
		}
	
		PORTD |= (SRCLK);
 1c2:	5a 9a       	sbi	0x0b, 2	; 11
 1c4:	91 50       	subi	r25, 0x01	; 1

void transmit_data(uc data) {
	PORTD |= SRCLR;
	PORTD &= 0xFD;
	uc sendBit = 0x00;
	for(uc i = 0; i < 8; ++i) {
 1c6:	a1 f7       	brne	.-24     	; 0x1b0 <transmit_data+0x6>
		}
	
		PORTD |= (SRCLK);
	}
	//Set RCLK = 1. Rising edge copies data from the "Shift" register to the "Storage" register
	PORTD |= (SRCLR | RCLK);
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	8a 60       	ori	r24, 0x0A	; 10
 1cc:	8b b9       	out	0x0b, r24	; 11
	//Clear all lines in preparation of a new transmission
	PORTD = 0x00;
 1ce:	1b b8       	out	0x0b, r1	; 11
 1d0:	08 95       	ret

000001d2 <main>:
void transmit_data(uc);
void clear_data(void);

int main(void)
{
    DDRA = 0x00; PORTA = 0xFF;
 1d2:	11 b8       	out	0x01, r1	; 1
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 1d8:	84 b9       	out	0x04, r24	; 4
 1da:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 1dc:	8a b9       	out	0x0a, r24	; 10
 1de:	1b b8       	out	0x0b, r1	; 11
    
	uc shiftValue = 0x00;
    uc incrementButton = 0x00;
    uc decrementButton = 0x00;

    TimerSet(500);
 1e0:	64 ef       	ldi	r22, 0xF4	; 244
 1e2:	71 e0       	ldi	r23, 0x01	; 1
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	6f df       	rcall	.-290    	; 0xc8 <TimerSet>
	TimerOn();
 1ea:	7f df       	rcall	.-258    	; 0xea <TimerOn>
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
{
    DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;
	DDRD = 0xFF; PORTD = 0x00;
    
	uc shiftValue = 0x00;
 1ee:	90 b1       	in	r25, 0x00	; 0
    TimerSet(500);
	TimerOn();
	
    while (1) 
    {
		incrementButton = ~PINA & 0x01;//Increment Button
 1f0:	80 b1       	in	r24, 0x00	; 0
        decrementButton = ~PINA & 0x02;//Decrement Button
 1f2:	80 95       	com	r24
 1f4:	82 70       	andi	r24, 0x02	; 2
 1f6:	90 fd       	sbrc	r25, 0

        if(incrementButton && decrementButton) {
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <main+0x40>
 1fa:	88 23       	and	r24, r24
 1fc:	21 f0       	breq	.+8      	; 0x206 <main+0x34>
            shiftValue = 0x00;
            transmit_data(shiftValue);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	d4 df       	rcall	.-88     	; 0x1aa <transmit_data>
 202:	c0 e0       	ldi	r28, 0x00	; 0
    {
		incrementButton = ~PINA & 0x01;//Increment Button
        decrementButton = ~PINA & 0x02;//Decrement Button

        if(incrementButton && decrementButton) {
            shiftValue = 0x00;
 204:	0d c0       	rjmp	.+26     	; 0x220 <main+0x4e>
            transmit_data(shiftValue);
 206:	cf 3f       	cpi	r28, 0xFF	; 255
        }
		else if(incrementButton && shiftValue < 0xFF) {
 208:	59 f0       	breq	.+22     	; 0x220 <main+0x4e>
			shiftValue += 1;
 20a:	cf 5f       	subi	r28, 0xFF	; 255
            transmit_data(shiftValue);
 20c:	8c 2f       	mov	r24, r28
 20e:	cd df       	rcall	.-102    	; 0x1aa <transmit_data>
 210:	07 c0       	rjmp	.+14     	; 0x220 <main+0x4e>
 212:	88 23       	and	r24, r24
		}
        else if(decrementButton && shiftValue > 0x00) {
 214:	29 f0       	breq	.+10     	; 0x220 <main+0x4e>
 216:	cc 23       	and	r28, r28
 218:	19 f0       	breq	.+6      	; 0x220 <main+0x4e>
            shiftValue -= 1;
 21a:	c1 50       	subi	r28, 0x01	; 1
            transmit_data(shiftValue);
 21c:	8c 2f       	mov	r24, r28
 21e:	c5 df       	rcall	.-118    	; 0x1aa <transmit_data>
 220:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
        }
        while(!TimerFlag);
 224:	88 23       	and	r24, r24
 226:	e1 f3       	breq	.-8      	; 0x220 <main+0x4e>
 228:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
        TimerFlag = 0;
 22c:	e0 cf       	rjmp	.-64     	; 0x1ee <main+0x1c>

0000022e <_exit>:
    }
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
