
Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000044a  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800104  00800104  000004e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c96  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a5  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f0  00000000  00000000  00001bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b4  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b2  00000000  00000000  000027ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002c5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	af c0       	rjmp	.+350    	; 0x194 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e4       	ldi	r30, 0x4A	; 74
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 32       	cpi	r26, 0x25	; 37
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a4 d0       	rcall	.+328    	; 0x20c <main>
  c4:	c0 c1       	rjmp	.+896    	; 0x446 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SMTick1>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	b1 f0       	breq	.+44     	; 0xfa <SMTick1+0x32>
  ce:	1c f4       	brge	.+6      	; 0xd6 <SMTick1+0xe>
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <SMTick1+0x1c>
  d4:	08 95       	ret
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	91 05       	cpc	r25, r1
  da:	b9 f0       	breq	.+46     	; 0x10a <SMTick1+0x42>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	e1 f0       	breq	.+56     	; 0x11a <SMTick1+0x52>
  e2:	08 95       	ret
  e4:	80 b1       	in	r24, 0x00	; 0
  e6:	80 95       	com	r24
  e8:	81 70       	andi	r24, 0x01	; 1
  ea:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <cycleButtonUp>
  ee:	80 b1       	in	r24, 0x00	; 0
  f0:	80 95       	com	r24
  f2:	82 70       	andi	r24, 0x02	; 2
  f4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <cycleButtonDown>
  f8:	08 95       	ret
  fa:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <cycleState>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	98 f4       	brcc	.+38     	; 0x128 <SMTick1+0x60>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <cycleState>
 108:	08 95       	ret
 10a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <cycleState>
 10e:	88 23       	and	r24, r24
 110:	59 f0       	breq	.+22     	; 0x128 <SMTick1+0x60>
 112:	81 50       	subi	r24, 0x01	; 1
 114:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <cycleState>
 118:	08 95       	ret
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <toggleSystem>
 120:	91 11       	cpse	r25, r1
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <toggleSystem>
 128:	08 95       	ret

0000012a <TimerSet>:
 12a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 12e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 132:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 136:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 13a:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <_avr_timer_cntcurr>
 13e:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <_avr_timer_cntcurr+0x1>
 142:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr+0x2>
 146:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x3>
 14a:	08 95       	ret

0000014c <TimerOn>:
 14c:	8b e0       	ldi	r24, 0x0B	; 11
 14e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 152:	8d e7       	ldi	r24, 0x7D	; 125
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 15a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 164:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 168:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 174:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 178:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 17c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 180:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 184:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 188:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
 18c:	8f b7       	in	r24, 0x3f	; 63
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	8f bf       	out	0x3f, r24	; 63
 192:	08 95       	ret

00000194 <__vector_13>:
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_avr_timer_cntcurr>
 1aa:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <_avr_timer_cntcurr+0x1>
 1ae:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <_avr_timer_cntcurr+0x2>
 1b2:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <_avr_timer_cntcurr+0x3>
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	a1 09       	sbc	r26, r1
 1ba:	b1 09       	sbc	r27, r1
 1bc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 1c0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 1c4:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 1c8:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
 1cc:	89 2b       	or	r24, r25
 1ce:	8a 2b       	or	r24, r26
 1d0:	8b 2b       	or	r24, r27
 1d2:	99 f4       	brne	.+38     	; 0x1fa <__vector_13+0x66>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <TimerFlag>
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1e6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ea:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 1ee:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 1f2:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 1f6:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <main>:
        default: state = OFF;
    }
}

int main(void)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	00 d0       	rcall	.+0      	; 0x212 <main+0x6>
 212:	00 d0       	rcall	.+0      	; 0x214 <main+0x8>
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0x00; PORTA = 0xFF;
 218:	11 b8       	out	0x01, r1	; 1
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 21e:	84 b9       	out	0x04, r24	; 4
 220:	15 b8       	out	0x05, r1	; 5
 222:	0f 2e       	mov	r0, r31
 224:	f4 e6       	ldi	r31, 0x64	; 100
 226:	cf 2e       	mov	r12, r31
 228:	d1 2c       	mov	r13, r1
 22a:	e1 2c       	mov	r14, r1
 22c:	f1 2c       	mov	r15, r1
 22e:	f0 2d       	mov	r31, r0
 230:	52 e3       	ldi	r21, 0x32	; 50
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <main+0x32>
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 23a:	6b 01       	movw	r12, r22
 23c:	7c 01       	movw	r14, r24
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 23e:	65 2f       	mov	r22, r21
 240:	74 2f       	mov	r23, r20
 242:	83 2f       	mov	r24, r19
 244:	92 2f       	mov	r25, r18
 246:	a7 01       	movw	r20, r14
 248:	96 01       	movw	r18, r12
 24a:	db d0       	rcall	.+438    	; 0x402 <__udivmodsi4>
 24c:	5c 2d       	mov	r21, r12
 24e:	4d 2d       	mov	r20, r13
 250:	3e 2d       	mov	r19, r14
 252:	2f 2d       	mov	r18, r15
		if( c == 0 ) { return b; }
 254:	61 15       	cp	r22, r1
 256:	71 05       	cpc	r23, r1
 258:	81 05       	cpc	r24, r1
 25a:	91 05       	cpc	r25, r1
 25c:	71 f7       	brne	.-36     	; 0x23a <main+0x2e>
 25e:	dd 24       	eor	r13, r13
 260:	ee 24       	eor	r14, r14
 262:	ff 24       	eor	r15, r15
	//Calculating GCD
	uc GCD = findGCD(SMTick1_calc, SMTick2_calc);
	//GCD = findGCD(GCD, SMTick3_calc);
	
	//Recalculate GCD periods for scheduler
	ul int SMTick1_period = SMTick1_calc/GCD;
 264:	62 e3       	ldi	r22, 0x32	; 50
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	a7 01       	movw	r20, r14
 26e:	96 01       	movw	r18, r12
 270:	c8 d0       	rcall	.+400    	; 0x402 <__udivmodsi4>
 272:	49 01       	movw	r8, r18
 274:	5a 01       	movw	r10, r20
	ul int SMTick2_period = SMTick2_calc/GCD;
 276:	64 e6       	ldi	r22, 0x64	; 100
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	a7 01       	movw	r20, r14
 280:	96 01       	movw	r18, r12
 282:	bf d0       	rcall	.+382    	; 0x402 <__udivmodsi4>
	
	//Array of Tasks
	static task task1;
	static task task2;
	//static task task3;
	task *tasks[] = { &task1, &task2 };
 284:	af e0       	ldi	r26, 0x0F	; 15
 286:	b1 e0       	ldi	r27, 0x01	; 1
 288:	ba 83       	std	Y+2, r27	; 0x02
 28a:	a9 83       	std	Y+1, r26	; 0x01
 28c:	e4 e0       	ldi	r30, 0x04	; 4
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	fc 83       	std	Y+4, r31	; 0x04
 292:	eb 83       	std	Y+3, r30	; 0x03
	const us numTasks = sizeof(tasks)/sizeof(task*);
	
	//Task 1
	task1.state = -1; //Init
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	8c 93       	st	X, r24
	task1.period = SMTick1_period;
 298:	11 96       	adiw	r26, 0x01	; 1
 29a:	8d 92       	st	X+, r8
 29c:	9d 92       	st	X+, r9
 29e:	ad 92       	st	X+, r10
 2a0:	bc 92       	st	X, r11
 2a2:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = SMTick1_period;
 2a4:	15 96       	adiw	r26, 0x05	; 5
 2a6:	8d 92       	st	X+, r8
 2a8:	9d 92       	st	X+, r9
 2aa:	ad 92       	st	X+, r10
 2ac:	bc 92       	st	X, r11
 2ae:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &SMTick1;
 2b0:	64 e6       	ldi	r22, 0x64	; 100
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	1a 96       	adiw	r26, 0x0a	; 10
 2b6:	7c 93       	st	X, r23
 2b8:	6e 93       	st	-X, r22
 2ba:	19 97       	sbiw	r26, 0x09	; 9

    //Task 2
	task2.state = -1; //Init
 2bc:	80 83       	st	Z, r24
	task2.period = SMTick2_period;
 2be:	21 83       	std	Z+1, r18	; 0x01
 2c0:	32 83       	std	Z+2, r19	; 0x02
 2c2:	43 83       	std	Z+3, r20	; 0x03
 2c4:	54 83       	std	Z+4, r21	; 0x04
	task2.elapsedTime = SMTick2_period;
 2c6:	25 83       	std	Z+5, r18	; 0x05
 2c8:	36 83       	std	Z+6, r19	; 0x06
 2ca:	47 83       	std	Z+7, r20	; 0x07
 2cc:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &SMTick2;
 2ce:	88 ec       	ldi	r24, 0xC8	; 200
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	92 87       	std	Z+10, r25	; 0x0a

    TimerSet(GCD);
 2d4:	81 87       	std	Z+9, r24	; 0x09
 2d6:	c7 01       	movw	r24, r14
 2d8:	b6 01       	movw	r22, r12
    TimerOn();
 2da:	27 df       	rcall	.-434    	; 0x12a <TimerSet>
 2dc:	37 df       	rcall	.-402    	; 0x14c <TimerOn>

    shiftValue = 0x00;
 2de:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <shiftValue>
 2e2:	7e 01       	movw	r14, r28
 2e4:	85 e0       	ldi	r24, 0x05	; 5
 2e6:	e8 0e       	add	r14, r24
 2e8:	f1 1c       	adc	r15, r1
 2ea:	de 01       	movw	r26, r28
 2ec:	11 96       	adiw	r26, 0x01	; 1
 2ee:	6d 01       	movw	r12, r26
    while (1) 
    {
        //Scheduler code
		for (i = 0; i < numTasks; i++) {
			//Task ready to tick
			if (tasks[i]->elapsedTime >= tasks[i]->period) {
 2f0:	f6 01       	movw	r30, r12
 2f2:	01 91       	ld	r16, Z+
 2f4:	11 91       	ld	r17, Z+
 2f6:	6f 01       	movw	r12, r30
 2f8:	d8 01       	movw	r26, r16
 2fa:	15 96       	adiw	r26, 0x05	; 5
 2fc:	4d 91       	ld	r20, X+
 2fe:	5d 91       	ld	r21, X+
 300:	6d 91       	ld	r22, X+
 302:	7c 91       	ld	r23, X
 304:	18 97       	sbiw	r26, 0x08	; 8
 306:	11 96       	adiw	r26, 0x01	; 1
 308:	8d 91       	ld	r24, X+
 30a:	9d 91       	ld	r25, X+
 30c:	0d 90       	ld	r0, X+
 30e:	bc 91       	ld	r27, X
 310:	a0 2d       	mov	r26, r0
 312:	48 17       	cp	r20, r24
 314:	59 07       	cpc	r21, r25
 316:	6a 07       	cpc	r22, r26
 318:	7b 07       	cpc	r23, r27
 31a:	80 f0       	brcs	.+32     	; 0x33c <main+0x130>
				//Setup next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 31c:	f8 01       	movw	r30, r16
 31e:	80 81       	ld	r24, Z
 320:	01 84       	ldd	r0, Z+9	; 0x09
 322:	f2 85       	ldd	r31, Z+10	; 0x0a
 324:	e0 2d       	mov	r30, r0
 326:	08 2e       	mov	r0, r24
 328:	00 0c       	add	r0, r0
 32a:	99 0b       	sbc	r25, r25
 32c:	09 95       	icall
 32e:	d8 01       	movw	r26, r16
 330:	8c 93       	st	X, r24
				//Reset elapsed time for next tick
				tasks[i]->elapsedTime = 0;
 332:	f8 01       	movw	r30, r16
 334:	15 82       	std	Z+5, r1	; 0x05
 336:	16 82       	std	Z+6, r1	; 0x06
 338:	17 82       	std	Z+7, r1	; 0x07
 33a:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime +=1;
 33c:	f8 01       	movw	r30, r16
 33e:	85 81       	ldd	r24, Z+5	; 0x05
 340:	96 81       	ldd	r25, Z+6	; 0x06
 342:	a7 81       	ldd	r26, Z+7	; 0x07
 344:	b0 85       	ldd	r27, Z+8	; 0x08
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	a1 1d       	adc	r26, r1
 34a:	b1 1d       	adc	r27, r1
 34c:	85 83       	std	Z+5, r24	; 0x05
 34e:	96 83       	std	Z+6, r25	; 0x06
 350:	a7 83       	std	Z+7, r26	; 0x07
 352:	b0 87       	std	Z+8, r27	; 0x08
    shiftValue = 0x00;
    us i;//Loop iterator
    while (1) 
    {
        //Scheduler code
		for (i = 0; i < numTasks; i++) {
 354:	ce 14       	cp	r12, r14
 356:	df 04       	cpc	r13, r15
 358:	59 f6       	brne	.-106    	; 0x2f0 <main+0xe4>
				//Reset elapsed time for next tick
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime +=1;
		}
		while(!TimerFlag);
 35a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <TimerFlag>
 35e:	88 23       	and	r24, r24
 360:	e1 f3       	breq	.-8      	; 0x35a <main+0x14e>
		TimerFlag = 0;
 362:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <TimerFlag>
    }
 366:	c1 cf       	rjmp	.-126    	; 0x2ea <main+0xde>

00000368 <transmit_data>:
}

void transmit_data(uc data) {
	PORTD |= SRCLR;
 368:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD &= 0xFD;
 36a:	59 98       	cbi	0x0b, 1	; 11
 36c:	98 e0       	ldi	r25, 0x08	; 8
	uc sendBit = 0x00;
	for(uc i = 0; i < 8; ++i) {
		//SRCLR set to 1 allowing for data to be sent
		//Also clears SRCLK in preparation for sending data
		PORTD &= 0xFB;
 36e:	5a 98       	cbi	0x0b, 2	; 11
		//SER = next bit of data to be sent
		sendBit = 0x01 & data;
 370:	28 2f       	mov	r18, r24
 372:	21 70       	andi	r18, 0x01	; 1
		//Shift data over
		data = data >> 1;
 374:	86 95       	lsr	r24
		//Set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		if(sendBit) {
 376:	22 23       	and	r18, r18
 378:	11 f0       	breq	.+4      	; 0x37e <transmit_data+0x16>
			PORTD |= 0x01;
 37a:	58 9a       	sbi	0x0b, 0	; 11
 37c:	01 c0       	rjmp	.+2      	; 0x380 <transmit_data+0x18>
		}
		else {
			PORTD &= 0xFE;
 37e:	58 98       	cbi	0x0b, 0	; 11
		}
		
		PORTD |= (SRCLK);
 380:	5a 9a       	sbi	0x0b, 2	; 11
 382:	91 50       	subi	r25, 0x01	; 1

void transmit_data(uc data) {
	PORTD |= SRCLR;
	PORTD &= 0xFD;
	uc sendBit = 0x00;
	for(uc i = 0; i < 8; ++i) {
 384:	a1 f7       	brne	.-24     	; 0x36e <transmit_data+0x6>
		}
		
		PORTD |= (SRCLK);
	}
	//Set RCLK = 1. Rising edge copies data from the "Shift" register to the "Storage" register
	PORTD |= (SRCLR | RCLK);
 386:	8b b1       	in	r24, 0x0b	; 11
 388:	8a 60       	ori	r24, 0x0A	; 10
 38a:	8b b9       	out	0x0b, r24	; 11
	//Clear all lines in preparation of a new transmission
	PORTD = 0x00;
 38c:	1b b8       	out	0x0b, r1	; 11
 38e:	08 95       	ret

00000390 <SMTick2>:
enum transmition { OFF, CYCLE0, CYCLE1, CYCLE2 };

//Transmition
int SMTick2(int state) {
    //Action
    switch(state) {
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	91 05       	cpc	r25, r1
 394:	71 f0       	breq	.+28     	; 0x3b2 <SMTick2+0x22>
 396:	1c f4       	brge	.+6      	; 0x39e <SMTick2+0xe>
 398:	00 97       	sbiw	r24, 0x00	; 0
 39a:	41 f0       	breq	.+16     	; 0x3ac <SMTick2+0x1c>
 39c:	08 95       	ret
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	91 05       	cpc	r25, r1
 3a2:	a9 f0       	breq	.+42     	; 0x3ce <SMTick2+0x3e>
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	91 05       	cpc	r25, r1
 3a8:	e9 f0       	breq	.+58     	; 0x3e4 <SMTick2+0x54>
 3aa:	08 95       	ret
        case OFF:
            transmit_data(0x00);//Turn off all LEDs
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	dc cf       	rjmp	.-72     	; 0x368 <transmit_data>
            break;
 3b0:	08 95       	ret
        case CYCLE0: 
            if(shiftValue < 0xFF) {
 3b2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <shiftValue>
 3b6:	8f 3f       	cpi	r24, 0xFF	; 255
 3b8:	21 f0       	breq	.+8      	; 0x3c2 <SMTick2+0x32>
                shiftValue = shiftValue << 1;
 3ba:	88 0f       	add	r24, r24
 3bc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <shiftValue>
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <SMTick2+0x36>
            } else {
                shiftValue = 0;
 3c2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <shiftValue>
            }
            transmit_data(shiftValue);
 3c6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <shiftValue>
 3ca:	ce cf       	rjmp	.-100    	; 0x368 <transmit_data>
            break;
 3cc:	08 95       	ret
        case CYCLE1: 
            if(shiftValue > 0x00) {
 3ce:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <shiftValue>
 3d2:	88 23       	and	r24, r24
 3d4:	19 f0       	breq	.+6      	; 0x3dc <SMTick2+0x4c>
                shiftValue = shiftValue >> 1;
 3d6:	86 95       	lsr	r24
 3d8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <shiftValue>
            } else {
                shiftValue = 0;
            }
            transmit_data(shiftValue);
 3dc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <shiftValue>
 3e0:	c3 cf       	rjmp	.-122    	; 0x368 <transmit_data>
            break;
 3e2:	08 95       	ret
        case CYCLE2: 
            if(shiftValue == 0xF0) {
 3e4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <shiftValue>
 3e8:	80 3f       	cpi	r24, 0xF0	; 240
 3ea:	21 f4       	brne	.+8      	; 0x3f4 <SMTick2+0x64>
                shiftValue = 0x0F;
 3ec:	8f e0       	ldi	r24, 0x0F	; 15
 3ee:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <shiftValue>
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <SMTick2+0x6a>
            } else {
                shiftValue = 0xF0;
 3f4:	80 ef       	ldi	r24, 0xF0	; 240
 3f6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <shiftValue>
            }
            transmit_data(shiftValue);
 3fa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <shiftValue>
 3fe:	b4 cf       	rjmp	.-152    	; 0x368 <transmit_data>
                default: state = CYCLE0; break;
            }
            break;
        default: state = OFF;
    }
}
 400:	08 95       	ret

00000402 <__udivmodsi4>:
 402:	a1 e2       	ldi	r26, 0x21	; 33
 404:	1a 2e       	mov	r1, r26
 406:	aa 1b       	sub	r26, r26
 408:	bb 1b       	sub	r27, r27
 40a:	fd 01       	movw	r30, r26
 40c:	0d c0       	rjmp	.+26     	; 0x428 <__udivmodsi4_ep>

0000040e <__udivmodsi4_loop>:
 40e:	aa 1f       	adc	r26, r26
 410:	bb 1f       	adc	r27, r27
 412:	ee 1f       	adc	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	a2 17       	cp	r26, r18
 418:	b3 07       	cpc	r27, r19
 41a:	e4 07       	cpc	r30, r20
 41c:	f5 07       	cpc	r31, r21
 41e:	20 f0       	brcs	.+8      	; 0x428 <__udivmodsi4_ep>
 420:	a2 1b       	sub	r26, r18
 422:	b3 0b       	sbc	r27, r19
 424:	e4 0b       	sbc	r30, r20
 426:	f5 0b       	sbc	r31, r21

00000428 <__udivmodsi4_ep>:
 428:	66 1f       	adc	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	88 1f       	adc	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	1a 94       	dec	r1
 432:	69 f7       	brne	.-38     	; 0x40e <__udivmodsi4_loop>
 434:	60 95       	com	r22
 436:	70 95       	com	r23
 438:	80 95       	com	r24
 43a:	90 95       	com	r25
 43c:	9b 01       	movw	r18, r22
 43e:	ac 01       	movw	r20, r24
 440:	bd 01       	movw	r22, r26
 442:	cf 01       	movw	r24, r30
 444:	08 95       	ret

00000446 <_exit>:
 446:	f8 94       	cli

00000448 <__stop_program>:
 448:	ff cf       	rjmp	.-2      	; 0x448 <__stop_program>
