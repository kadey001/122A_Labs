
part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001be  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  00000256  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095d  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000846  00000000  00000000  00000c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000334  00000000  00000000  000014b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000458  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000138  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	5a c0       	rjmp	.+180    	; 0xea <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4f d0       	rcall	.+158    	; 0x162 <main>
  c4:	7a c0       	rjmp	.+244    	; 0x1ba <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
  dc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
  e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
  e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
  e8:	08 95       	ret

000000ea <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
  fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 100:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 104:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 108:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	a1 09       	sbc	r26, r1
 110:	b1 09       	sbc	r27, r1
 112:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 116:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 11a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 11e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 122:	89 2b       	or	r24, r25
 124:	8a 2b       	or	r24, r26
 126:	8b 2b       	or	r24, r27
 128:	99 f4       	brne	.+38     	; 0x150 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 138:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 13c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 140:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 144:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 148:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 14c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <main>:

#define uc unsigned char

int main(void) {
	/* Insert DDR and PORT initializations */
	DDRB = 0xFF; PORTB = 0x00;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	84 b9       	out	0x04, r24	; 4
 166:	15 b8       	out	0x05, r1	; 5
	/* Insert your solution below */
	TimerSet(500);
 168:	64 ef       	ldi	r22, 0xF4	; 244
 16a:	71 e0       	ldi	r23, 0x01	; 1
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ab df       	rcall	.-170    	; 0xc8 <TimerSet>
	
	uc output = 0x00;
	uc mainSequence = 0x01;
	uc flashingLED = 0x00;
	uc flashingLEDTick = 0x00;
 172:	20 e0       	ldi	r18, 0x00	; 0
	DDRB = 0xFF; PORTB = 0x00;
	/* Insert your solution below */
	TimerSet(500);
	
	uc output = 0x00;
	uc mainSequence = 0x01;
 174:	81 e0       	ldi	r24, 0x01	; 1
	uc flashingLEDTick = 0x00;

	while (1) {
		output = mainSequence;
		switch(mainSequence) {
			case 0x01: mainSequence = 0x02; break;
 176:	92 e0       	ldi	r25, 0x02	; 2
	/* Insert your solution below */
	TimerSet(500);
	
	uc output = 0x00;
	uc mainSequence = 0x01;
	uc flashingLED = 0x00;
 178:	40 e0       	ldi	r20, 0x00	; 0
	uc flashingLEDTick = 0x00;

	while (1) {
		output = mainSequence;
		switch(mainSequence) {
			case 0x01: mainSequence = 0x02; break;
 17a:	72 e0       	ldi	r23, 0x02	; 2
			case 0x02: mainSequence = 0x04; break;
 17c:	64 e0       	ldi	r22, 0x04	; 4
			case 0x04: mainSequence = 0x01; break;
 17e:	51 e0       	ldi	r21, 0x01	; 1
			default: mainSequence = 0x01; break;
		}

		if(flashingLEDTick == 2) {
			switch(flashingLED) {
				case 0x00: flashingLED = 0x08; break;
 180:	e8 e0       	ldi	r30, 0x08	; 8
 182:	0a c0       	rjmp	.+20     	; 0x198 <main+0x36>
	while (1) {
		output = mainSequence;
		switch(mainSequence) {
			case 0x01: mainSequence = 0x02; break;
			case 0x02: mainSequence = 0x04; break;
			case 0x04: mainSequence = 0x01; break;
 184:	35 2f       	mov	r19, r21
			default: mainSequence = 0x01; break;
		}

		if(flashingLEDTick == 2) {
 186:	22 30       	cpi	r18, 0x02	; 2
 188:	29 f4       	brne	.+10     	; 0x194 <main+0x32>
			switch(flashingLED) {
 18a:	44 23       	and	r20, r20
 18c:	11 f0       	breq	.+4      	; 0x192 <main+0x30>
				case 0x00: flashingLED = 0x08; break;
				case 0x08: flashingLED = 0x00; break;
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	01 c0       	rjmp	.+2      	; 0x194 <main+0x32>
			default: mainSequence = 0x01; break;
		}

		if(flashingLEDTick == 2) {
			switch(flashingLED) {
				case 0x00: flashingLED = 0x08; break;
 192:	4e 2f       	mov	r20, r30
 194:	89 2f       	mov	r24, r25
				case 0x08: flashingLED = 0x00; break;
 196:	93 2f       	mov	r25, r19
				default: flashingLED = 0x00; break;
			}
		}
		output = output | flashingLED;
 198:	84 2b       	or	r24, r20
		PORTB = output;
 19a:	85 b9       	out	0x05, r24	; 5
		flashingLEDTick++;
 19c:	2f 5f       	subi	r18, 0xFF	; 255
		while(!TimerFlag);
 19e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
 1a2:	88 23       	and	r24, r24
 1a4:	e1 f3       	breq	.-8      	; 0x19e <main+0x3c>
		TimerFlag = 0;
 1a6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
	uc flashingLED = 0x00;
	uc flashingLEDTick = 0x00;

	while (1) {
		output = mainSequence;
		switch(mainSequence) {
 1aa:	91 30       	cpi	r25, 0x01	; 1
 1ac:	21 f0       	breq	.+8      	; 0x1b6 <main+0x54>
 1ae:	92 30       	cpi	r25, 0x02	; 2
 1b0:	49 f7       	brne	.-46     	; 0x184 <main+0x22>
			case 0x01: mainSequence = 0x02; break;
			case 0x02: mainSequence = 0x04; break;
 1b2:	36 2f       	mov	r19, r22
 1b4:	e8 cf       	rjmp	.-48     	; 0x186 <main+0x24>
	uc flashingLEDTick = 0x00;

	while (1) {
		output = mainSequence;
		switch(mainSequence) {
			case 0x01: mainSequence = 0x02; break;
 1b6:	37 2f       	mov	r19, r23
 1b8:	e6 cf       	rjmp	.-52     	; 0x186 <main+0x24>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
