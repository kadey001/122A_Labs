
part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca9  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095f  00000000  00000000  00001121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000589  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  0000200c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e5  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d5  00000000  00000000  0000261d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000029f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b5 c0       	rjmp	.+362    	; 0x1a0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	aa d0       	rcall	.+340    	; 0x218 <main>
  c4:	06 c1       	rjmp	.+524    	; 0x2d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	10 98       	cbi	0x02, 0	; 2
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	11 9a       	sbi	0x02, 1	; 2
  f4:	00 00       	nop
  f6:	11 98       	cbi	0x02, 1	; 2
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 106:	84 e6       	ldi	r24, 0x64	; 100
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	de df       	rcall	.-68     	; 0xc8 <delay_ms>
	LCD_WriteCommand(0x38);
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	ef df       	rcall	.-34     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	ed df       	rcall	.-38     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	eb df       	rcall	.-42     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	e9 df       	rcall	.-46     	; 0xee <LCD_WriteCommand>
	delay_ms(10);						 
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	d3 cf       	rjmp	.-90     	; 0xc8 <delay_ms>
 122:	08 95       	ret

00000124 <LCD_WriteData>:
 124:	10 9a       	sbi	0x02, 0	; 2
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 126:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 128:	11 9a       	sbi	0x02, 1	; 2
   asm("nop");
 12a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 12c:	11 98       	cbi	0x02, 1	; 2
   delay_ms(1);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ca cf       	rjmp	.-108    	; 0xc8 <delay_ms>
 134:	08 95       	ret

00000136 <TimerSet>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 136:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 13a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 13e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 142:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 146:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 14a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 14e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 152:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 156:	08 95       	ret

00000158 <TimerOn>:
 158:	8b e0       	ldi	r24, 0x0B	; 11
 15a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 15e:	8d e7       	ldi	r24, 0x7D	; 125
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 166:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 170:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 174:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 18c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 190:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 194:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 198:	8f b7       	in	r24, 0x3f	; 63
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	8f bf       	out	0x3f, r24	; 63
 19e:	08 95       	ret

000001a0 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 1b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1ba:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 1be:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	a1 09       	sbc	r26, r1
 1c6:	b1 09       	sbc	r27, r1
 1c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1cc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1d0:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1d4:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 1d8:	89 2b       	or	r24, r25
 1da:	8a 2b       	or	r24, r26
 1dc:	8b 2b       	or	r24, r27
 1de:	99 f4       	brne	.+38     	; 0x206 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 1e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ee:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1f2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1fa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1fe:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 202:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <main>:

#define uc unsigned char

int main(void) {
    /* Insert DDR and PORT initializations */
    DDRA = 0xFF; PORTA = 0x00; //LCD Control Lines
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	81 b9       	out	0x01, r24	; 1
 21c:	12 b8       	out	0x02, r1	; 2
    DDRB = 0xFF; PORTB = 0x00; //LED output
 21e:	84 b9       	out	0x04, r24	; 4
 220:	15 b8       	out	0x05, r1	; 5
    DDRC = 0x00; PORTC = 0xFF; //Button Input
 222:	17 b8       	out	0x07, r1	; 7
 224:	88 b9       	out	0x08, r24	; 8
    DDRD = 0xFF; PORTD = 0x00; //LCD Data Lines
 226:	8a b9       	out	0x0a, r24	; 10
 228:	1b b8       	out	0x0b, r1	; 11
    /* Insert your solution below */
    TimerSet(500);
 22a:	64 ef       	ldi	r22, 0xF4	; 244
 22c:	71 e0       	ldi	r23, 0x01	; 1
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	81 df       	rcall	.-254    	; 0x136 <TimerSet>
    TimerOn();
 234:	91 df       	rcall	.-222    	; 0x158 <TimerOn>
    uc mainSequence = 0x01;
    uc flashingLED = 0x00;
    uc flashingLEDTick = 0x00;
    uc buttonC0 = 0x00;

    LCD_init();
 236:	67 df       	rcall	.-306    	; 0x106 <LCD_init>
 238:	63 df       	rcall	.-314    	; 0x100 <LCD_ClearScreen>
    LCD_ClearScreen();
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	f1 2c       	mov	r15, r1
    
    uc score = 0x00;
    uc output = 0x00;
    uc mainSequence = 0x01;
    uc flashingLED = 0x00;
    uc flashingLEDTick = 0x00;
 23e:	c1 e0       	ldi	r28, 0x01	; 1
    TimerOn();
    
    uc score = 0x00;
    uc output = 0x00;
    uc mainSequence = 0x01;
    uc flashingLED = 0x00;
 240:	10 e0       	ldi	r17, 0x00	; 0
    TimerSet(500);
    TimerOn();
    
    uc score = 0x00;
    uc output = 0x00;
    uc mainSequence = 0x01;
 242:	68 94       	set
    DDRD = 0xFF; PORTD = 0x00; //LCD Data Lines
    /* Insert your solution below */
    TimerSet(500);
    TimerOn();
    
    uc score = 0x00;
 244:	bb 24       	eor	r11, r11
    while (1) {
        buttonC0 = ~PINC & 0x01;
        output = mainSequence;
        switch(mainSequence) {
            case 0x01: mainSequence = 0x02; break;
            case 0x02: mainSequence = 0x04; break;
 246:	b2 f8       	bld	r11, 2
 248:	dd 24       	eor	r13, r13
 24a:	d3 94       	inc	r13
            case 0x04: mainSequence = 0x01; break;
 24c:	68 94       	set
 24e:	cc 24       	eor	r12, r12

    while (1) {
        buttonC0 = ~PINC & 0x01;
        output = mainSequence;
        switch(mainSequence) {
            case 0x01: mainSequence = 0x02; break;
 250:	c1 f8       	bld	r12, 1
 252:	68 94       	set
 254:	aa 24       	eor	r10, r10

        LCD_WriteData(score);

        if(flashingLEDTick == 2) {
            switch(flashingLED) {
                case 0x00: flashingLED = 0x08; break;
 256:	a3 f8       	bld	r10, 3
 258:	e1 2c       	mov	r14, r1
 25a:	86 b1       	in	r24, 0x06	; 6
                case 0x08: flashingLED = 0x00; break;
 25c:	81 70       	andi	r24, 0x01	; 1

    LCD_init();
    LCD_ClearScreen();

    while (1) {
        buttonC0 = ~PINC & 0x01;
 25e:	c2 30       	cpi	r28, 0x02	; 2
 260:	61 f1       	breq	.+88     	; 0x2ba <main+0xa2>
        output = mainSequence;
        switch(mainSequence) {
 262:	c4 30       	cpi	r28, 0x04	; 4
 264:	71 f1       	breq	.+92     	; 0x2c2 <main+0xaa>
 266:	c1 30       	cpi	r28, 0x01	; 1
 268:	81 f1       	breq	.+96     	; 0x2ca <main+0xb2>
 26a:	81 11       	cpse	r24, r1
 26c:	10 c0       	rjmp	.+32     	; 0x28e <main+0x76>
            case 0x02: mainSequence = 0x04; break;
            case 0x04: mainSequence = 0x01; break;
            default: mainSequence = 0x01; break;
        }

        if(buttonC0) {
 26e:	c2 30       	cpi	r28, 0x02	; 2
 270:	29 f4       	brne	.+10     	; 0x27c <main+0x64>
            if(output == 0x02) {
 272:	0d 2d       	mov	r16, r13
 274:	01 c0       	rjmp	.+2      	; 0x278 <main+0x60>
        output = mainSequence;
        switch(mainSequence) {
            case 0x01: mainSequence = 0x02; break;
            case 0x02: mainSequence = 0x04; break;
            case 0x04: mainSequence = 0x01; break;
            default: mainSequence = 0x01; break;
 276:	0b 2d       	mov	r16, r11
 278:	1f 5f       	subi	r17, 0xFF	; 255
    while (1) {
        buttonC0 = ~PINC & 0x01;
        output = mainSequence;
        switch(mainSequence) {
            case 0x01: mainSequence = 0x02; break;
            case 0x02: mainSequence = 0x04; break;
 27a:	0a c0       	rjmp	.+20     	; 0x290 <main+0x78>
            default: mainSequence = 0x01; break;
        }

        if(buttonC0) {
            if(output == 0x02) {
            score++;
 27c:	0d 2d       	mov	r16, r13
 27e:	03 c0       	rjmp	.+6      	; 0x286 <main+0x6e>
        output = mainSequence;
        switch(mainSequence) {
            case 0x01: mainSequence = 0x02; break;
            case 0x02: mainSequence = 0x04; break;
            case 0x04: mainSequence = 0x01; break;
            default: mainSequence = 0x01; break;
 280:	0d 2d       	mov	r16, r13
 282:	01 c0       	rjmp	.+2      	; 0x286 <main+0x6e>
        buttonC0 = ~PINC & 0x01;
        output = mainSequence;
        switch(mainSequence) {
            case 0x01: mainSequence = 0x02; break;
            case 0x02: mainSequence = 0x04; break;
            case 0x04: mainSequence = 0x01; break;
 284:	0c 2d       	mov	r16, r12
 286:	11 23       	and	r17, r17

    while (1) {
        buttonC0 = ~PINC & 0x01;
        output = mainSequence;
        switch(mainSequence) {
            case 0x01: mainSequence = 0x02; break;
 288:	19 f0       	breq	.+6      	; 0x290 <main+0x78>

        if(buttonC0) {
            if(output == 0x02) {
            score++;
            } else {
                if(score > 0) {
 28a:	11 50       	subi	r17, 0x01	; 1
 28c:	01 c0       	rjmp	.+2      	; 0x290 <main+0x78>
                    score--;
 28e:	0d 2d       	mov	r16, r13
        output = mainSequence;
        switch(mainSequence) {
            case 0x01: mainSequence = 0x02; break;
            case 0x02: mainSequence = 0x04; break;
            case 0x04: mainSequence = 0x01; break;
            default: mainSequence = 0x01; break;
 290:	81 2f       	mov	r24, r17
                    //Nothing
                }
            }
        }

        LCD_WriteData(score);
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	47 df       	rcall	.-370    	; 0x124 <LCD_WriteData>
 296:	d2 30       	cpi	r29, 0x02	; 2
 298:	29 f4       	brne	.+10     	; 0x2a4 <main+0x8c>

        if(flashingLEDTick == 2) {
 29a:	ff 20       	and	r15, r15
 29c:	11 f0       	breq	.+4      	; 0x2a2 <main+0x8a>
            switch(flashingLED) {
 29e:	fe 2c       	mov	r15, r14
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <main+0x8c>
                case 0x00: flashingLED = 0x08; break;
                case 0x08: flashingLED = 0x00; break;
 2a2:	fa 2c       	mov	r15, r10
 2a4:	cf 29       	or	r28, r15

        LCD_WriteData(score);

        if(flashingLEDTick == 2) {
            switch(flashingLED) {
                case 0x00: flashingLED = 0x08; break;
 2a6:	c5 b9       	out	0x05, r28	; 5
                case 0x08: flashingLED = 0x00; break;
                default: flashingLED = 0x00; break;
            }
        }
        output = output | flashingLED;
 2a8:	df 5f       	subi	r29, 0xFF	; 255
        PORTB = output;
 2aa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
        flashingLEDTick++;
        while(!TimerFlag);
 2ae:	88 23       	and	r24, r24
 2b0:	e1 f3       	breq	.-8      	; 0x2aa <main+0x92>
 2b2:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <TimerFlag>
        TimerFlag = 0;
 2b6:	c0 2f       	mov	r28, r16
 2b8:	d0 cf       	rjmp	.-96     	; 0x25a <main+0x42>
    }
 2ba:	88 23       	and	r24, r24
 2bc:	e1 f2       	breq	.-72     	; 0x276 <main+0x5e>
            case 0x02: mainSequence = 0x04; break;
            case 0x04: mainSequence = 0x01; break;
            default: mainSequence = 0x01; break;
        }

        if(buttonC0) {
 2be:	0b 2d       	mov	r16, r11
 2c0:	e7 cf       	rjmp	.-50     	; 0x290 <main+0x78>
    while (1) {
        buttonC0 = ~PINC & 0x01;
        output = mainSequence;
        switch(mainSequence) {
            case 0x01: mainSequence = 0x02; break;
            case 0x02: mainSequence = 0x04; break;
 2c2:	88 23       	and	r24, r24
 2c4:	e9 f2       	breq	.-70     	; 0x280 <main+0x68>
            case 0x04: mainSequence = 0x01; break;
            default: mainSequence = 0x01; break;
        }

        if(buttonC0) {
 2c6:	0d 2d       	mov	r16, r13
 2c8:	e3 cf       	rjmp	.-58     	; 0x290 <main+0x78>
        buttonC0 = ~PINC & 0x01;
        output = mainSequence;
        switch(mainSequence) {
            case 0x01: mainSequence = 0x02; break;
            case 0x02: mainSequence = 0x04; break;
            case 0x04: mainSequence = 0x01; break;
 2ca:	88 23       	and	r24, r24
 2cc:	d9 f2       	breq	.-74     	; 0x284 <main+0x6c>
            default: mainSequence = 0x01; break;
        }

        if(buttonC0) {
 2ce:	0c 2d       	mov	r16, r12
 2d0:	df cf       	rjmp	.-66     	; 0x290 <main+0x78>

000002d2 <_exit>:

    while (1) {
        buttonC0 = ~PINC & 0x01;
        output = mainSequence;
        switch(mainSequence) {
            case 0x01: mainSequence = 0x02; break;
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
