
part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000924  000009b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  000009c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4b  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099b  00000000  00000000  00001843  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b2  00000000  00000000  000021de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000536  00000000  00000000  000028cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000472  00000000  00000000  00002e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	cb d0       	rcall	.+406    	; 0x25a <main>
  c4:	2d c4       	rjmp	.+2138   	; 0x920 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
  ee:	10 98       	cbi	0x02, 0	; 2
   DATA_BUS = Command;
  f0:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
  f2:	11 9a       	sbi	0x02, 1	; 2
   asm("nop");
  f4:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
  f6:	11 98       	cbi	0x02, 1	; 2
   delay_ms(2); // ClearScreen requires 1.52ms to execute
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
#define E 1			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
	LCD_WriteCommand(0x38);
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
	delay_ms(10);						 
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	10 9a       	sbi	0x02, 0	; 2
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 136:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 138:	11 9a       	sbi	0x02, 1	; 2
   asm("nop");
 13a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 13c:	11 98       	cbi	0x02, 1	; 2
   delay_ms(1);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
      LCD_WriteData(*string++);
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 168:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerSet>:
 178:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 17c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 180:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 184:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 188:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 18c:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 190:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 194:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 198:	08 95       	ret

0000019a <TimerOn>:
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	8d e7       	ldi	r24, 0x7D	; 125
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1c6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1ce:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1d2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 1d6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 1da:	8f b7       	in	r24, 0x3f	; 63
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8f bf       	out	0x3f, r24	; 63
 1e0:	08 95       	ret

000001e2 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 1f4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1f8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1fc:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 200:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	a1 09       	sbc	r26, r1
 208:	b1 09       	sbc	r27, r1
 20a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 20e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 212:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 216:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 228:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 22c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 230:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 234:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 238:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 23c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 240:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 244:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	}
}
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <main>:
#include "timer.h"
#include "io.h"

#define uc unsigned char

int main(void) {
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	60 97       	sbiw	r28, 0x10	; 16
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
	/* Insert DDR and PORT initializations */
	DDRA = 0xFF; PORTA = 0x00; //LCD Control Lines
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	81 b9       	out	0x01, r24	; 1
 272:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00; //LED output
 274:	84 b9       	out	0x04, r24	; 4
 276:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x00; PORTC = 0xFF; //Button Input
 278:	17 b8       	out	0x07, r1	; 7
 27a:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF; PORTD = 0x00; //LCD Data Lines
 27c:	8a b9       	out	0x0a, r24	; 10
 27e:	1b b8       	out	0x0b, r1	; 11
	/* Insert your solution below */
	TimerSet(50);
 280:	62 e3       	ldi	r22, 0x32	; 50
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	77 df       	rcall	.-274    	; 0x178 <TimerSet>
	TimerOn();
 28a:	87 df       	rcall	.-242    	; 0x19a <TimerOn>
	
	LCD_init();
 28c:	44 df       	rcall	.-376    	; 0x116 <LCD_init>
 28e:	38 df       	rcall	.-400    	; 0x100 <LCD_ClearScreen>
	LCD_ClearScreen();
 290:	64 e0       	ldi	r22, 0x04	; 4
	LCD_DisplayString(1, "0");
 292:	71 e0       	ldi	r23, 0x01	; 1
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	57 df       	rcall	.-338    	; 0x146 <LCD_DisplayString>
 298:	71 2c       	mov	r7, r1
 29a:	00 e0       	ldi	r16, 0x00	; 0
	uc flashingLEDTick = 0x00;
	uc buttonC1 = 0x00;
	uc pausePressed = 0x00;
	uc pausedSequence = 0x00;
	uc paused = 0x00;
	uc score = 0x00;
 29c:	90 e0       	ldi	r25, 0x00	; 0
	uc flashingLED = 0x08;
	uc flashingLEDTick = 0x00;
	uc buttonC1 = 0x00;
	uc pausePressed = 0x00;
	uc pausedSequence = 0x00;
	uc paused = 0x00;
 29e:	f1 2c       	mov	r15, r1
	uc mainSequence = 0x01;
	uc flashingLED = 0x08;
	uc flashingLEDTick = 0x00;
	uc buttonC1 = 0x00;
	uc pausePressed = 0x00;
	uc pausedSequence = 0x00;
 2a0:	68 94       	set
	LCD_DisplayString(1, "0");
	
	uc output = 0x00;
	uc mainSequence = 0x01;
	uc flashingLED = 0x08;
	uc flashingLEDTick = 0x00;
 2a2:	88 24       	eor	r8, r8
	LCD_ClearScreen();
	LCD_DisplayString(1, "0");
	
	uc output = 0x00;
	uc mainSequence = 0x01;
	uc flashingLED = 0x08;
 2a4:	83 f8       	bld	r8, 3
 2a6:	11 e0       	ldi	r17, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
	LCD_init();
	LCD_ClearScreen();
	LCD_DisplayString(1, "0");
	
	uc output = 0x00;
	uc mainSequence = 0x01;
 2aa:	99 24       	eor	r9, r9
	
	LCD_init();
	LCD_ClearScreen();
	LCD_DisplayString(1, "0");
	
	uc output = 0x00;
 2ac:	93 94       	inc	r9

	while (1) {
		pausePressed = ~PINC & 0x01;
		buttonC1 = ~PINC & 0x02;
		if(pausePressed) {
			paused = !paused;
 2ae:	e1 2c       	mov	r14, r1
 2b0:	68 94       	set
 2b2:	44 24       	eor	r4, r4
				default: mainSequence = 0x01; break;
			}
			
			if(flashingLEDTick == 2) {
				switch(flashingLED) {
					case 0x00: flashingLED = 0x08; break;
 2b4:	43 f8       	bld	r4, 3
 2b6:	68 94       	set
 2b8:	55 24       	eor	r5, r5
			}
			
			output = mainSequence;
			switch(mainSequence) {
				case 0x01: mainSequence = 0x02; break;
				case 0x02: mainSequence = 0x04; break;
 2ba:	52 f8       	bld	r5, 2
 2bc:	68 94       	set
 2be:	66 24       	eor	r6, r6
				LCD_DisplayString(1, scoreStringFinal);
			}
			
			output = mainSequence;
			switch(mainSequence) {
				case 0x01: mainSequence = 0x02; break;
 2c0:	61 f8       	bld	r6, 1
 2c2:	0f 2e       	mov	r0, r31
 2c4:	f6 e0       	ldi	r31, 0x06	; 6
						} else {
						//Nothing
					}
				}
				char *scoreString[8];
				sprintf(scoreString, "%d", score);
 2c6:	af 2e       	mov	r10, r31
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	bf 2e       	mov	r11, r31
 2cc:	f0 2d       	mov	r31, r0
 2ce:	ae 01       	movw	r20, r28
 2d0:	4f 5f       	subi	r20, 0xFF	; 255
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255
 2d4:	6a 01       	movw	r12, r20
 2d6:	86 b1       	in	r24, 0x06	; 6
 2d8:	26 b1       	in	r18, 0x06	; 6
	uc pausedSequence = 0x00;
	uc paused = 0x00;
	uc score = 0x00;

	while (1) {
		pausePressed = ~PINC & 0x01;
 2da:	80 fd       	sbrc	r24, 0
		buttonC1 = ~PINC & 0x02;
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <main+0x8c>
		if(pausePressed) {
 2de:	89 2d       	mov	r24, r9
 2e0:	01 11       	cpse	r16, r1
			paused = !paused;
 2e2:	8e 2d       	mov	r24, r14
 2e4:	08 2f       	mov	r16, r24
 2e6:	01 11       	cpse	r16, r1
 2e8:	38 c0       	rjmp	.+112    	; 0x35a <main+0x100>
		}
		
		if(!paused) {
 2ea:	21 fd       	sbrc	r18, 1
 2ec:	17 c0       	rjmp	.+46     	; 0x31c <main+0xc2>
			if(buttonC1) {
 2ee:	37 7f       	andi	r19, 0xF7	; 247
 2f0:	32 30       	cpi	r19, 0x02	; 2
				if(output == 0x02 || output == 0x0A) {
 2f2:	11 f4       	brne	.+4      	; 0x2f8 <main+0x9e>
 2f4:	73 94       	inc	r7
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <main+0xa2>
					score++;
 2f8:	71 10       	cpse	r7, r1
 2fa:	7a 94       	dec	r7
					} else {
					if(score > 0) {
 2fc:	1f 92       	push	r1
						score--;
 2fe:	7f 92       	push	r7
						} else {
						//Nothing
					}
				}
				char *scoreString[8];
				sprintf(scoreString, "%d", score);
 300:	bf 92       	push	r11
 302:	af 92       	push	r10
 304:	df 92       	push	r13
 306:	cf 92       	push	r12
 308:	30 d0       	rcall	.+96     	; 0x36a <sprintf>
 30a:	b6 01       	movw	r22, r12
				unsigned char * scoreStringFinal = (unsigned char *)scoreString;
				LCD_DisplayString(1, scoreStringFinal);
 30c:	89 2d       	mov	r24, r9
 30e:	1b df       	rcall	.-458    	; 0x146 <LCD_DisplayString>
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	12 30       	cpi	r17, 0x02	; 2
 31e:	29 f0       	breq	.+10     	; 0x32a <main+0xd0>
			}
			
			output = mainSequence;
			switch(mainSequence) {
 320:	14 30       	cpi	r17, 0x04	; 4
 322:	29 f0       	breq	.+10     	; 0x32e <main+0xd4>
 324:	11 30       	cpi	r17, 0x01	; 1
 326:	29 f4       	brne	.+10     	; 0x332 <main+0xd8>
 328:	06 c0       	rjmp	.+12     	; 0x336 <main+0xdc>
 32a:	85 2d       	mov	r24, r5
 32c:	05 c0       	rjmp	.+10     	; 0x338 <main+0xde>
				case 0x01: mainSequence = 0x02; break;
				case 0x02: mainSequence = 0x04; break;
 32e:	89 2d       	mov	r24, r9
 330:	03 c0       	rjmp	.+6      	; 0x338 <main+0xde>
				case 0x04: mainSequence = 0x01; break;
 332:	89 2d       	mov	r24, r9
 334:	01 c0       	rjmp	.+2      	; 0x338 <main+0xde>
				default: mainSequence = 0x01; break;
 336:	86 2d       	mov	r24, r6
 338:	52 e0       	ldi	r21, 0x02	; 2
				LCD_DisplayString(1, scoreStringFinal);
			}
			
			output = mainSequence;
			switch(mainSequence) {
				case 0x01: mainSequence = 0x02; break;
 33a:	f5 12       	cpse	r15, r21
				case 0x02: mainSequence = 0x04; break;
				case 0x04: mainSequence = 0x01; break;
				default: mainSequence = 0x01; break;
			}
			
			if(flashingLEDTick == 2) {
 33c:	07 c0       	rjmp	.+14     	; 0x34c <main+0xf2>
 33e:	88 20       	and	r8, r8
 340:	19 f0       	breq	.+6      	; 0x348 <main+0xee>
				switch(flashingLED) {
 342:	f1 2c       	mov	r15, r1
 344:	8e 2c       	mov	r8, r14
					case 0x00: flashingLED = 0x08; break;
					case 0x08: flashingLED = 0x00; break;
					default: flashingLED = 0x00; break;
				}
				flashingLEDTick = 0;
 346:	02 c0       	rjmp	.+4      	; 0x34c <main+0xf2>
			}
			
			if(flashingLEDTick == 2) {
				switch(flashingLED) {
					case 0x00: flashingLED = 0x08; break;
					case 0x08: flashingLED = 0x00; break;
 348:	f1 2c       	mov	r15, r1
 34a:	84 2c       	mov	r8, r4
					default: flashingLED = 0x00; break;
				}
				flashingLEDTick = 0;
 34c:	f3 94       	inc	r15
				default: mainSequence = 0x01; break;
			}
			
			if(flashingLEDTick == 2) {
				switch(flashingLED) {
					case 0x00: flashingLED = 0x08; break;
 34e:	91 2f       	mov	r25, r17
					default: flashingLED = 0x00; break;
				}
				flashingLEDTick = 0;
			}
			
			flashingLEDTick++;
 350:	98 29       	or	r25, r8
			
			output |= flashingLED;
 352:	95 b9       	out	0x05, r25	; 5
 354:	18 2f       	mov	r17, r24
			pausedSequence = output;
			PORTB = output;
 356:	39 2f       	mov	r19, r25
 358:	01 c0       	rjmp	.+2      	; 0x35c <main+0x102>
				flashingLEDTick = 0;
			}
			
			flashingLEDTick++;
			
			output |= flashingLED;
 35a:	95 b9       	out	0x05, r25	; 5
 35c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
			PORTB = output;
			} else {
				PORTB = pausedSequence;
		}
		
		while(!TimerFlag);
 360:	88 23       	and	r24, r24
 362:	e1 f3       	breq	.-8      	; 0x35c <main+0x102>
 364:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <TimerFlag>
		TimerFlag = 0;
 368:	b6 cf       	rjmp	.-148    	; 0x2d6 <main+0x7c>

0000036a <sprintf>:
 36a:	0f 93       	push	r16
	}
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	2e 97       	sbiw	r28, 0x0e	; 14
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	0d 89       	ldd	r16, Y+21	; 0x15
 384:	1e 89       	ldd	r17, Y+22	; 0x16
 386:	86 e0       	ldi	r24, 0x06	; 6
 388:	8c 83       	std	Y+4, r24	; 0x04
 38a:	1a 83       	std	Y+2, r17	; 0x02
 38c:	09 83       	std	Y+1, r16	; 0x01
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	9f e7       	ldi	r25, 0x7F	; 127
 392:	9e 83       	std	Y+6, r25	; 0x06
 394:	8d 83       	std	Y+5, r24	; 0x05
 396:	ae 01       	movw	r20, r28
 398:	47 5e       	subi	r20, 0xE7	; 231
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	6f 89       	ldd	r22, Y+23	; 0x17
 39e:	78 8d       	ldd	r23, Y+24	; 0x18
 3a0:	ce 01       	movw	r24, r28
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	10 d0       	rcall	.+32     	; 0x3c6 <vfprintf>
 3a6:	ef 81       	ldd	r30, Y+7	; 0x07
 3a8:	f8 85       	ldd	r31, Y+8	; 0x08
 3aa:	e0 0f       	add	r30, r16
 3ac:	f1 1f       	adc	r31, r17
 3ae:	10 82       	st	Z, r1
 3b0:	2e 96       	adiw	r28, 0x0e	; 14
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	08 95       	ret

000003c6 <vfprintf>:
 3c6:	2f 92       	push	r2
 3c8:	3f 92       	push	r3
 3ca:	4f 92       	push	r4
 3cc:	5f 92       	push	r5
 3ce:	6f 92       	push	r6
 3d0:	7f 92       	push	r7
 3d2:	8f 92       	push	r8
 3d4:	9f 92       	push	r9
 3d6:	af 92       	push	r10
 3d8:	bf 92       	push	r11
 3da:	cf 92       	push	r12
 3dc:	df 92       	push	r13
 3de:	ef 92       	push	r14
 3e0:	ff 92       	push	r15
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	2b 97       	sbiw	r28, 0x0b	; 11
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
 3fa:	6c 01       	movw	r12, r24
 3fc:	7b 01       	movw	r14, r22
 3fe:	8a 01       	movw	r16, r20
 400:	fc 01       	movw	r30, r24
 402:	17 82       	std	Z+7, r1	; 0x07
 404:	16 82       	std	Z+6, r1	; 0x06
 406:	83 81       	ldd	r24, Z+3	; 0x03
 408:	81 ff       	sbrs	r24, 1
 40a:	bf c1       	rjmp	.+894    	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
 40c:	ce 01       	movw	r24, r28
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	3c 01       	movw	r6, r24
 412:	f6 01       	movw	r30, r12
 414:	93 81       	ldd	r25, Z+3	; 0x03
 416:	f7 01       	movw	r30, r14
 418:	93 fd       	sbrc	r25, 3
 41a:	85 91       	lpm	r24, Z+
 41c:	93 ff       	sbrs	r25, 3
 41e:	81 91       	ld	r24, Z+
 420:	7f 01       	movw	r14, r30
 422:	88 23       	and	r24, r24
 424:	09 f4       	brne	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	ad c1       	rjmp	.+858    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
 428:	85 32       	cpi	r24, 0x25	; 37
 42a:	39 f4       	brne	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 42c:	93 fd       	sbrc	r25, 3
 42e:	85 91       	lpm	r24, Z+
 430:	93 ff       	sbrs	r25, 3
 432:	81 91       	ld	r24, Z+
 434:	7f 01       	movw	r14, r30
 436:	85 32       	cpi	r24, 0x25	; 37
 438:	21 f4       	brne	.+8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43a:	b6 01       	movw	r22, r12
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	d6 d1       	rcall	.+940    	; 0x7ec <fputc>
 440:	e8 cf       	rjmp	.-48     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 442:	91 2c       	mov	r9, r1
 444:	21 2c       	mov	r2, r1
 446:	31 2c       	mov	r3, r1
 448:	ff e1       	ldi	r31, 0x1F	; 31
 44a:	f3 15       	cp	r31, r3
 44c:	d8 f0       	brcs	.+54     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 44e:	8b 32       	cpi	r24, 0x2B	; 43
 450:	79 f0       	breq	.+30     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 452:	38 f4       	brcc	.+14     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 454:	80 32       	cpi	r24, 0x20	; 32
 456:	79 f0       	breq	.+30     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 458:	83 32       	cpi	r24, 0x23	; 35
 45a:	a1 f4       	brne	.+40     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 45c:	23 2d       	mov	r18, r3
 45e:	20 61       	ori	r18, 0x10	; 16
 460:	1d c0       	rjmp	.+58     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 462:	8d 32       	cpi	r24, 0x2D	; 45
 464:	61 f0       	breq	.+24     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 466:	80 33       	cpi	r24, 0x30	; 48
 468:	69 f4       	brne	.+26     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 46a:	23 2d       	mov	r18, r3
 46c:	21 60       	ori	r18, 0x01	; 1
 46e:	16 c0       	rjmp	.+44     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 470:	83 2d       	mov	r24, r3
 472:	82 60       	ori	r24, 0x02	; 2
 474:	38 2e       	mov	r3, r24
 476:	e3 2d       	mov	r30, r3
 478:	e4 60       	ori	r30, 0x04	; 4
 47a:	3e 2e       	mov	r3, r30
 47c:	2a c0       	rjmp	.+84     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 47e:	f3 2d       	mov	r31, r3
 480:	f8 60       	ori	r31, 0x08	; 8
 482:	1d c0       	rjmp	.+58     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 484:	37 fc       	sbrc	r3, 7
 486:	2d c0       	rjmp	.+90     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 488:	20 ed       	ldi	r18, 0xD0	; 208
 48a:	28 0f       	add	r18, r24
 48c:	2a 30       	cpi	r18, 0x0A	; 10
 48e:	40 f0       	brcs	.+16     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 490:	8e 32       	cpi	r24, 0x2E	; 46
 492:	b9 f4       	brne	.+46     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 494:	36 fc       	sbrc	r3, 6
 496:	75 c1       	rjmp	.+746    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
 498:	23 2d       	mov	r18, r3
 49a:	20 64       	ori	r18, 0x40	; 64
 49c:	32 2e       	mov	r3, r18
 49e:	19 c0       	rjmp	.+50     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4a0:	36 fe       	sbrs	r3, 6
 4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4a4:	8a e0       	ldi	r24, 0x0A	; 10
 4a6:	98 9e       	mul	r9, r24
 4a8:	20 0d       	add	r18, r0
 4aa:	11 24       	eor	r1, r1
 4ac:	92 2e       	mov	r9, r18
 4ae:	11 c0       	rjmp	.+34     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4b0:	ea e0       	ldi	r30, 0x0A	; 10
 4b2:	2e 9e       	mul	r2, r30
 4b4:	20 0d       	add	r18, r0
 4b6:	11 24       	eor	r1, r1
 4b8:	22 2e       	mov	r2, r18
 4ba:	f3 2d       	mov	r31, r3
 4bc:	f0 62       	ori	r31, 0x20	; 32
 4be:	3f 2e       	mov	r3, r31
 4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4c2:	8c 36       	cpi	r24, 0x6C	; 108
 4c4:	21 f4       	brne	.+8      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4c6:	83 2d       	mov	r24, r3
 4c8:	80 68       	ori	r24, 0x80	; 128
 4ca:	38 2e       	mov	r3, r24
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4ce:	88 36       	cpi	r24, 0x68	; 104
 4d0:	41 f4       	brne	.+16     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4d2:	f7 01       	movw	r30, r14
 4d4:	93 fd       	sbrc	r25, 3
 4d6:	85 91       	lpm	r24, Z+
 4d8:	93 ff       	sbrs	r25, 3
 4da:	81 91       	ld	r24, Z+
 4dc:	7f 01       	movw	r14, r30
 4de:	81 11       	cpse	r24, r1
 4e0:	b3 cf       	rjmp	.-154    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 4e2:	98 2f       	mov	r25, r24
 4e4:	9f 7d       	andi	r25, 0xDF	; 223
 4e6:	95 54       	subi	r25, 0x45	; 69
 4e8:	93 30       	cpi	r25, 0x03	; 3
 4ea:	28 f4       	brcc	.+10     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4ec:	0c 5f       	subi	r16, 0xFC	; 252
 4ee:	1f 4f       	sbci	r17, 0xFF	; 255
 4f0:	9f e3       	ldi	r25, 0x3F	; 63
 4f2:	99 83       	std	Y+1, r25	; 0x01
 4f4:	0d c0       	rjmp	.+26     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 4f6:	83 36       	cpi	r24, 0x63	; 99
 4f8:	31 f0       	breq	.+12     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4fa:	83 37       	cpi	r24, 0x73	; 115
 4fc:	71 f0       	breq	.+28     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 4fe:	83 35       	cpi	r24, 0x53	; 83
 500:	09 f0       	breq	.+2      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 502:	55 c0       	rjmp	.+170    	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 504:	20 c0       	rjmp	.+64     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 506:	f8 01       	movw	r30, r16
 508:	80 81       	ld	r24, Z
 50a:	89 83       	std	Y+1, r24	; 0x01
 50c:	0e 5f       	subi	r16, 0xFE	; 254
 50e:	1f 4f       	sbci	r17, 0xFF	; 255
 510:	88 24       	eor	r8, r8
 512:	83 94       	inc	r8
 514:	91 2c       	mov	r9, r1
 516:	53 01       	movw	r10, r6
 518:	12 c0       	rjmp	.+36     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 51a:	28 01       	movw	r4, r16
 51c:	f2 e0       	ldi	r31, 0x02	; 2
 51e:	4f 0e       	add	r4, r31
 520:	51 1c       	adc	r5, r1
 522:	f8 01       	movw	r30, r16
 524:	a0 80       	ld	r10, Z
 526:	b1 80       	ldd	r11, Z+1	; 0x01
 528:	36 fe       	sbrs	r3, 6
 52a:	03 c0       	rjmp	.+6      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 52c:	69 2d       	mov	r22, r9
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 532:	6f ef       	ldi	r22, 0xFF	; 255
 534:	7f ef       	ldi	r23, 0xFF	; 255
 536:	c5 01       	movw	r24, r10
 538:	4e d1       	rcall	.+668    	; 0x7d6 <strnlen>
 53a:	4c 01       	movw	r8, r24
 53c:	82 01       	movw	r16, r4
 53e:	f3 2d       	mov	r31, r3
 540:	ff 77       	andi	r31, 0x7F	; 127
 542:	3f 2e       	mov	r3, r31
 544:	15 c0       	rjmp	.+42     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 546:	28 01       	movw	r4, r16
 548:	22 e0       	ldi	r18, 0x02	; 2
 54a:	42 0e       	add	r4, r18
 54c:	51 1c       	adc	r5, r1
 54e:	f8 01       	movw	r30, r16
 550:	a0 80       	ld	r10, Z
 552:	b1 80       	ldd	r11, Z+1	; 0x01
 554:	36 fe       	sbrs	r3, 6
 556:	03 c0       	rjmp	.+6      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 558:	69 2d       	mov	r22, r9
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 55e:	6f ef       	ldi	r22, 0xFF	; 255
 560:	7f ef       	ldi	r23, 0xFF	; 255
 562:	c5 01       	movw	r24, r10
 564:	2d d1       	rcall	.+602    	; 0x7c0 <strnlen_P>
 566:	4c 01       	movw	r8, r24
 568:	f3 2d       	mov	r31, r3
 56a:	f0 68       	ori	r31, 0x80	; 128
 56c:	3f 2e       	mov	r3, r31
 56e:	82 01       	movw	r16, r4
 570:	33 fc       	sbrc	r3, 3
 572:	19 c0       	rjmp	.+50     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 574:	82 2d       	mov	r24, r2
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	88 16       	cp	r8, r24
 57a:	99 06       	cpc	r9, r25
 57c:	a0 f4       	brcc	.+40     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 57e:	b6 01       	movw	r22, r12
 580:	80 e2       	ldi	r24, 0x20	; 32
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	33 d1       	rcall	.+614    	; 0x7ec <fputc>
 586:	2a 94       	dec	r2
 588:	f5 cf       	rjmp	.-22     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 58a:	f5 01       	movw	r30, r10
 58c:	37 fc       	sbrc	r3, 7
 58e:	85 91       	lpm	r24, Z+
 590:	37 fe       	sbrs	r3, 7
 592:	81 91       	ld	r24, Z+
 594:	5f 01       	movw	r10, r30
 596:	b6 01       	movw	r22, r12
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	28 d1       	rcall	.+592    	; 0x7ec <fputc>
 59c:	21 10       	cpse	r2, r1
 59e:	2a 94       	dec	r2
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	82 1a       	sub	r8, r18
 5a4:	91 08       	sbc	r9, r1
 5a6:	81 14       	cp	r8, r1
 5a8:	91 04       	cpc	r9, r1
 5aa:	79 f7       	brne	.-34     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 5ac:	e1 c0       	rjmp	.+450    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 5ae:	84 36       	cpi	r24, 0x64	; 100
 5b0:	11 f0       	breq	.+4      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5b2:	89 36       	cpi	r24, 0x69	; 105
 5b4:	39 f5       	brne	.+78     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5b6:	f8 01       	movw	r30, r16
 5b8:	37 fe       	sbrs	r3, 7
 5ba:	07 c0       	rjmp	.+14     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5bc:	60 81       	ld	r22, Z
 5be:	71 81       	ldd	r23, Z+1	; 0x01
 5c0:	82 81       	ldd	r24, Z+2	; 0x02
 5c2:	93 81       	ldd	r25, Z+3	; 0x03
 5c4:	0c 5f       	subi	r16, 0xFC	; 252
 5c6:	1f 4f       	sbci	r17, 0xFF	; 255
 5c8:	08 c0       	rjmp	.+16     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5ca:	60 81       	ld	r22, Z
 5cc:	71 81       	ldd	r23, Z+1	; 0x01
 5ce:	07 2e       	mov	r0, r23
 5d0:	00 0c       	add	r0, r0
 5d2:	88 0b       	sbc	r24, r24
 5d4:	99 0b       	sbc	r25, r25
 5d6:	0e 5f       	subi	r16, 0xFE	; 254
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	f3 2d       	mov	r31, r3
 5dc:	ff 76       	andi	r31, 0x6F	; 111
 5de:	3f 2e       	mov	r3, r31
 5e0:	97 ff       	sbrs	r25, 7
 5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5e4:	90 95       	com	r25
 5e6:	80 95       	com	r24
 5e8:	70 95       	com	r23
 5ea:	61 95       	neg	r22
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	8f 4f       	sbci	r24, 0xFF	; 255
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	f0 68       	ori	r31, 0x80	; 128
 5f4:	3f 2e       	mov	r3, r31
 5f6:	2a e0       	ldi	r18, 0x0A	; 10
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	a3 01       	movw	r20, r6
 5fc:	33 d1       	rcall	.+614    	; 0x864 <__ultoa_invert>
 5fe:	88 2e       	mov	r8, r24
 600:	86 18       	sub	r8, r6
 602:	44 c0       	rjmp	.+136    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 604:	85 37       	cpi	r24, 0x75	; 117
 606:	31 f4       	brne	.+12     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 608:	23 2d       	mov	r18, r3
 60a:	2f 7e       	andi	r18, 0xEF	; 239
 60c:	b2 2e       	mov	r11, r18
 60e:	2a e0       	ldi	r18, 0x0A	; 10
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	25 c0       	rjmp	.+74     	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 614:	93 2d       	mov	r25, r3
 616:	99 7f       	andi	r25, 0xF9	; 249
 618:	b9 2e       	mov	r11, r25
 61a:	8f 36       	cpi	r24, 0x6F	; 111
 61c:	c1 f0       	breq	.+48     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 61e:	18 f4       	brcc	.+6      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 620:	88 35       	cpi	r24, 0x58	; 88
 622:	79 f0       	breq	.+30     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 624:	ae c0       	rjmp	.+348    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
 626:	80 37       	cpi	r24, 0x70	; 112
 628:	19 f0       	breq	.+6      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 62a:	88 37       	cpi	r24, 0x78	; 120
 62c:	21 f0       	breq	.+8      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 62e:	a9 c0       	rjmp	.+338    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
 630:	e9 2f       	mov	r30, r25
 632:	e0 61       	ori	r30, 0x10	; 16
 634:	be 2e       	mov	r11, r30
 636:	b4 fe       	sbrs	r11, 4
 638:	0d c0       	rjmp	.+26     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 63a:	fb 2d       	mov	r31, r11
 63c:	f4 60       	ori	r31, 0x04	; 4
 63e:	bf 2e       	mov	r11, r31
 640:	09 c0       	rjmp	.+18     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 642:	34 fe       	sbrs	r3, 4
 644:	0a c0       	rjmp	.+20     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 646:	29 2f       	mov	r18, r25
 648:	26 60       	ori	r18, 0x06	; 6
 64a:	b2 2e       	mov	r11, r18
 64c:	06 c0       	rjmp	.+12     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 64e:	28 e0       	ldi	r18, 0x08	; 8
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	05 c0       	rjmp	.+10     	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 654:	20 e1       	ldi	r18, 0x10	; 16
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 65a:	20 e1       	ldi	r18, 0x10	; 16
 65c:	32 e0       	ldi	r19, 0x02	; 2
 65e:	f8 01       	movw	r30, r16
 660:	b7 fe       	sbrs	r11, 7
 662:	07 c0       	rjmp	.+14     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 664:	60 81       	ld	r22, Z
 666:	71 81       	ldd	r23, Z+1	; 0x01
 668:	82 81       	ldd	r24, Z+2	; 0x02
 66a:	93 81       	ldd	r25, Z+3	; 0x03
 66c:	0c 5f       	subi	r16, 0xFC	; 252
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	06 c0       	rjmp	.+12     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 672:	60 81       	ld	r22, Z
 674:	71 81       	ldd	r23, Z+1	; 0x01
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 5f       	subi	r16, 0xFE	; 254
 67c:	1f 4f       	sbci	r17, 0xFF	; 255
 67e:	a3 01       	movw	r20, r6
 680:	f1 d0       	rcall	.+482    	; 0x864 <__ultoa_invert>
 682:	88 2e       	mov	r8, r24
 684:	86 18       	sub	r8, r6
 686:	fb 2d       	mov	r31, r11
 688:	ff 77       	andi	r31, 0x7F	; 127
 68a:	3f 2e       	mov	r3, r31
 68c:	36 fe       	sbrs	r3, 6
 68e:	0d c0       	rjmp	.+26     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 690:	23 2d       	mov	r18, r3
 692:	2e 7f       	andi	r18, 0xFE	; 254
 694:	a2 2e       	mov	r10, r18
 696:	89 14       	cp	r8, r9
 698:	58 f4       	brcc	.+22     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 69a:	34 fe       	sbrs	r3, 4
 69c:	0b c0       	rjmp	.+22     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 69e:	32 fc       	sbrc	r3, 2
 6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6a2:	83 2d       	mov	r24, r3
 6a4:	8e 7e       	andi	r24, 0xEE	; 238
 6a6:	a8 2e       	mov	r10, r24
 6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6aa:	b8 2c       	mov	r11, r8
 6ac:	a3 2c       	mov	r10, r3
 6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 6b0:	b8 2c       	mov	r11, r8
 6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 6b4:	b9 2c       	mov	r11, r9
 6b6:	a4 fe       	sbrs	r10, 4
 6b8:	0f c0       	rjmp	.+30     	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
 6ba:	fe 01       	movw	r30, r28
 6bc:	e8 0d       	add	r30, r8
 6be:	f1 1d       	adc	r31, r1
 6c0:	80 81       	ld	r24, Z
 6c2:	80 33       	cpi	r24, 0x30	; 48
 6c4:	21 f4       	brne	.+8      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6c6:	9a 2d       	mov	r25, r10
 6c8:	99 7e       	andi	r25, 0xE9	; 233
 6ca:	a9 2e       	mov	r10, r25
 6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6ce:	a2 fe       	sbrs	r10, 2
 6d0:	06 c0       	rjmp	.+12     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6d2:	b3 94       	inc	r11
 6d4:	b3 94       	inc	r11
 6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6d8:	8a 2d       	mov	r24, r10
 6da:	86 78       	andi	r24, 0x86	; 134
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6de:	b3 94       	inc	r11
 6e0:	a3 fc       	sbrc	r10, 3
 6e2:	10 c0       	rjmp	.+32     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 6e4:	a0 fe       	sbrs	r10, 0
 6e6:	06 c0       	rjmp	.+12     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6e8:	b2 14       	cp	r11, r2
 6ea:	80 f4       	brcc	.+32     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
 6ec:	28 0c       	add	r2, r8
 6ee:	92 2c       	mov	r9, r2
 6f0:	9b 18       	sub	r9, r11
 6f2:	0d c0       	rjmp	.+26     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 6f4:	b2 14       	cp	r11, r2
 6f6:	58 f4       	brcc	.+22     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 6f8:	b6 01       	movw	r22, r12
 6fa:	80 e2       	ldi	r24, 0x20	; 32
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	76 d0       	rcall	.+236    	; 0x7ec <fputc>
 700:	b3 94       	inc	r11
 702:	f8 cf       	rjmp	.-16     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 704:	b2 14       	cp	r11, r2
 706:	18 f4       	brcc	.+6      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 708:	2b 18       	sub	r2, r11
 70a:	02 c0       	rjmp	.+4      	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 70c:	98 2c       	mov	r9, r8
 70e:	21 2c       	mov	r2, r1
 710:	a4 fe       	sbrs	r10, 4
 712:	0f c0       	rjmp	.+30     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 714:	b6 01       	movw	r22, r12
 716:	80 e3       	ldi	r24, 0x30	; 48
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	68 d0       	rcall	.+208    	; 0x7ec <fputc>
 71c:	a2 fe       	sbrs	r10, 2
 71e:	16 c0       	rjmp	.+44     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 720:	a1 fc       	sbrc	r10, 1
 722:	03 c0       	rjmp	.+6      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
 724:	88 e7       	ldi	r24, 0x78	; 120
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 72a:	88 e5       	ldi	r24, 0x58	; 88
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	b6 01       	movw	r22, r12
 730:	0c c0       	rjmp	.+24     	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
 732:	8a 2d       	mov	r24, r10
 734:	86 78       	andi	r24, 0x86	; 134
 736:	51 f0       	breq	.+20     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 738:	a1 fe       	sbrs	r10, 1
 73a:	02 c0       	rjmp	.+4      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
 73c:	8b e2       	ldi	r24, 0x2B	; 43
 73e:	01 c0       	rjmp	.+2      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 740:	80 e2       	ldi	r24, 0x20	; 32
 742:	a7 fc       	sbrc	r10, 7
 744:	8d e2       	ldi	r24, 0x2D	; 45
 746:	b6 01       	movw	r22, r12
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	50 d0       	rcall	.+160    	; 0x7ec <fputc>
 74c:	89 14       	cp	r8, r9
 74e:	30 f4       	brcc	.+12     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 750:	b6 01       	movw	r22, r12
 752:	80 e3       	ldi	r24, 0x30	; 48
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	4a d0       	rcall	.+148    	; 0x7ec <fputc>
 758:	9a 94       	dec	r9
 75a:	f8 cf       	rjmp	.-16     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 75c:	8a 94       	dec	r8
 75e:	f3 01       	movw	r30, r6
 760:	e8 0d       	add	r30, r8
 762:	f1 1d       	adc	r31, r1
 764:	80 81       	ld	r24, Z
 766:	b6 01       	movw	r22, r12
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	40 d0       	rcall	.+128    	; 0x7ec <fputc>
 76c:	81 10       	cpse	r8, r1
 76e:	f6 cf       	rjmp	.-20     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 770:	22 20       	and	r2, r2
 772:	09 f4       	brne	.+2      	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 774:	4e ce       	rjmp	.-868    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 776:	b6 01       	movw	r22, r12
 778:	80 e2       	ldi	r24, 0x20	; 32
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	37 d0       	rcall	.+110    	; 0x7ec <fputc>
 77e:	2a 94       	dec	r2
 780:	f7 cf       	rjmp	.-18     	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 782:	f6 01       	movw	r30, r12
 784:	86 81       	ldd	r24, Z+6	; 0x06
 786:	97 81       	ldd	r25, Z+7	; 0x07
 788:	02 c0       	rjmp	.+4      	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	9f ef       	ldi	r25, 0xFF	; 255
 78e:	2b 96       	adiw	r28, 0x0b	; 11
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	f8 94       	cli
 794:	de bf       	out	0x3e, r29	; 62
 796:	0f be       	out	0x3f, r0	; 63
 798:	cd bf       	out	0x3d, r28	; 61
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	1f 91       	pop	r17
 7a0:	0f 91       	pop	r16
 7a2:	ff 90       	pop	r15
 7a4:	ef 90       	pop	r14
 7a6:	df 90       	pop	r13
 7a8:	cf 90       	pop	r12
 7aa:	bf 90       	pop	r11
 7ac:	af 90       	pop	r10
 7ae:	9f 90       	pop	r9
 7b0:	8f 90       	pop	r8
 7b2:	7f 90       	pop	r7
 7b4:	6f 90       	pop	r6
 7b6:	5f 90       	pop	r5
 7b8:	4f 90       	pop	r4
 7ba:	3f 90       	pop	r3
 7bc:	2f 90       	pop	r2
 7be:	08 95       	ret

000007c0 <strnlen_P>:
 7c0:	fc 01       	movw	r30, r24
 7c2:	05 90       	lpm	r0, Z+
 7c4:	61 50       	subi	r22, 0x01	; 1
 7c6:	70 40       	sbci	r23, 0x00	; 0
 7c8:	01 10       	cpse	r0, r1
 7ca:	d8 f7       	brcc	.-10     	; 0x7c2 <strnlen_P+0x2>
 7cc:	80 95       	com	r24
 7ce:	90 95       	com	r25
 7d0:	8e 0f       	add	r24, r30
 7d2:	9f 1f       	adc	r25, r31
 7d4:	08 95       	ret

000007d6 <strnlen>:
 7d6:	fc 01       	movw	r30, r24
 7d8:	61 50       	subi	r22, 0x01	; 1
 7da:	70 40       	sbci	r23, 0x00	; 0
 7dc:	01 90       	ld	r0, Z+
 7de:	01 10       	cpse	r0, r1
 7e0:	d8 f7       	brcc	.-10     	; 0x7d8 <strnlen+0x2>
 7e2:	80 95       	com	r24
 7e4:	90 95       	com	r25
 7e6:	8e 0f       	add	r24, r30
 7e8:	9f 1f       	adc	r25, r31
 7ea:	08 95       	ret

000007ec <fputc>:
 7ec:	0f 93       	push	r16
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	fb 01       	movw	r30, r22
 7f6:	23 81       	ldd	r18, Z+3	; 0x03
 7f8:	21 fd       	sbrc	r18, 1
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <fputc+0x16>
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	9f ef       	ldi	r25, 0xFF	; 255
 800:	2c c0       	rjmp	.+88     	; 0x85a <fputc+0x6e>
 802:	22 ff       	sbrs	r18, 2
 804:	16 c0       	rjmp	.+44     	; 0x832 <fputc+0x46>
 806:	46 81       	ldd	r20, Z+6	; 0x06
 808:	57 81       	ldd	r21, Z+7	; 0x07
 80a:	24 81       	ldd	r18, Z+4	; 0x04
 80c:	35 81       	ldd	r19, Z+5	; 0x05
 80e:	42 17       	cp	r20, r18
 810:	53 07       	cpc	r21, r19
 812:	44 f4       	brge	.+16     	; 0x824 <fputc+0x38>
 814:	a0 81       	ld	r26, Z
 816:	b1 81       	ldd	r27, Z+1	; 0x01
 818:	9d 01       	movw	r18, r26
 81a:	2f 5f       	subi	r18, 0xFF	; 255
 81c:	3f 4f       	sbci	r19, 0xFF	; 255
 81e:	31 83       	std	Z+1, r19	; 0x01
 820:	20 83       	st	Z, r18
 822:	8c 93       	st	X, r24
 824:	26 81       	ldd	r18, Z+6	; 0x06
 826:	37 81       	ldd	r19, Z+7	; 0x07
 828:	2f 5f       	subi	r18, 0xFF	; 255
 82a:	3f 4f       	sbci	r19, 0xFF	; 255
 82c:	37 83       	std	Z+7, r19	; 0x07
 82e:	26 83       	std	Z+6, r18	; 0x06
 830:	14 c0       	rjmp	.+40     	; 0x85a <fputc+0x6e>
 832:	8b 01       	movw	r16, r22
 834:	ec 01       	movw	r28, r24
 836:	fb 01       	movw	r30, r22
 838:	00 84       	ldd	r0, Z+8	; 0x08
 83a:	f1 85       	ldd	r31, Z+9	; 0x09
 83c:	e0 2d       	mov	r30, r0
 83e:	09 95       	icall
 840:	89 2b       	or	r24, r25
 842:	e1 f6       	brne	.-72     	; 0x7fc <fputc+0x10>
 844:	d8 01       	movw	r26, r16
 846:	16 96       	adiw	r26, 0x06	; 6
 848:	8d 91       	ld	r24, X+
 84a:	9c 91       	ld	r25, X
 84c:	17 97       	sbiw	r26, 0x07	; 7
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	17 96       	adiw	r26, 0x07	; 7
 852:	9c 93       	st	X, r25
 854:	8e 93       	st	-X, r24
 856:	16 97       	sbiw	r26, 0x06	; 6
 858:	ce 01       	movw	r24, r28
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	1f 91       	pop	r17
 860:	0f 91       	pop	r16
 862:	08 95       	ret

00000864 <__ultoa_invert>:
 864:	fa 01       	movw	r30, r20
 866:	aa 27       	eor	r26, r26
 868:	28 30       	cpi	r18, 0x08	; 8
 86a:	51 f1       	breq	.+84     	; 0x8c0 <__ultoa_invert+0x5c>
 86c:	20 31       	cpi	r18, 0x10	; 16
 86e:	81 f1       	breq	.+96     	; 0x8d0 <__ultoa_invert+0x6c>
 870:	e8 94       	clt
 872:	6f 93       	push	r22
 874:	6e 7f       	andi	r22, 0xFE	; 254
 876:	6e 5f       	subi	r22, 0xFE	; 254
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	af 4f       	sbci	r26, 0xFF	; 255
 880:	b1 e0       	ldi	r27, 0x01	; 1
 882:	3e d0       	rcall	.+124    	; 0x900 <__ultoa_invert+0x9c>
 884:	b4 e0       	ldi	r27, 0x04	; 4
 886:	3c d0       	rcall	.+120    	; 0x900 <__ultoa_invert+0x9c>
 888:	67 0f       	add	r22, r23
 88a:	78 1f       	adc	r23, r24
 88c:	89 1f       	adc	r24, r25
 88e:	9a 1f       	adc	r25, r26
 890:	a1 1d       	adc	r26, r1
 892:	68 0f       	add	r22, r24
 894:	79 1f       	adc	r23, r25
 896:	8a 1f       	adc	r24, r26
 898:	91 1d       	adc	r25, r1
 89a:	a1 1d       	adc	r26, r1
 89c:	6a 0f       	add	r22, r26
 89e:	71 1d       	adc	r23, r1
 8a0:	81 1d       	adc	r24, r1
 8a2:	91 1d       	adc	r25, r1
 8a4:	a1 1d       	adc	r26, r1
 8a6:	20 d0       	rcall	.+64     	; 0x8e8 <__ultoa_invert+0x84>
 8a8:	09 f4       	brne	.+2      	; 0x8ac <__ultoa_invert+0x48>
 8aa:	68 94       	set
 8ac:	3f 91       	pop	r19
 8ae:	2a e0       	ldi	r18, 0x0A	; 10
 8b0:	26 9f       	mul	r18, r22
 8b2:	11 24       	eor	r1, r1
 8b4:	30 19       	sub	r19, r0
 8b6:	30 5d       	subi	r19, 0xD0	; 208
 8b8:	31 93       	st	Z+, r19
 8ba:	de f6       	brtc	.-74     	; 0x872 <__ultoa_invert+0xe>
 8bc:	cf 01       	movw	r24, r30
 8be:	08 95       	ret
 8c0:	46 2f       	mov	r20, r22
 8c2:	47 70       	andi	r20, 0x07	; 7
 8c4:	40 5d       	subi	r20, 0xD0	; 208
 8c6:	41 93       	st	Z+, r20
 8c8:	b3 e0       	ldi	r27, 0x03	; 3
 8ca:	0f d0       	rcall	.+30     	; 0x8ea <__ultoa_invert+0x86>
 8cc:	c9 f7       	brne	.-14     	; 0x8c0 <__ultoa_invert+0x5c>
 8ce:	f6 cf       	rjmp	.-20     	; 0x8bc <__ultoa_invert+0x58>
 8d0:	46 2f       	mov	r20, r22
 8d2:	4f 70       	andi	r20, 0x0F	; 15
 8d4:	40 5d       	subi	r20, 0xD0	; 208
 8d6:	4a 33       	cpi	r20, 0x3A	; 58
 8d8:	18 f0       	brcs	.+6      	; 0x8e0 <__ultoa_invert+0x7c>
 8da:	49 5d       	subi	r20, 0xD9	; 217
 8dc:	31 fd       	sbrc	r19, 1
 8de:	40 52       	subi	r20, 0x20	; 32
 8e0:	41 93       	st	Z+, r20
 8e2:	02 d0       	rcall	.+4      	; 0x8e8 <__ultoa_invert+0x84>
 8e4:	a9 f7       	brne	.-22     	; 0x8d0 <__ultoa_invert+0x6c>
 8e6:	ea cf       	rjmp	.-44     	; 0x8bc <__ultoa_invert+0x58>
 8e8:	b4 e0       	ldi	r27, 0x04	; 4
 8ea:	a6 95       	lsr	r26
 8ec:	97 95       	ror	r25
 8ee:	87 95       	ror	r24
 8f0:	77 95       	ror	r23
 8f2:	67 95       	ror	r22
 8f4:	ba 95       	dec	r27
 8f6:	c9 f7       	brne	.-14     	; 0x8ea <__ultoa_invert+0x86>
 8f8:	00 97       	sbiw	r24, 0x00	; 0
 8fa:	61 05       	cpc	r22, r1
 8fc:	71 05       	cpc	r23, r1
 8fe:	08 95       	ret
 900:	9b 01       	movw	r18, r22
 902:	ac 01       	movw	r20, r24
 904:	0a 2e       	mov	r0, r26
 906:	06 94       	lsr	r0
 908:	57 95       	ror	r21
 90a:	47 95       	ror	r20
 90c:	37 95       	ror	r19
 90e:	27 95       	ror	r18
 910:	ba 95       	dec	r27
 912:	c9 f7       	brne	.-14     	; 0x906 <__ultoa_invert+0xa2>
 914:	62 0f       	add	r22, r18
 916:	73 1f       	adc	r23, r19
 918:	84 1f       	adc	r24, r20
 91a:	95 1f       	adc	r25, r21
 91c:	a0 1d       	adc	r26, r0
 91e:	08 95       	ret

00000920 <_exit>:
 920:	f8 94       	cli

00000922 <__stop_program>:
 922:	ff cf       	rjmp	.-2      	; 0x922 <__stop_program>
