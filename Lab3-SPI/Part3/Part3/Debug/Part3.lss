
Part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000414  000004a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800114  00800114  000004bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db1  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  00001385  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f6  00000000  00000000  00001cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000023ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054c  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c0  00000000  00000000  00002a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002d1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e1       	ldi	r30, 0x14	; 20
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 31       	cpi	r26, 0x1D	; 29
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1f d1       	rcall	.+574    	; 0x302 <main>
  c4:	a5 c1       	rjmp	.+842    	; 0x410 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
#define E 1			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
  c8:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_avr_timer_M>
  cc:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_avr_timer_M+0x1>
  d0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_M+0x2>
  d4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_M+0x3>
  d8:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <__data_end>
  dc:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <__data_end+0x1>
  e0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end+0x2>
  e4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 10e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 112:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 116:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 11a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 11e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 122:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 126:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 148:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 14c:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 150:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 15e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 162:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 166:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <TimerFlag>
 178:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 17c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 180:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 184:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 188:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 18c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 190:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 194:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <GetKeypadKey>:
 1aa:	8f ee       	ldi	r24, 0xEF	; 239
 1ac:	88 b9       	out	0x08, r24	; 8
 1ae:	00 00       	nop
 1b0:	30 9b       	sbis	0x06, 0	; 6
 1b2:	29 c0       	rjmp	.+82     	; 0x206 <GetKeypadKey+0x5c>
 1b4:	31 9b       	sbis	0x06, 1	; 6
 1b6:	29 c0       	rjmp	.+82     	; 0x20a <GetKeypadKey+0x60>
 1b8:	32 9b       	sbis	0x06, 2	; 6
 1ba:	29 c0       	rjmp	.+82     	; 0x20e <GetKeypadKey+0x64>
 1bc:	33 9b       	sbis	0x06, 3	; 6
 1be:	29 c0       	rjmp	.+82     	; 0x212 <GetKeypadKey+0x68>
 1c0:	8f ed       	ldi	r24, 0xDF	; 223
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	00 00       	nop
 1c6:	30 9b       	sbis	0x06, 0	; 6
 1c8:	26 c0       	rjmp	.+76     	; 0x216 <GetKeypadKey+0x6c>
 1ca:	31 9b       	sbis	0x06, 1	; 6
 1cc:	26 c0       	rjmp	.+76     	; 0x21a <GetKeypadKey+0x70>
 1ce:	32 9b       	sbis	0x06, 2	; 6
 1d0:	26 c0       	rjmp	.+76     	; 0x21e <GetKeypadKey+0x74>
 1d2:	33 9b       	sbis	0x06, 3	; 6
 1d4:	26 c0       	rjmp	.+76     	; 0x222 <GetKeypadKey+0x78>
 1d6:	8f eb       	ldi	r24, 0xBF	; 191
 1d8:	88 b9       	out	0x08, r24	; 8
 1da:	00 00       	nop
 1dc:	30 9b       	sbis	0x06, 0	; 6
 1de:	23 c0       	rjmp	.+70     	; 0x226 <GetKeypadKey+0x7c>
 1e0:	31 9b       	sbis	0x06, 1	; 6
 1e2:	23 c0       	rjmp	.+70     	; 0x22a <GetKeypadKey+0x80>
 1e4:	32 9b       	sbis	0x06, 2	; 6
 1e6:	23 c0       	rjmp	.+70     	; 0x22e <GetKeypadKey+0x84>
 1e8:	33 9b       	sbis	0x06, 3	; 6
 1ea:	23 c0       	rjmp	.+70     	; 0x232 <GetKeypadKey+0x88>
 1ec:	8f e7       	ldi	r24, 0x7F	; 127
 1ee:	88 b9       	out	0x08, r24	; 8
 1f0:	00 00       	nop
 1f2:	30 9b       	sbis	0x06, 0	; 6
 1f4:	20 c0       	rjmp	.+64     	; 0x236 <GetKeypadKey+0x8c>
 1f6:	31 9b       	sbis	0x06, 1	; 6
 1f8:	20 c0       	rjmp	.+64     	; 0x23a <GetKeypadKey+0x90>
 1fa:	32 9b       	sbis	0x06, 2	; 6
 1fc:	20 c0       	rjmp	.+64     	; 0x23e <GetKeypadKey+0x94>
 1fe:	33 9b       	sbis	0x06, 3	; 6
 200:	20 c0       	rjmp	.+64     	; 0x242 <GetKeypadKey+0x98>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	81 e3       	ldi	r24, 0x31	; 49
 208:	08 95       	ret
 20a:	84 e3       	ldi	r24, 0x34	; 52
 20c:	08 95       	ret
 20e:	87 e3       	ldi	r24, 0x37	; 55
 210:	08 95       	ret
 212:	8a e2       	ldi	r24, 0x2A	; 42
 214:	08 95       	ret
 216:	82 e3       	ldi	r24, 0x32	; 50
 218:	08 95       	ret
 21a:	85 e3       	ldi	r24, 0x35	; 53
 21c:	08 95       	ret
 21e:	88 e3       	ldi	r24, 0x38	; 56
 220:	08 95       	ret
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	08 95       	ret
 226:	83 e3       	ldi	r24, 0x33	; 51
 228:	08 95       	ret
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	08 95       	ret
 22e:	89 e3       	ldi	r24, 0x39	; 57
 230:	08 95       	ret
 232:	83 e2       	ldi	r24, 0x23	; 35
 234:	08 95       	ret
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	08 95       	ret
 23a:	82 e4       	ldi	r24, 0x42	; 66
 23c:	08 95       	ret
 23e:	83 e4       	ldi	r24, 0x43	; 67
 240:	08 95       	ret
 242:	84 e4       	ldi	r24, 0x44	; 68
 244:	08 95       	ret

00000246 <delay_ms>:
 246:	18 16       	cp	r1, r24
 248:	19 06       	cpc	r1, r25
 24a:	5c f0       	brlt	.+22     	; 0x262 <delay_ms+0x1c>
 24c:	08 95       	ret
 24e:	00 00       	nop
 250:	21 50       	subi	r18, 0x01	; 1
 252:	31 09       	sbc	r19, r1
 254:	e1 f7       	brne	.-8      	; 0x24e <delay_ms+0x8>
 256:	4f 5f       	subi	r20, 0xFF	; 255
 258:	5f 4f       	sbci	r21, 0xFF	; 255
 25a:	84 17       	cp	r24, r20
 25c:	95 07       	cpc	r25, r21
 25e:	19 f4       	brne	.+6      	; 0x266 <delay_ms+0x20>
 260:	08 95       	ret
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	27 e0       	ldi	r18, 0x07	; 7
 268:	33 e0       	ldi	r19, 0x03	; 3
 26a:	f1 cf       	rjmp	.-30     	; 0x24e <delay_ms+0x8>

0000026c <LCD_WriteCommand>:
 26c:	10 98       	cbi	0x02, 0	; 2
 26e:	8b b9       	out	0x0b, r24	; 11
 270:	11 9a       	sbi	0x02, 1	; 2
 272:	00 00       	nop
 274:	11 98       	cbi	0x02, 1	; 2
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	e5 cf       	rjmp	.-54     	; 0x246 <delay_ms>
 27c:	08 95       	ret

0000027e <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 27e:	81 31       	cpi	r24, 0x11	; 17
 280:	18 f4       	brcc	.+6      	; 0x288 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 282:	81 58       	subi	r24, 0x81	; 129
 284:	f3 cf       	rjmp	.-26     	; 0x26c <LCD_WriteCommand>
 286:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 288:	81 55       	subi	r24, 0x51	; 81
 28a:	f0 cf       	rjmp	.-32     	; 0x26c <LCD_WriteCommand>
 28c:	08 95       	ret

0000028e <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 28e:	84 e6       	ldi	r24, 0x64	; 100
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	d9 df       	rcall	.-78     	; 0x246 <delay_ms>
	LCD_WriteCommand(0x38);
 294:	88 e3       	ldi	r24, 0x38	; 56
 296:	ea df       	rcall	.-44     	; 0x26c <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	e8 df       	rcall	.-48     	; 0x26c <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 29c:	8f e0       	ldi	r24, 0x0F	; 15
 29e:	e6 df       	rcall	.-52     	; 0x26c <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	e4 df       	rcall	.-56     	; 0x26c <LCD_WriteCommand>
	delay_ms(10);						 
 2a4:	8a e0       	ldi	r24, 0x0A	; 10
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	ce cf       	rjmp	.-100    	; 0x246 <delay_ms>
 2aa:	08 95       	ret

000002ac <LCD_WriteData>:
 2ac:	10 9a       	sbi	0x02, 0	; 2
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 2ae:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 2b0:	11 9a       	sbi	0x02, 1	; 2
   asm("nop");
 2b2:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 2b4:	11 98       	cbi	0x02, 1	; 2
   delay_ms(1);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	c5 cf       	rjmp	.-118    	; 0x246 <delay_ms>
 2bc:	08 95       	ret

000002be <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 2c4:	fb 01       	movw	r30, r22
 2c6:	90 81       	ld	r25, Z
 2c8:	99 23       	and	r25, r25
 2ca:	51 f0       	breq	.+20     	; 0x2e0 <LCD_DisplayString+0x22>
 2cc:	eb 01       	movw	r28, r22
      LCD_Cursor(c++);
 2ce:	11 e0       	ldi	r17, 0x01	; 1
 2d0:	18 0f       	add	r17, r24
 2d2:	d5 df       	rcall	.-86     	; 0x27e <LCD_Cursor>
      LCD_WriteData(*string++);
 2d4:	89 91       	ld	r24, Y+
 2d6:	ea df       	rcall	.-44     	; 0x2ac <LCD_WriteData>

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 2d8:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 2da:	98 81       	ld	r25, Y
 2dc:	91 11       	cpse	r25, r1
 2de:	f7 cf       	rjmp	.-18     	; 0x2ce <LCD_DisplayString+0x10>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	08 95       	ret

000002e8 <SPI_MasterInit>:
	}
}

void SPI_MasterInit(void) {
	
	DDRB =  (1 << DDB5) | (1 << DDB7) | (1 << DDB4);
 2e8:	80 eb       	ldi	r24, 0xB0	; 176
 2ea:	84 b9       	out	0x04, r24	; 4
	SPCR =  (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 2ec:	81 e5       	ldi	r24, 0x51	; 81
 2ee:	8c bd       	out	0x2c, r24	; 44
	sei();
 2f0:	78 94       	sei
 2f2:	08 95       	ret

000002f4 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData) {
	SPDR = cData;
 2f4:	8e bd       	out	0x2e, r24	; 46
	
	PORTB &= 0xEF;
 2f6:	2c 98       	cbi	0x05, 4	; 5
	
	while(!(SPSR & (1 << SPIF)));
 2f8:	0d b4       	in	r0, 0x2d	; 45
 2fa:	07 fe       	sbrs	r0, 7
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <SPI_MasterTransmit+0x4>
	
	PORTB |= 0x10;
 2fe:	2c 9a       	sbi	0x05, 4	; 5
 300:	08 95       	ret

00000302 <main>:
void SPI_MasterInit(void);
void SPI_MasterTransmit(char cData);

int main(void)
{
	DDRA = 0xFF; PORTA = 0x00;
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	81 b9       	out	0x01, r24	; 1
 306:	12 b8       	out	0x02, r1	; 2
				 PORTB = 0x40;
 308:	90 e4       	ldi	r25, 0x40	; 64
 30a:	95 b9       	out	0x05, r25	; 5
	DDRC = 0x00; PORTC = 0xFF;
 30c:	17 b8       	out	0x07, r1	; 7
 30e:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF; PORTD = 0x00;
 310:	8a b9       	out	0x0a, r24	; 10
 312:	1b b8       	out	0x0b, r1	; 11
	
	TimerSet(10);
 314:	6a e0       	ldi	r22, 0x0A	; 10
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	d5 de       	rcall	.-598    	; 0xc8 <TimerSet>
	TimerOn();
 31e:	e5 de       	rcall	.-566    	; 0xea <TimerOn>
	LCD_init();
 320:	b6 df       	rcall	.-148    	; 0x28e <LCD_init>
	
	SPI_MasterInit();
 322:	e2 df       	rcall	.-60     	; 0x2e8 <SPI_MasterInit>
 324:	42 df       	rcall	.-380    	; 0x1aa <GetKeypadKey>
	
	while (1)
	{
		keypadInput = GetKeypadKey();
 326:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <keypadInput>
 32a:	90 ed       	ldi	r25, 0xD0	; 208
 32c:	98 0f       	add	r25, r24
		if(keypadInput >= '0' && keypadInput <= '9'){
 32e:	9a 30       	cpi	r25, 0x0A	; 10
 330:	08 f0       	brcs	.+2      	; 0x334 <main+0x32>
 332:	42 c0       	rjmp	.+132    	; 0x3b8 <main+0xb6>
 334:	85 33       	cpi	r24, 0x35	; 53
 336:	18 f4       	brcc	.+6      	; 0x33e <main+0x3c>
			if(keypadInput > '4' || keypadInput == '0') {
 338:	80 33       	cpi	r24, 0x30	; 48
 33a:	31 f5       	brne	.+76     	; 0x388 <main+0x86>
 33c:	65 c0       	rjmp	.+202    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 33e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <LEDData>
				LEDData &= 0xF0;
 342:	90 7f       	andi	r25, 0xF0	; 240
 344:	85 33       	cpi	r24, 0x35	; 53
 346:	21 f4       	brne	.+8      	; 0x350 <main+0x4e>
				if(keypadInput == '5'){
 348:	91 60       	ori	r25, 0x01	; 1
 34a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <LEDData>
					LEDData |= 0x01;
 34e:	34 c0       	rjmp	.+104    	; 0x3b8 <main+0xb6>
 350:	86 33       	cpi	r24, 0x36	; 54
 352:	21 f4       	brne	.+8      	; 0x35c <main+0x5a>
				}
				else if(keypadInput == '6'){
 354:	92 60       	ori	r25, 0x02	; 2
 356:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <LEDData>
					LEDData |= 0x02;
 35a:	2e c0       	rjmp	.+92     	; 0x3b8 <main+0xb6>
 35c:	87 33       	cpi	r24, 0x37	; 55
 35e:	21 f4       	brne	.+8      	; 0x368 <main+0x66>
				}
				else if(keypadInput == '7'){
 360:	93 60       	ori	r25, 0x03	; 3
 362:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <LEDData>
					LEDData |= 0x03;
 366:	28 c0       	rjmp	.+80     	; 0x3b8 <main+0xb6>
 368:	88 33       	cpi	r24, 0x38	; 56
 36a:	21 f4       	brne	.+8      	; 0x374 <main+0x72>
				}
				else if(keypadInput == '8'){
 36c:	94 60       	ori	r25, 0x04	; 4
 36e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <LEDData>
					LEDData |= 0x04;
 372:	22 c0       	rjmp	.+68     	; 0x3b8 <main+0xb6>
 374:	89 33       	cpi	r24, 0x39	; 57
 376:	21 f4       	brne	.+8      	; 0x380 <main+0x7e>
				}
				else if(keypadInput == '9'){
 378:	95 60       	ori	r25, 0x05	; 5
 37a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <LEDData>
					LEDData |= 0x05;
 37e:	1c c0       	rjmp	.+56     	; 0x3b8 <main+0xb6>
 380:	96 60       	ori	r25, 0x06	; 6
 382:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <LEDData>
				}
				else {//if(keypadInput == '0'){
					LEDData |= 0x06;
 386:	18 c0       	rjmp	.+48     	; 0x3b8 <main+0xb6>
 388:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <LEDData>
				}
			}
			else if(keypadInput <= '4') {
				LEDData &= 0x0F;
 38c:	9f 70       	andi	r25, 0x0F	; 15
 38e:	81 33       	cpi	r24, 0x31	; 49
 390:	21 f4       	brne	.+8      	; 0x39a <main+0x98>
				if(keypadInput == '1') {
 392:	90 61       	ori	r25, 0x10	; 16
 394:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <LEDData>
					LEDData |= 0x10;
 398:	0f c0       	rjmp	.+30     	; 0x3b8 <main+0xb6>
 39a:	82 33       	cpi	r24, 0x32	; 50
 39c:	21 f4       	brne	.+8      	; 0x3a6 <main+0xa4>
				}
				else if(keypadInput == '2'){
 39e:	90 62       	ori	r25, 0x20	; 32
 3a0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <LEDData>
					LEDData |= 0x20;
 3a4:	09 c0       	rjmp	.+18     	; 0x3b8 <main+0xb6>
 3a6:	83 33       	cpi	r24, 0x33	; 51
 3a8:	21 f4       	brne	.+8      	; 0x3b2 <main+0xb0>
				}
				else if(keypadInput == '3'){
 3aa:	90 63       	ori	r25, 0x30	; 48
 3ac:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <LEDData>
					LEDData |= 0x30;
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <main+0xb6>
 3b2:	90 64       	ori	r25, 0x40	; 64
 3b4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <LEDData>
				}
				else { //if(keypadInput == '4'){
					LEDData |= 0x40;
 3b8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <LEDData>
				}
				
			}
		}
		
		upper = ((LEDData & 0xF0) >> 4);
 3bc:	98 2f       	mov	r25, r24
 3be:	92 95       	swap	r25
 3c0:	9f 70       	andi	r25, 0x0F	; 15
 3c2:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <upper>
 3c6:	8f 70       	andi	r24, 0x0F	; 15
 3c8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <lower>
		lower = LEDData & 0x0F;
 3cc:	6a e0       	ldi	r22, 0x0A	; 10
		
		LCD_DisplayString(1, PATTERN);
 3ce:	71 e0       	ldi	r23, 0x01	; 1
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	75 df       	rcall	.-278    	; 0x2be <LCD_DisplayString>
 3d4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <upper>
		LCD_WriteData(upper + '0');
 3d8:	80 5d       	subi	r24, 0xD0	; 208
 3da:	68 df       	rcall	.-304    	; 0x2ac <LCD_WriteData>
 3dc:	65 e0       	ldi	r22, 0x05	; 5
		LCD_DisplayString(9, SPEED);
 3de:	71 e0       	ldi	r23, 0x01	; 1
 3e0:	89 e0       	ldi	r24, 0x09	; 9
 3e2:	6d df       	rcall	.-294    	; 0x2be <LCD_DisplayString>
 3e4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <lower>
		LCD_WriteData(lower + '0');
 3e8:	80 5d       	subi	r24, 0xD0	; 208
 3ea:	60 df       	rcall	.-320    	; 0x2ac <LCD_WriteData>
 3ec:	60 e0       	ldi	r22, 0x00	; 0
		LCD_DisplayString(16, CONTROLLER);
 3ee:	71 e0       	ldi	r23, 0x01	; 1
 3f0:	80 e1       	ldi	r24, 0x10	; 16
 3f2:	65 df       	rcall	.-310    	; 0x2be <LCD_DisplayString>
 3f4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <LEDData>
		
		SPI_MasterTransmit(LEDData);
 3f8:	7d df       	rcall	.-262    	; 0x2f4 <SPI_MasterTransmit>
 3fa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TimerFlag>
 3fe:	88 23       	and	r24, r24
		
		while(!TimerFlag);
 400:	e1 f3       	breq	.-8      	; 0x3fa <main+0xf8>
 402:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <TimerFlag>
 406:	8e cf       	rjmp	.-228    	; 0x324 <main+0x22>
		TimerFlag = 0;
 408:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <LEDData>
	}
 40c:	90 7f       	andi	r25, 0xF0	; 240
	while (1)
	{
		keypadInput = GetKeypadKey();
		if(keypadInput >= '0' && keypadInput <= '9'){
			if(keypadInput > '4' || keypadInput == '0') {
				LEDData &= 0xF0;
 40e:	b8 cf       	rjmp	.-144    	; 0x380 <main+0x7e>

00000410 <_exit>:
 410:	f8 94       	cli

00000412 <__stop_program>:
 412:	ff cf       	rjmp	.-2      	; 0x412 <__stop_program>
