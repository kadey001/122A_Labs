
Part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000046e  00000502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800118  00800118  0000051a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de0  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b8  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000023fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055b  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c0  00000000  00000000  00002abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002d7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	58 c0       	rjmp	.+176    	; 0xb2 <__ctors_end>
   2:	00 00       	nop
   4:	73 c0       	rjmp	.+230    	; 0xec <__bad_interrupt>
   6:	00 00       	nop
   8:	71 c0       	rjmp	.+226    	; 0xec <__bad_interrupt>
   a:	00 00       	nop
   c:	6f c0       	rjmp	.+222    	; 0xec <__bad_interrupt>
   e:	00 00       	nop
  10:	6d c0       	rjmp	.+218    	; 0xec <__bad_interrupt>
  12:	00 00       	nop
  14:	6b c0       	rjmp	.+214    	; 0xec <__bad_interrupt>
  16:	00 00       	nop
  18:	69 c0       	rjmp	.+210    	; 0xec <__bad_interrupt>
  1a:	00 00       	nop
  1c:	67 c0       	rjmp	.+206    	; 0xec <__bad_interrupt>
  1e:	00 00       	nop
  20:	65 c0       	rjmp	.+202    	; 0xec <__bad_interrupt>
  22:	00 00       	nop
  24:	63 c0       	rjmp	.+198    	; 0xec <__bad_interrupt>
  26:	00 00       	nop
  28:	61 c0       	rjmp	.+194    	; 0xec <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5f c0       	rjmp	.+190    	; 0xec <__bad_interrupt>
  2e:	00 00       	nop
  30:	5d c0       	rjmp	.+186    	; 0xec <__bad_interrupt>
  32:	00 00       	nop
  34:	91 c0       	rjmp	.+290    	; 0x158 <__vector_13>
  36:	00 00       	nop
  38:	59 c0       	rjmp	.+178    	; 0xec <__bad_interrupt>
  3a:	00 00       	nop
  3c:	57 c0       	rjmp	.+174    	; 0xec <__bad_interrupt>
  3e:	00 00       	nop
  40:	55 c0       	rjmp	.+170    	; 0xec <__bad_interrupt>
  42:	00 00       	nop
  44:	53 c0       	rjmp	.+166    	; 0xec <__bad_interrupt>
  46:	00 00       	nop
  48:	51 c0       	rjmp	.+162    	; 0xec <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4f c0       	rjmp	.+158    	; 0xec <__bad_interrupt>
  4e:	00 00       	nop
  50:	4d c0       	rjmp	.+154    	; 0xec <__bad_interrupt>
  52:	00 00       	nop
  54:	4b c0       	rjmp	.+150    	; 0xec <__bad_interrupt>
  56:	00 00       	nop
  58:	49 c0       	rjmp	.+146    	; 0xec <__bad_interrupt>
  5a:	00 00       	nop
  5c:	47 c0       	rjmp	.+142    	; 0xec <__bad_interrupt>
  5e:	00 00       	nop
  60:	45 c0       	rjmp	.+138    	; 0xec <__bad_interrupt>
  62:	00 00       	nop
  64:	43 c0       	rjmp	.+134    	; 0xec <__bad_interrupt>
  66:	00 00       	nop
  68:	41 c0       	rjmp	.+130    	; 0xec <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3f c0       	rjmp	.+126    	; 0xec <__bad_interrupt>
  6e:	00 00       	nop
  70:	3d c0       	rjmp	.+122    	; 0xec <__bad_interrupt>
  72:	00 00       	nop
  74:	3b c0       	rjmp	.+118    	; 0xec <__bad_interrupt>
  76:	00 00       	nop
  78:	39 c0       	rjmp	.+114    	; 0xec <__bad_interrupt>
  7a:	00 00       	nop
  7c:	37 c0       	rjmp	.+110    	; 0xec <__bad_interrupt>
  7e:	00 00       	nop
  80:	35 c0       	rjmp	.+106    	; 0xec <__bad_interrupt>
  82:	00 00       	nop
  84:	33 c0       	rjmp	.+102    	; 0xec <__bad_interrupt>
  86:	00 00       	nop
  88:	31 c0       	rjmp	.+98     	; 0xec <__bad_interrupt>
  8a:	00 00       	nop
  8c:	be 01       	movw	r22, r28
  8e:	c5 01       	movw	r24, r10
  90:	03 02       	muls	r16, r19
  92:	cc 01       	movw	r24, r24
  94:	d3 01       	movw	r26, r6
  96:	03 02       	muls	r16, r19
  98:	da 01       	movw	r26, r20
  9a:	e1 01       	movw	r28, r2
  9c:	03 02       	muls	r16, r19
  9e:	03 02       	muls	r16, r19
  a0:	03 02       	muls	r16, r19
  a2:	03 02       	muls	r16, r19
  a4:	03 02       	muls	r16, r19
  a6:	03 02       	muls	r16, r19
  a8:	03 02       	muls	r16, r19
  aa:	e8 01       	movw	r28, r16
  ac:	ef 01       	movw	r28, r30
  ae:	f6 01       	movw	r30, r12
  b0:	fd 01       	movw	r30, r26

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf ef       	ldi	r28, 0xFF	; 255
  b8:	d0 e4       	ldi	r29, 0x40	; 64
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	ee e6       	ldi	r30, 0x6E	; 110
  c6:	f4 e0       	ldi	r31, 0x04	; 4
  c8:	00 e0       	ldi	r16, 0x00	; 0
  ca:	0b bf       	out	0x3b, r16	; 59
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x14>
  ce:	07 90       	elpm	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	a8 31       	cpi	r26, 0x18	; 24
  d4:	b1 07       	cpc	r27, r17
  d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0x10>

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a8 e1       	ldi	r26, 0x18	; 24
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	a2 32       	cpi	r26, 0x22	; 34
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	22 d1       	rcall	.+580    	; 0x32e <main>
  ea:	bf c1       	rjmp	.+894    	; 0x46a <_exit>

000000ec <__bad_interrupt>:
  ec:	89 cf       	rjmp	.-238    	; 0x0 <__vectors>

000000ee <TimerSet>:
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
}
  ee:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <_avr_timer_M>
  f2:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <_avr_timer_M+0x1>
  f6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_avr_timer_M+0x2>
  fa:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_avr_timer_M+0x3>
  fe:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <__data_end>
 102:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <__data_end+0x1>
 106:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end+0x2>
 10a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x3>
 10e:	08 95       	ret

00000110 <TimerOn>:
 110:	8b e0       	ldi	r24, 0x0B	; 11
 112:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 116:	8d e7       	ldi	r24, 0x7D	; 125
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 11e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 128:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 12c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 130:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_avr_timer_M>
 134:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_avr_timer_M+0x1>
 138:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <_avr_timer_M+0x2>
 13c:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <_avr_timer_M+0x3>
 140:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 144:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 148:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 14c:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
 150:	8f b7       	in	r24, 0x3f	; 63
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8f bf       	out	0x3f, r24	; 63
 156:	08 95       	ret

00000158 <__vector_13>:
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 16e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 172:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
 176:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	a1 09       	sbc	r26, r1
 17e:	b1 09       	sbc	r27, r1
 180:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 184:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 188:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 18c:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
 190:	89 2b       	or	r24, r25
 192:	8a 2b       	or	r24, r26
 194:	8b 2b       	or	r24, r27
 196:	99 f4       	brne	.+38     	; 0x1be <__vector_13+0x66>
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <TimerFlag>
 19e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_avr_timer_M>
 1a2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_avr_timer_M+0x1>
 1a6:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <_avr_timer_M+0x2>
 1aa:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <_avr_timer_M+0x3>
 1ae:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 1b2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 1b6:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 1ba:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
signed char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
 1d0:	8f ee       	ldi	r24, 0xEF	; 239
 1d2:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 1d4:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 1d6:	30 9b       	sbis	0x06, 0	; 6
 1d8:	29 c0       	rjmp	.+82     	; 0x22c <GetKeypadKey+0x5c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 1da:	31 9b       	sbis	0x06, 1	; 6
 1dc:	29 c0       	rjmp	.+82     	; 0x230 <GetKeypadKey+0x60>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 1de:	32 9b       	sbis	0x06, 2	; 6
 1e0:	29 c0       	rjmp	.+82     	; 0x234 <GetKeypadKey+0x64>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 1e2:	33 9b       	sbis	0x06, 3	; 6
 1e4:	29 c0       	rjmp	.+82     	; 0x238 <GetKeypadKey+0x68>

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
 1e6:	8f ed       	ldi	r24, 0xDF	; 223
 1e8:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 1ea:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 1ec:	30 9b       	sbis	0x06, 0	; 6
 1ee:	26 c0       	rjmp	.+76     	; 0x23c <GetKeypadKey+0x6c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 1f0:	31 9b       	sbis	0x06, 1	; 6
 1f2:	26 c0       	rjmp	.+76     	; 0x240 <GetKeypadKey+0x70>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 1f4:	32 9b       	sbis	0x06, 2	; 6
 1f6:	26 c0       	rjmp	.+76     	; 0x244 <GetKeypadKey+0x74>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 1f8:	33 9b       	sbis	0x06, 3	; 6
 1fa:	26 c0       	rjmp	.+76     	; 0x248 <GetKeypadKey+0x78>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
 1fc:	8f eb       	ldi	r24, 0xBF	; 191
 1fe:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 200:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 202:	30 9b       	sbis	0x06, 0	; 6
 204:	23 c0       	rjmp	.+70     	; 0x24c <GetKeypadKey+0x7c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 206:	31 9b       	sbis	0x06, 1	; 6
 208:	23 c0       	rjmp	.+70     	; 0x250 <GetKeypadKey+0x80>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 20a:	32 9b       	sbis	0x06, 2	; 6
 20c:	23 c0       	rjmp	.+70     	; 0x254 <GetKeypadKey+0x84>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 20e:	33 9b       	sbis	0x06, 3	; 6
 210:	23 c0       	rjmp	.+70     	; 0x258 <GetKeypadKey+0x88>

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
 212:	8f e7       	ldi	r24, 0x7F	; 127
 214:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 216:	00 00       	nop
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 218:	30 9b       	sbis	0x06, 0	; 6
 21a:	20 c0       	rjmp	.+64     	; 0x25c <GetKeypadKey+0x8c>
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 21c:	31 9b       	sbis	0x06, 1	; 6
 21e:	20 c0       	rjmp	.+64     	; 0x260 <GetKeypadKey+0x90>
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 220:	32 9b       	sbis	0x06, 2	; 6
 222:	20 c0       	rjmp	.+64     	; 0x264 <GetKeypadKey+0x94>
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 224:	33 9b       	sbis	0x06, 3	; 6
 226:	20 c0       	rjmp	.+64     	; 0x268 <GetKeypadKey+0x98>
	
	return '\0';
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret
signed char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 22c:	81 e3       	ldi	r24, 0x31	; 49
 22e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 230:	84 e3       	ldi	r24, 0x34	; 52
 232:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 234:	87 e3       	ldi	r24, 0x37	; 55
 236:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 238:	8a e2       	ldi	r24, 0x2A	; 42
 23a:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 23c:	82 e3       	ldi	r24, 0x32	; 50
 23e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 240:	85 e3       	ldi	r24, 0x35	; 53
 242:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 244:	88 e3       	ldi	r24, 0x38	; 56
 246:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 24c:	83 e3       	ldi	r24, 0x33	; 51
 24e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 250:	86 e3       	ldi	r24, 0x36	; 54
 252:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 254:	89 e3       	ldi	r24, 0x39	; 57
 256:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 258:	83 e2       	ldi	r24, 0x23	; 35
 25a:	08 95       	ret

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 25c:	81 e4       	ldi	r24, 0x41	; 65
 25e:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 260:	82 e4       	ldi	r24, 0x42	; 66
 262:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 264:	83 e4       	ldi	r24, 0x43	; 67
 266:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 268:	84 e4       	ldi	r24, 0x44	; 68
	
	return '\0';
}
 26a:	08 95       	ret

0000026c <delay_ms>:

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 26c:	18 16       	cp	r1, r24
 26e:	19 06       	cpc	r1, r25
 270:	5c f0       	brlt	.+22     	; 0x288 <delay_ms+0x1c>
 272:	08 95       	ret
		for(j=0;j<775;j++) {
			asm("nop");
 274:	00 00       	nop
 276:	21 50       	subi	r18, 0x01	; 1
 278:	31 09       	sbc	r19, r1
/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
		for(j=0;j<775;j++) {
 27a:	e1 f7       	brne	.-8      	; 0x274 <delay_ms+0x8>

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 27c:	4f 5f       	subi	r20, 0xFF	; 255
 27e:	5f 4f       	sbci	r21, 0xFF	; 255
 280:	84 17       	cp	r24, r20
 282:	95 07       	cpc	r25, r21
 284:	19 f4       	brne	.+6      	; 0x28c <delay_ms+0x20>
 286:	08 95       	ret
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
#define RS 0				// pin number of uC connected to pin 4 of LCD disp.
#define E 1				// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
 28c:	27 e0       	ldi	r18, 0x07	; 7
 28e:	33 e0       	ldi	r19, 0x03	; 3
 290:	f1 cf       	rjmp	.-30     	; 0x274 <delay_ms+0x8>

00000292 <LCD_WriteCommand>:
}

/*-------------------------------------------------------------------------*/

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 292:	10 98       	cbi	0x02, 0	; 2
	DATA_BUS = Command;
 294:	8b b9       	out	0x0b, r24	; 11
	SET_BIT(CONTROL_BUS,E);
 296:	11 9a       	sbi	0x02, 1	; 2
	asm("nop");
 298:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 29a:	11 98       	cbi	0x02, 1	; 2
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	e5 cf       	rjmp	.-54     	; 0x26c <delay_ms>
 2a2:	08 95       	ret

000002a4 <LCD_ClearScreen>:
}

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	f5 cf       	rjmp	.-22     	; 0x292 <LCD_WriteCommand>
 2a8:	08 95       	ret

000002aa <LCD_init>:
}

void LCD_init(void) {
	delay_ms(100); //wait for 100 ms for LCD to power up
 2aa:	84 e6       	ldi	r24, 0x64	; 100
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	de df       	rcall	.-68     	; 0x26c <delay_ms>
	LCD_WriteCommand(0x38);
 2b0:	88 e3       	ldi	r24, 0x38	; 56
 2b2:	ef df       	rcall	.-34     	; 0x292 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	ed df       	rcall	.-38     	; 0x292 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 2b8:	8f e0       	ldi	r24, 0x0F	; 15
 2ba:	eb df       	rcall	.-42     	; 0x292 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	e9 df       	rcall	.-46     	; 0x292 <LCD_WriteCommand>
	delay_ms(10);						 
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	d3 cf       	rjmp	.-90     	; 0x26c <delay_ms>
 2c6:	08 95       	ret

000002c8 <LCD_WriteData>:
 2c8:	10 9a       	sbi	0x02, 0	; 2
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 2ca:	8b b9       	out	0x0b, r24	; 11
	SET_BIT(CONTROL_BUS,E);
 2cc:	11 9a       	sbi	0x02, 1	; 2
	asm("nop");
 2ce:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 2d0:	11 98       	cbi	0x02, 1	; 2
	delay_ms(1);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	ca cf       	rjmp	.-108    	; 0x26c <delay_ms>
 2d8:	08 95       	ret

000002da <LCD_Cursor>:
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
 2da:	81 31       	cpi	r24, 0x11	; 17
 2dc:	18 f4       	brcc	.+6      	; 0x2e4 <LCD_Cursor+0xa>
		LCD_WriteCommand(0x80 + column - 1);
 2de:	81 58       	subi	r24, 0x81	; 129
 2e0:	d8 cf       	rjmp	.-80     	; 0x292 <LCD_WriteCommand>
 2e2:	08 95       	ret
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
 2e4:	81 55       	subi	r24, 0x51	; 81
 2e6:	d5 cf       	rjmp	.-86     	; 0x292 <LCD_WriteCommand>
 2e8:	08 95       	ret

000002ea <LCD_DisplayString>:
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
	//                      LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 2f0:	fb 01       	movw	r30, r22
 2f2:	90 81       	ld	r25, Z
 2f4:	99 23       	and	r25, r25
 2f6:	51 f0       	breq	.+20     	; 0x30c <LCD_DisplayString+0x22>
 2f8:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 2fa:	11 e0       	ldi	r17, 0x01	; 1
 2fc:	18 0f       	add	r17, r24
 2fe:	ed df       	rcall	.-38     	; 0x2da <LCD_Cursor>
		LCD_WriteData(*string++);
 300:	89 91       	ld	r24, Y+
 302:	e2 df       	rcall	.-60     	; 0x2c8 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	//                      LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 304:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	//                      LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 306:	98 81       	ld	r25, Y
 308:	91 11       	cpse	r25, r1
 30a:	f7 cf       	rjmp	.-18     	; 0x2fa <LCD_DisplayString+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	08 95       	ret

00000314 <SPI_MasterInit>:
	}
}

void SPI_MasterInit(void) {
	
	DDRB =  (1 << DDB5) | (1 << DDB7) | (1 << DDB4);
 314:	80 eb       	ldi	r24, 0xB0	; 176
 316:	84 b9       	out	0x04, r24	; 4
	SPCR =  (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 318:	81 e5       	ldi	r24, 0x51	; 81
 31a:	8c bd       	out	0x2c, r24	; 44
	sei();
 31c:	78 94       	sei
 31e:	08 95       	ret

00000320 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData) {
	SPDR = cData;
 320:	8e bd       	out	0x2e, r24	; 46
	
	PORTB &= 0xEF;
 322:	2c 98       	cbi	0x05, 4	; 5
	
	while(!(SPSR & (1 << SPIF)));
 324:	0d b4       	in	r0, 0x2d	; 45
 326:	07 fe       	sbrs	r0, 7
 328:	fd cf       	rjmp	.-6      	; 0x324 <SPI_MasterTransmit+0x4>
	
	PORTB |= 0x10;
 32a:	2c 9a       	sbi	0x05, 4	; 5
 32c:	08 95       	ret

0000032e <main>:
void SPI_MasterInit(void);
void SPI_MasterTransmit(char cData);

int main(void)
{
	DDRA = 0xFF; PORTA = 0x00;
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	81 b9       	out	0x01, r24	; 1
 332:	12 b8       	out	0x02, r1	; 2
				 PORTB = 0x40;
 334:	90 e4       	ldi	r25, 0x40	; 64
 336:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xF0; PORTC = 0x0F;
 338:	90 ef       	ldi	r25, 0xF0	; 240
 33a:	97 b9       	out	0x07, r25	; 7
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00;
 340:	8a b9       	out	0x0a, r24	; 10
 342:	1b b8       	out	0x0b, r1	; 11
	
	TimerSet(500);
 344:	64 ef       	ldi	r22, 0xF4	; 244
 346:	71 e0       	ldi	r23, 0x01	; 1
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	d0 de       	rcall	.-608    	; 0xee <TimerSet>
	TimerOn();
 34e:	e0 de       	rcall	.-576    	; 0x110 <TimerOn>
	LCD_init();
 350:	ac df       	rcall	.-168    	; 0x2aa <LCD_init>
	
	SPI_MasterInit();
 352:	e0 df       	rcall	.-64     	; 0x314 <SPI_MasterInit>
 354:	3d df       	rcall	.-390    	; 0x1d0 <GetKeypadKey>
	
	while (1)
	{
		keypadInput = GetKeypadKey();
 356:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <keypadInput>
 35a:	88 23       	and	r24, r24
 35c:	09 f4       	brne	.+2      	; 0x360 <main+0x32>
		if(keypadInput != '\0') {
 35e:	75 c0       	rjmp	.+234    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 360:	08 2e       	mov	r0, r24
 362:	00 0c       	add	r0, r0
			switch(keypadInput) {
 364:	99 0b       	sbc	r25, r25
 366:	aa 0b       	sbc	r26, r26
 368:	bb 0b       	sbc	r27, r27
 36a:	fc 01       	movw	r30, r24
 36c:	f2 97       	sbiw	r30, 0x32	; 50
 36e:	e3 31       	cpi	r30, 0x13	; 19
 370:	f1 05       	cpc	r31, r1
 372:	08 f0       	brcs	.+2      	; 0x376 <main+0x48>
 374:	48 c0       	rjmp	.+144    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 376:	ea 5b       	subi	r30, 0xBA	; 186
 378:	ff 4f       	sbci	r31, 0xFF	; 255
 37a:	6e c0       	rjmp	.+220    	; 0x458 <__tablejump2__>
 37c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				//Speeds
				case '2': LEDData &= 0xF0; LEDData |= 0x01; break;
 380:	80 7f       	andi	r24, 0xF0	; 240
 382:	81 60       	ori	r24, 0x01	; 1
 384:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LEDData>
 388:	3e c0       	rjmp	.+124    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 38a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				case '3': LEDData &= 0xF0; LEDData |= 0x02; break;
 38e:	80 7f       	andi	r24, 0xF0	; 240
 390:	82 60       	ori	r24, 0x02	; 2
 392:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LEDData>
 396:	37 c0       	rjmp	.+110    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 398:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				case '5': LEDData &= 0xF0; LEDData |= 0x03; break;
 39c:	80 7f       	andi	r24, 0xF0	; 240
 39e:	83 60       	ori	r24, 0x03	; 3
 3a0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LEDData>
 3a4:	30 c0       	rjmp	.+96     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3a6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				case '6': LEDData &= 0xF0; LEDData |= 0x04; break;
 3aa:	80 7f       	andi	r24, 0xF0	; 240
 3ac:	84 60       	ori	r24, 0x04	; 4
 3ae:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LEDData>
 3b2:	29 c0       	rjmp	.+82     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3b4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				case '8': LEDData &= 0xF0; LEDData |= 0x05; break;
 3b8:	80 7f       	andi	r24, 0xF0	; 240
 3ba:	85 60       	ori	r24, 0x05	; 5
 3bc:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LEDData>
 3c0:	22 c0       	rjmp	.+68     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3c2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				case '9': LEDData &= 0xF0; LEDData |= 0x06; break;
 3c6:	80 7f       	andi	r24, 0xF0	; 240
 3c8:	86 60       	ori	r24, 0x06	; 6
 3ca:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LEDData>
 3ce:	1b c0       	rjmp	.+54     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3d0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				
				//Pattern
				case 'A': LEDData &= 0x0F; LEDData |= 0x10; break;
 3d4:	8f 70       	andi	r24, 0x0F	; 15
 3d6:	80 61       	ori	r24, 0x10	; 16
 3d8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LEDData>
 3dc:	14 c0       	rjmp	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3de:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				case 'B': LEDData &= 0x0F; LEDData |= 0x20; break;
 3e2:	8f 70       	andi	r24, 0x0F	; 15
 3e4:	80 62       	ori	r24, 0x20	; 32
 3e6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LEDData>
 3ea:	0d c0       	rjmp	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ec:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				case 'C': LEDData &= 0x0F; LEDData |= 0x30; break;
 3f0:	8f 70       	andi	r24, 0x0F	; 15
 3f2:	80 63       	ori	r24, 0x30	; 48
 3f4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LEDData>
 3f8:	06 c0       	rjmp	.+12     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fa:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				case 'D': LEDData &= 0x0F; LEDData |= 0x40; break;
 3fe:	8f 70       	andi	r24, 0x0F	; 15
 400:	80 64       	ori	r24, 0x40	; 64
 402:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LEDData>
 406:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				
				default: break;//Nothing
			}
			
			upper = ((LEDData & 0xF0) >> 4);
 40a:	98 2f       	mov	r25, r24
 40c:	92 95       	swap	r25
 40e:	9f 70       	andi	r25, 0x0F	; 15
 410:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <upper>
 414:	8f 70       	andi	r24, 0x0F	; 15
			lower = LEDData & 0x0F;
 416:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <lower>
		
			LCD_ClearScreen();
 41a:	44 df       	rcall	.-376    	; 0x2a4 <LCD_ClearScreen>
 41c:	6c e0       	ldi	r22, 0x0C	; 12
			LCD_DisplayString(1, PATTERN);
 41e:	71 e0       	ldi	r23, 0x01	; 1
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	63 df       	rcall	.-314    	; 0x2ea <LCD_DisplayString>
 424:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <upper>
			LCD_WriteData(upper + '0');
 428:	80 5d       	subi	r24, 0xD0	; 208
 42a:	4e df       	rcall	.-356    	; 0x2c8 <LCD_WriteData>
 42c:	66 e0       	ldi	r22, 0x06	; 6
			LCD_DisplayString(9, SPEED);
 42e:	71 e0       	ldi	r23, 0x01	; 1
 430:	89 e0       	ldi	r24, 0x09	; 9
 432:	5b df       	rcall	.-330    	; 0x2ea <LCD_DisplayString>
 434:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <lower>
			LCD_WriteData(lower + '0');
 438:	80 5d       	subi	r24, 0xD0	; 208
 43a:	46 df       	rcall	.-372    	; 0x2c8 <LCD_WriteData>
 43c:	60 e0       	ldi	r22, 0x00	; 0
			LCD_DisplayString(17, CONTROLLER);
 43e:	71 e0       	ldi	r23, 0x01	; 1
 440:	81 e1       	ldi	r24, 0x11	; 17
 442:	53 df       	rcall	.-346    	; 0x2ea <LCD_DisplayString>
 444:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
		
			SPI_MasterTransmit(LEDData);
 448:	6b df       	rcall	.-298    	; 0x320 <SPI_MasterTransmit>
 44a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TimerFlag>
 44e:	88 23       	and	r24, r24
		}
		
		while(!TimerFlag);
 450:	e1 f3       	breq	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 452:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <TimerFlag>
 456:	7e cf       	rjmp	.-260    	; 0x354 <main+0x26>

00000458 <__tablejump2__>:
		TimerFlag = 0;
 458:	ee 0f       	add	r30, r30
 45a:	ff 1f       	adc	r31, r31
	}
 45c:	00 24       	eor	r0, r0
 45e:	00 1c       	adc	r0, r0
 460:	0b be       	out	0x3b, r0	; 59
 462:	07 90       	elpm	r0, Z+
 464:	f6 91       	elpm	r31, Z
 466:	e0 2d       	mov	r30, r0
 468:	09 94       	ijmp

0000046a <_exit>:
 46a:	f8 94       	cli

0000046c <__stop_program>:
 46c:	ff cf       	rjmp	.-2      	; 0x46c <__stop_program>
