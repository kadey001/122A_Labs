
Part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000002ea  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800118  00800118  00000396  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db1  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  00001261  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000667  00000000  00000000  00001b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000021f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054c  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c0  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d4 d0       	rcall	.+424    	; 0x26c <main>
  c4:	10 c1       	rjmp	.+544    	; 0x2e6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
	
	return '\0';
}
  c8:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <_avr_timer_M>
  cc:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <_avr_timer_M+0x1>
  d0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_avr_timer_M+0x2>
  d4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_avr_timer_M+0x3>
  d8:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <__data_end>
  dc:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <__data_end+0x1>
  e0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end+0x2>
  e4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_avr_timer_M>
 10e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_avr_timer_M+0x1>
 112:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <_avr_timer_M+0x2>
 116:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <_avr_timer_M+0x3>
 11a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 11e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 122:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 126:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 148:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 14c:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
 150:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 15e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 162:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 166:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <TimerFlag>
 178:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_avr_timer_M>
 17c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_avr_timer_M+0x1>
 180:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <_avr_timer_M+0x2>
 184:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <_avr_timer_M+0x3>
 188:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 18c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 190:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 194:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
		for(j=0;j<775;j++) {
			asm("nop");
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
		for(j=0;j<775;j++) {
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
#define RS 0				// pin number of uC connected to pin 4 of LCD disp.
#define E 1				// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
}

/*-------------------------------------------------------------------------*/

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 1d0:	10 98       	cbi	0x02, 0	; 2
	DATA_BUS = Command;
 1d2:	8b b9       	out	0x0b, r24	; 11
	SET_BIT(CONTROL_BUS,E);
 1d4:	11 9a       	sbi	0x02, 1	; 2
	asm("nop");
 1d6:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 1d8:	11 98       	cbi	0x02, 1	; 2
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
}

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_init>:
}

void LCD_init(void) {
	delay_ms(100); //wait for 100 ms for LCD to power up
 1e8:	84 e6       	ldi	r24, 0x64	; 100
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	de df       	rcall	.-68     	; 0x1aa <delay_ms>
	LCD_WriteCommand(0x38);
 1ee:	88 e3       	ldi	r24, 0x38	; 56
 1f0:	ef df       	rcall	.-34     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	ed df       	rcall	.-38     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 1f6:	8f e0       	ldi	r24, 0x0F	; 15
 1f8:	eb df       	rcall	.-42     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	e9 df       	rcall	.-46     	; 0x1d0 <LCD_WriteCommand>
	delay_ms(10);						 
 1fe:	8a e0       	ldi	r24, 0x0A	; 10
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	d3 cf       	rjmp	.-90     	; 0x1aa <delay_ms>
 204:	08 95       	ret

00000206 <LCD_WriteData>:
 206:	10 9a       	sbi	0x02, 0	; 2
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 208:	8b b9       	out	0x0b, r24	; 11
	SET_BIT(CONTROL_BUS,E);
 20a:	11 9a       	sbi	0x02, 1	; 2
	asm("nop");
 20c:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 20e:	11 98       	cbi	0x02, 1	; 2
	delay_ms(1);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ca cf       	rjmp	.-108    	; 0x1aa <delay_ms>
 216:	08 95       	ret

00000218 <LCD_Cursor>:
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
 218:	81 31       	cpi	r24, 0x11	; 17
 21a:	18 f4       	brcc	.+6      	; 0x222 <LCD_Cursor+0xa>
		LCD_WriteCommand(0x80 + column - 1);
 21c:	81 58       	subi	r24, 0x81	; 129
 21e:	d8 cf       	rjmp	.-80     	; 0x1d0 <LCD_WriteCommand>
 220:	08 95       	ret
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
 222:	81 55       	subi	r24, 0x51	; 81
 224:	d5 cf       	rjmp	.-86     	; 0x1d0 <LCD_WriteCommand>
 226:	08 95       	ret

00000228 <LCD_DisplayString>:
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
	//                      LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 22e:	fb 01       	movw	r30, r22
 230:	90 81       	ld	r25, Z
 232:	99 23       	and	r25, r25
 234:	51 f0       	breq	.+20     	; 0x24a <LCD_DisplayString+0x22>
 236:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 238:	11 e0       	ldi	r17, 0x01	; 1
 23a:	18 0f       	add	r17, r24
 23c:	ed df       	rcall	.-38     	; 0x218 <LCD_Cursor>
		LCD_WriteData(*string++);
 23e:	89 91       	ld	r24, Y+
 240:	e2 df       	rcall	.-60     	; 0x206 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	//                      LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 242:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	//                      LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 244:	98 81       	ld	r25, Y
 246:	91 11       	cpse	r25, r1
 248:	f7 cf       	rjmp	.-18     	; 0x238 <LCD_DisplayString+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	08 95       	ret

00000252 <SPI_MasterInit>:
	}
}

void SPI_MasterInit(void) {
	
	DDRB =  (1 << DDB5) | (1 << DDB7) | (1 << DDB4);
 252:	80 eb       	ldi	r24, 0xB0	; 176
 254:	84 b9       	out	0x04, r24	; 4
	SPCR =  (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 256:	81 e5       	ldi	r24, 0x51	; 81
 258:	8c bd       	out	0x2c, r24	; 44
	sei();
 25a:	78 94       	sei
 25c:	08 95       	ret

0000025e <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData) {
	SPDR = cData;
 25e:	8e bd       	out	0x2e, r24	; 46
	
	PORTB &= 0xEF;
 260:	2c 98       	cbi	0x05, 4	; 5
	
	while(!(SPSR & (1 << SPIF)));
 262:	0d b4       	in	r0, 0x2d	; 45
 264:	07 fe       	sbrs	r0, 7
 266:	fd cf       	rjmp	.-6      	; 0x262 <SPI_MasterTransmit+0x4>
	
	PORTB |= 0x10;
 268:	2c 9a       	sbi	0x05, 4	; 5
 26a:	08 95       	ret

0000026c <main>:
void SPI_MasterInit(void);
void SPI_MasterTransmit(char cData);

int main(void)
{
	DDRA = 0xFF; PORTA = 0x00;
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	81 b9       	out	0x01, r24	; 1
 270:	12 b8       	out	0x02, r1	; 2
				 PORTB = 0x40;
 272:	90 e4       	ldi	r25, 0x40	; 64
 274:	95 b9       	out	0x05, r25	; 5
	DDRC = 0x00; PORTC = 0xFF;
 276:	17 b8       	out	0x07, r1	; 7
 278:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF; PORTD = 0x00;
 27a:	8a b9       	out	0x0a, r24	; 10
 27c:	1b b8       	out	0x0b, r1	; 11
	
	TimerSet(10);
 27e:	6a e0       	ldi	r22, 0x0A	; 10
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	20 df       	rcall	.-448    	; 0xc8 <TimerSet>
	TimerOn();
 288:	30 df       	rcall	.-416    	; 0xea <TimerOn>
	LCD_init();
 28a:	ae df       	rcall	.-164    	; 0x1e8 <LCD_init>
 28c:	e2 df       	rcall	.-60     	; 0x252 <SPI_MasterInit>
	
	SPI_MasterInit();
 28e:	c1 e1       	ldi	r28, 0x11	; 17
 290:	c0 93 1f 01 	sts	0x011F, r28	; 0x80011f <keypadInput>
	
	while (1)
	{
		//keypadInput = GetKeypadKey();
		keypadInput = 0x11;
 294:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
				}
				
			}
		}
		
		upper = ((LEDData & 0xF0) >> 4);
 298:	98 2f       	mov	r25, r24
 29a:	92 95       	swap	r25
 29c:	9f 70       	andi	r25, 0x0F	; 15
 29e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <upper>
 2a2:	8f 70       	andi	r24, 0x0F	; 15
		lower = LEDData & 0x0F;
 2a4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <lower>
 2a8:	9c df       	rcall	.-200    	; 0x1e2 <LCD_ClearScreen>
		
		LCD_ClearScreen();
 2aa:	6c e0       	ldi	r22, 0x0C	; 12
		LCD_DisplayString(1, PATTERN);
 2ac:	71 e0       	ldi	r23, 0x01	; 1
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	bb df       	rcall	.-138    	; 0x228 <LCD_DisplayString>
 2b2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <upper>
		LCD_WriteData(upper + '0');
 2b6:	80 5d       	subi	r24, 0xD0	; 208
 2b8:	a6 df       	rcall	.-180    	; 0x206 <LCD_WriteData>
 2ba:	66 e0       	ldi	r22, 0x06	; 6
		LCD_DisplayString(9, SPEED);
 2bc:	71 e0       	ldi	r23, 0x01	; 1
 2be:	89 e0       	ldi	r24, 0x09	; 9
 2c0:	b3 df       	rcall	.-154    	; 0x228 <LCD_DisplayString>
 2c2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <lower>
		LCD_WriteData(lower + '0');
 2c6:	80 5d       	subi	r24, 0xD0	; 208
 2c8:	9e df       	rcall	.-196    	; 0x206 <LCD_WriteData>
 2ca:	60 e0       	ldi	r22, 0x00	; 0
		LCD_DisplayString(16, CONTROLLER);
 2cc:	71 e0       	ldi	r23, 0x01	; 1
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	ab df       	rcall	.-170    	; 0x228 <LCD_DisplayString>
 2d2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LEDData>
		
		SPI_MasterTransmit(LEDData);
 2d6:	c3 df       	rcall	.-122    	; 0x25e <SPI_MasterTransmit>
 2d8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TimerFlag>
 2dc:	88 23       	and	r24, r24
		
		while(!TimerFlag);
 2de:	e1 f3       	breq	.-8      	; 0x2d8 <main+0x6c>
 2e0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <TimerFlag>
 2e4:	d5 cf       	rjmp	.-86     	; 0x290 <main+0x24>

000002e6 <_exit>:
		TimerFlag = 0;
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
