
Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096e  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000849  00000000  00000000  00000cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a1  00000000  00000000  0000151b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001ed3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	66 d0       	rcall	.+204    	; 0x176 <main>
  aa:	c4 c0       	rjmp	.+392    	; 0x234 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
signed char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
  ae:	8f ee       	ldi	r24, 0xEF	; 239
  b0:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
  b2:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
  b4:	30 9b       	sbis	0x06, 0	; 6
  b6:	29 c0       	rjmp	.+82     	; 0x10a <GetKeypadKey+0x5c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
  b8:	31 9b       	sbis	0x06, 1	; 6
  ba:	29 c0       	rjmp	.+82     	; 0x10e <GetKeypadKey+0x60>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
  bc:	32 9b       	sbis	0x06, 2	; 6
  be:	29 c0       	rjmp	.+82     	; 0x112 <GetKeypadKey+0x64>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
  c0:	33 9b       	sbis	0x06, 3	; 6
  c2:	29 c0       	rjmp	.+82     	; 0x116 <GetKeypadKey+0x68>

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
  c4:	8f ed       	ldi	r24, 0xDF	; 223
  c6:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
  c8:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
  ca:	30 9b       	sbis	0x06, 0	; 6
  cc:	26 c0       	rjmp	.+76     	; 0x11a <GetKeypadKey+0x6c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
  ce:	31 9b       	sbis	0x06, 1	; 6
  d0:	26 c0       	rjmp	.+76     	; 0x11e <GetKeypadKey+0x70>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
  d2:	32 9b       	sbis	0x06, 2	; 6
  d4:	26 c0       	rjmp	.+76     	; 0x122 <GetKeypadKey+0x74>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
  d6:	33 9b       	sbis	0x06, 3	; 6
  d8:	26 c0       	rjmp	.+76     	; 0x126 <GetKeypadKey+0x78>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
  da:	8f eb       	ldi	r24, 0xBF	; 191
  dc:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
  de:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
  e0:	30 9b       	sbis	0x06, 0	; 6
  e2:	23 c0       	rjmp	.+70     	; 0x12a <GetKeypadKey+0x7c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
  e4:	31 9b       	sbis	0x06, 1	; 6
  e6:	23 c0       	rjmp	.+70     	; 0x12e <GetKeypadKey+0x80>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
  e8:	32 9b       	sbis	0x06, 2	; 6
  ea:	23 c0       	rjmp	.+70     	; 0x132 <GetKeypadKey+0x84>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
  ec:	33 9b       	sbis	0x06, 3	; 6
  ee:	23 c0       	rjmp	.+70     	; 0x136 <GetKeypadKey+0x88>

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
  f0:	8f e7       	ldi	r24, 0x7F	; 127
  f2:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
  f4:	00 00       	nop
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
  f6:	30 9b       	sbis	0x06, 0	; 6
  f8:	20 c0       	rjmp	.+64     	; 0x13a <GetKeypadKey+0x8c>
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
  fa:	31 9b       	sbis	0x06, 1	; 6
  fc:	20 c0       	rjmp	.+64     	; 0x13e <GetKeypadKey+0x90>
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
  fe:	32 9b       	sbis	0x06, 2	; 6
 100:	20 c0       	rjmp	.+64     	; 0x142 <GetKeypadKey+0x94>
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 102:	33 9b       	sbis	0x06, 3	; 6
 104:	20 c0       	rjmp	.+64     	; 0x146 <GetKeypadKey+0x98>
	
	return '\0';
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
signed char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 10a:	81 e3       	ldi	r24, 0x31	; 49
 10c:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 10e:	84 e3       	ldi	r24, 0x34	; 52
 110:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 112:	87 e3       	ldi	r24, 0x37	; 55
 114:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 116:	8a e2       	ldi	r24, 0x2A	; 42
 118:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 11a:	82 e3       	ldi	r24, 0x32	; 50
 11c:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 11e:	85 e3       	ldi	r24, 0x35	; 53
 120:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 122:	88 e3       	ldi	r24, 0x38	; 56
 124:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 126:	80 e3       	ldi	r24, 0x30	; 48
 128:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 12a:	83 e3       	ldi	r24, 0x33	; 51
 12c:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 12e:	86 e3       	ldi	r24, 0x36	; 54
 130:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 132:	89 e3       	ldi	r24, 0x39	; 57
 134:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 136:	83 e2       	ldi	r24, 0x23	; 35
 138:	08 95       	ret

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 13e:	82 e4       	ldi	r24, 0x42	; 66
 140:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 142:	83 e4       	ldi	r24, 0x43	; 67
 144:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 146:	84 e4       	ldi	r24, 0x44	; 68
	
	return '\0';
}
 148:	08 95       	ret

0000014a <SPI_MasterInit>:
		
    }
}

void SPI_MasterInit(void) {
	DDRA = 0xFF; PORTA = 0x00;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	81 b9       	out	0x01, r24	; 1
 14e:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xBF; PORTB = 0x40;
 150:	9f eb       	ldi	r25, 0xBF	; 191
 152:	94 b9       	out	0x04, r25	; 4
 154:	90 e4       	ldi	r25, 0x40	; 64
 156:	95 b9       	out	0x05, r25	; 5
	DDRD = 0x00; PORTD = 0xFF;
 158:	1a b8       	out	0x0a, r1	; 10
 15a:	8b b9       	out	0x0b, r24	; 11
	
	SPCR =  (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 15c:	81 e5       	ldi	r24, 0x51	; 81
 15e:	8c bd       	out	0x2c, r24	; 44
	SREG |= (1 << 7);
 160:	8f b7       	in	r24, 0x3f	; 63
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8f bf       	out	0x3f, r24	; 63
 166:	08 95       	ret

00000168 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData) {
	SPDR = cData;
 168:	8e bd       	out	0x2e, r24	; 46
	
	PORTB |= 0x10;
 16a:	2c 9a       	sbi	0x05, 4	; 5
	
	while(!(SPSR & (1 << SPIF))) {
 16c:	0d b4       	in	r0, 0x2d	; 45
 16e:	07 fe       	sbrs	r0, 7
 170:	fd cf       	rjmp	.-6      	; 0x16c <SPI_MasterTransmit+0x4>
		;
	}
	
	PORTB &= 0xEF;
 172:	2c 98       	cbi	0x05, 4	; 5
 174:	08 95       	ret

00000176 <main>:
void SPI_MasterInit(void);
void SPI_MasterTransmit(char cData);

int main(void)
{
	DDRC = 0x00; PORTC = 0xFF;
 176:	17 b8       	out	0x07, r1	; 7
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	88 b9       	out	0x08, r24	; 8
	SPI_MasterInit();
 17c:	e6 df       	rcall	.-52     	; 0x14a <SPI_MasterInit>
    /* Replace with your application code */
    while (1) 
    {
		keypadInput = GetKeypadKey();
 17e:	97 df       	rcall	.-210    	; 0xae <GetKeypadKey>
 180:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <keypadInput>
 184:	90 ed       	ldi	r25, 0xD0	; 208
		if(keypadInput >= '0' && keypadInput <= '9'){
 186:	98 0f       	add	r25, r24
 188:	9a 30       	cpi	r25, 0x0A	; 10
 18a:	08 f0       	brcs	.+2      	; 0x18e <main+0x18>
 18c:	4b c0       	rjmp	.+150    	; 0x224 <main+0xae>
 18e:	85 33       	cpi	r24, 0x35	; 53
			if(keypadInput > '4' || keypadInput == '0') {
 190:	18 f4       	brcc	.+6      	; 0x198 <main+0x22>
 192:	80 33       	cpi	r24, 0x30	; 48
 194:	51 f5       	brne	.+84     	; 0x1ea <main+0x74>
 196:	4a c0       	rjmp	.+148    	; 0x22c <main+0xb6>
 198:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
				LEDData &= 0xF0;
 19c:	90 7f       	andi	r25, 0xF0	; 240
 19e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1a2:	85 33       	cpi	r24, 0x35	; 53
				if(keypadInput == '5'){
 1a4:	21 f4       	brne	.+8      	; 0x1ae <main+0x38>
 1a6:	91 60       	ori	r25, 0x01	; 1
					LEDData |= 0x01;
 1a8:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1ac:	3b c0       	rjmp	.+118    	; 0x224 <main+0xae>
 1ae:	86 33       	cpi	r24, 0x36	; 54
				}
				else if(keypadInput == '6'){
 1b0:	21 f4       	brne	.+8      	; 0x1ba <main+0x44>
 1b2:	92 60       	ori	r25, 0x02	; 2
					LEDData |= 0x02;
 1b4:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1b8:	35 c0       	rjmp	.+106    	; 0x224 <main+0xae>
 1ba:	87 33       	cpi	r24, 0x37	; 55
				}
				else if(keypadInput == '7'){
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <main+0x50>
 1be:	93 60       	ori	r25, 0x03	; 3
					LEDData |= 0x03;
 1c0:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1c4:	2f c0       	rjmp	.+94     	; 0x224 <main+0xae>
 1c6:	88 33       	cpi	r24, 0x38	; 56
				}
				else if(keypadInput == '8'){
 1c8:	21 f4       	brne	.+8      	; 0x1d2 <main+0x5c>
 1ca:	94 60       	ori	r25, 0x04	; 4
					LEDData |= 0x04;
 1cc:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1d0:	29 c0       	rjmp	.+82     	; 0x224 <main+0xae>
 1d2:	89 33       	cpi	r24, 0x39	; 57
				}
				else if(keypadInput == '9'){
 1d4:	21 f4       	brne	.+8      	; 0x1de <main+0x68>
 1d6:	95 60       	ori	r25, 0x05	; 5
					LEDData |= 0x05;
 1d8:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1dc:	23 c0       	rjmp	.+70     	; 0x224 <main+0xae>
 1de:	80 33       	cpi	r24, 0x30	; 48
				}
				else if(keypadInput == '0'){
 1e0:	09 f5       	brne	.+66     	; 0x224 <main+0xae>
 1e2:	96 60       	ori	r25, 0x06	; 6
					LEDData |= 0x06;
 1e4:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1e8:	1d c0       	rjmp	.+58     	; 0x224 <main+0xae>
 1ea:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
				}
			}
			else if(keypadInput <= '4') {
				LEDData &= 0x0F;
 1ee:	9f 70       	andi	r25, 0x0F	; 15
 1f0:	81 33       	cpi	r24, 0x31	; 49
				if(keypadInput == '1') {
 1f2:	21 f4       	brne	.+8      	; 0x1fc <main+0x86>
 1f4:	90 61       	ori	r25, 0x10	; 16
					LEDData |= 0x10;
 1f6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1fa:	14 c0       	rjmp	.+40     	; 0x224 <main+0xae>
 1fc:	82 33       	cpi	r24, 0x32	; 50
				}
				else if(keypadInput == '2'){
 1fe:	21 f4       	brne	.+8      	; 0x208 <main+0x92>
 200:	90 62       	ori	r25, 0x20	; 32
					LEDData |= 0x20;
 202:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 206:	0e c0       	rjmp	.+28     	; 0x224 <main+0xae>
 208:	83 33       	cpi	r24, 0x33	; 51
				}
				else if(keypadInput == '3'){
 20a:	21 f4       	brne	.+8      	; 0x214 <main+0x9e>
 20c:	90 63       	ori	r25, 0x30	; 48
					LEDData |= 0x30;
 20e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 212:	08 c0       	rjmp	.+16     	; 0x224 <main+0xae>
 214:	84 33       	cpi	r24, 0x34	; 52
				}
				else if(keypadInput == '4'){
 216:	19 f0       	breq	.+6      	; 0x21e <main+0xa8>
 218:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
				else if(keypadInput == '0'){
					LEDData |= 0x06;
				}
			}
			else if(keypadInput <= '4') {
				LEDData &= 0x0F;
 21c:	03 c0       	rjmp	.+6      	; 0x224 <main+0xae>
 21e:	90 64       	ori	r25, 0x40	; 64
				}
				else if(keypadInput == '3'){
					LEDData |= 0x30;
				}
				else if(keypadInput == '4'){
					LEDData |= 0x40;
 220:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 224:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
				}
			}
		}
		
		SPI_MasterTransmit(LEDData);
 228:	9f df       	rcall	.-194    	; 0x168 <SPI_MasterTransmit>
 22a:	a9 cf       	rjmp	.-174    	; 0x17e <main+0x8>
		
    }
 22c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
    while (1) 
    {
		keypadInput = GetKeypadKey();
		if(keypadInput >= '0' && keypadInput <= '9'){
			if(keypadInput > '4' || keypadInput == '0') {
				LEDData &= 0xF0;
 230:	90 7f       	andi	r25, 0xF0	; 240
 232:	d7 cf       	rjmp	.-82     	; 0x1e2 <main+0x6c>

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
