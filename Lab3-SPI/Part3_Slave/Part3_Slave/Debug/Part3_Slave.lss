
Part3_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000046c  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  0080010e  0080010e  0000050e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c97  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000990  00000000  00000000  000012af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e8  00000000  00000000  00001c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004bc  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ef c0       	rjmp	.+478    	; 0x214 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	25 c1       	rjmp	.+586    	; 0x298 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 34       	cpi	r26, 0x41	; 65
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2a d1       	rcall	.+596    	; 0x318 <main>
  c4:	d1 c1       	rjmp	.+930    	; 0x468 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SMTick1>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <pattern>
  cc:	21 30       	cpi	r18, 0x01	; 1
  ce:	89 f4       	brne	.+34     	; 0xf2 <SMTick1+0x2a>
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	19 f0       	breq	.+6      	; 0xda <SMTick1+0x12>
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	31 f0       	breq	.+12     	; 0xe4 <SMTick1+0x1c>
  d8:	0a c0       	rjmp	.+20     	; 0xee <SMTick1+0x26>
  da:	80 ef       	ldi	r24, 0xF0	; 240
  dc:	82 b9       	out	0x02, r24	; 2
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	08 95       	ret
  e4:	8f e0       	ldi	r24, 0x0F	; 15
  e6:	82 b9       	out	0x02, r24	; 2
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	08 95       	ret
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 95       	ret

000000f4 <SMTick2>:
  f4:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <pattern>
  f8:	22 30       	cpi	r18, 0x02	; 2
  fa:	89 f4       	brne	.+34     	; 0x11e <SMTick2+0x2a>
  fc:	00 97       	sbiw	r24, 0x00	; 0
  fe:	19 f0       	breq	.+6      	; 0x106 <SMTick2+0x12>
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	31 f0       	breq	.+12     	; 0x110 <SMTick2+0x1c>
 104:	0a c0       	rjmp	.+20     	; 0x11a <SMTick2+0x26>
 106:	8a ea       	ldi	r24, 0xAA	; 170
 108:	82 b9       	out	0x02, r24	; 2
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret
 110:	85 e5       	ldi	r24, 0x55	; 85
 112:	82 b9       	out	0x02, r24	; 2
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret

00000120 <SMTick3>:
 120:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <pattern>
 124:	23 30       	cpi	r18, 0x03	; 3
 126:	51 f5       	brne	.+84     	; 0x17c <SMTick3+0x5c>
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	21 f0       	breq	.+8      	; 0x134 <SMTick3+0x14>
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	91 05       	cpc	r25, r1
 130:	91 f0       	breq	.+36     	; 0x156 <SMTick3+0x36>
 132:	22 c0       	rjmp	.+68     	; 0x178 <SMTick3+0x58>
 134:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 138:	22 30       	cpi	r18, 0x02	; 2
 13a:	31 f4       	brne	.+12     	; 0x148 <SMTick3+0x28>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	03 c0       	rjmp	.+6      	; 0x14e <SMTick3+0x2e>
 148:	26 95       	lsr	r18
 14a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 14e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 152:	22 b9       	out	0x02, r18	; 2
 154:	08 95       	ret
 156:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 15a:	20 34       	cpi	r18, 0x40	; 64
 15c:	31 f4       	brne	.+12     	; 0x16a <SMTick3+0x4a>
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	03 c0       	rjmp	.+6      	; 0x170 <SMTick3+0x50>
 16a:	22 0f       	add	r18, r18
 16c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 170:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 174:	22 b9       	out	0x02, r18	; 2
 176:	08 95       	ret
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	08 95       	ret

0000017e <SMTick4>:
 17e:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <pattern>
 182:	24 30       	cpi	r18, 0x04	; 4
 184:	89 f4       	brne	.+34     	; 0x1a8 <SMTick4+0x2a>
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	19 f0       	breq	.+6      	; 0x190 <SMTick4+0x12>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	31 f0       	breq	.+12     	; 0x19a <SMTick4+0x1c>
 18e:	0a c0       	rjmp	.+20     	; 0x1a4 <SMTick4+0x26>
 190:	8c e3       	ldi	r24, 0x3C	; 60
 192:	82 b9       	out	0x02, r24	; 2
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	08 95       	ret
 19a:	83 ec       	ldi	r24, 0xC3	; 195
 19c:	82 b9       	out	0x02, r24	; 2
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	08 95       	ret
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	08 95       	ret

000001aa <TimerSet>:
 1aa:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 1ae:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 1b2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 1b6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
 1ba:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <_avr_timer_cntcurr>
 1be:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <_avr_timer_cntcurr+0x1>
 1c2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <_avr_timer_cntcurr+0x2>
 1c6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <_avr_timer_cntcurr+0x3>
 1ca:	08 95       	ret

000001cc <TimerOn>:
 1cc:	8b e0       	ldi	r24, 0x0B	; 11
 1ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1d2:	8d e7       	ldi	r24, 0x7D	; 125
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 1f0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 1f4:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 1f8:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 1fc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <_avr_timer_cntcurr>
 200:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <_avr_timer_cntcurr+0x1>
 204:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <_avr_timer_cntcurr+0x2>
 208:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <_avr_timer_cntcurr+0x3>
 20c:	8f b7       	in	r24, 0x3f	; 63
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8f bf       	out	0x3f, r24	; 63
 212:	08 95       	ret

00000214 <__vector_13>:
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	af 93       	push	r26
 224:	bf 93       	push	r27
 226:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <_avr_timer_cntcurr>
 22a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <_avr_timer_cntcurr+0x1>
 22e:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <_avr_timer_cntcurr+0x2>
 232:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <_avr_timer_cntcurr+0x3>
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	a1 09       	sbc	r26, r1
 23a:	b1 09       	sbc	r27, r1
 23c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <_avr_timer_cntcurr>
 240:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <_avr_timer_cntcurr+0x1>
 244:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <_avr_timer_cntcurr+0x2>
 248:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <_avr_timer_cntcurr+0x3>
 24c:	89 2b       	or	r24, r25
 24e:	8a 2b       	or	r24, r26
 250:	8b 2b       	or	r24, r27
 252:	99 f4       	brne	.+38     	; 0x27a <__vector_13+0x66>
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <TimerFlag>
 25a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 25e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 262:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 266:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 26a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <_avr_timer_cntcurr>
 26e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <_avr_timer_cntcurr+0x1>
 272:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <_avr_timer_cntcurr+0x2>
 276:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <_avr_timer_cntcurr+0x3>
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <SPI_ServantInit>:
}

void SPI_ServantInit(void) {
	/* Set MISO output, all others input */
	//B4=~SS | B5=MOSI | B6=MISO | B7=SCLK
	DDRB = (1<<DDB5);
 28c:	80 e2       	ldi	r24, 0x20	; 32
 28e:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI */
	SPCR = (1<<SPE)|(1<<7);
 290:	80 ec       	ldi	r24, 0xC0	; 192
 292:	8c bd       	out	0x2c, r24	; 44
	sei();
 294:	78 94       	sei
 296:	08 95       	ret

00000298 <__vector_19>:
}

ISR(SPI_STC_vect) {
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24
	receivedData = SPDR;
 2a4:	8e b5       	in	r24, 0x2e	; 46
 2a6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <receivedData>
}
 2aa:	8f 91       	pop	r24
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <updateSpeed>:

ul updateSpeed(uc selectedSpeed) {
	switch(selectedSpeed) {
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	89 f0       	breq	.+34     	; 0x2dc <updateSpeed+0x26>
 2ba:	28 f4       	brcc	.+10     	; 0x2c6 <updateSpeed+0x10>
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	39 f1       	breq	.+78     	; 0x30e <updateSpeed+0x58>
 2c0:	82 30       	cpi	r24, 0x02	; 2
 2c2:	39 f0       	breq	.+14     	; 0x2d2 <updateSpeed+0x1c>
 2c4:	1f c0       	rjmp	.+62     	; 0x304 <updateSpeed+0x4e>
 2c6:	85 30       	cpi	r24, 0x05	; 5
 2c8:	99 f0       	breq	.+38     	; 0x2f0 <updateSpeed+0x3a>
 2ca:	68 f0       	brcs	.+26     	; 0x2e6 <updateSpeed+0x30>
 2cc:	86 30       	cpi	r24, 0x06	; 6
 2ce:	a9 f0       	breq	.+42     	; 0x2fa <updateSpeed+0x44>
 2d0:	19 c0       	rjmp	.+50     	; 0x304 <updateSpeed+0x4e>
		case 1: return 2000;
		case 2: return 1000;
 2d2:	68 ee       	ldi	r22, 0xE8	; 232
 2d4:	73 e0       	ldi	r23, 0x03	; 3
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	08 95       	ret
		case 3: return 500;
 2dc:	64 ef       	ldi	r22, 0xF4	; 244
 2de:	71 e0       	ldi	r23, 0x01	; 1
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	08 95       	ret
		case 4: return 250;
 2e6:	6a ef       	ldi	r22, 0xFA	; 250
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	08 95       	ret
		case 5: return 100;
 2f0:	64 e6       	ldi	r22, 0x64	; 100
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	08 95       	ret
		case 6: return 50;
 2fa:	62 e3       	ldi	r22, 0x32	; 50
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	08 95       	ret
		default: return 100;
 304:	64 e6       	ldi	r22, 0x64	; 100
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	08 95       	ret
	receivedData = SPDR;
}

ul updateSpeed(uc selectedSpeed) {
	switch(selectedSpeed) {
		case 1: return 2000;
 30e:	60 ed       	ldi	r22, 0xD0	; 208
 310:	77 e0       	ldi	r23, 0x07	; 7
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
		case 4: return 250;
		case 5: return 100;
		case 6: return 50;
		default: return 100;
	}
}
 316:	08 95       	ret

00000318 <main>:
	
	return state;
}

int main(void)
{
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	28 97       	sbiw	r28, 0x08	; 8
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
	SPI_ServantInit();
 32c:	af df       	rcall	.-162    	; 0x28c <SPI_ServantInit>
	static task task1;
	static task task2;
	static task task3;
	static task task4;

	task *tasks[] = { &task1, &task2, &task3, &task4 };
 32e:	88 e0       	ldi	r24, 0x08	; 8
 330:	e5 e0       	ldi	r30, 0x05	; 5
 332:	f1 e0       	ldi	r31, 0x01	; 1
 334:	de 01       	movw	r26, r28
 336:	11 96       	adiw	r26, 0x01	; 1
 338:	01 90       	ld	r0, Z+
 33a:	0d 92       	st	X+, r0
 33c:	8a 95       	dec	r24
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x20>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	//Task 1
	task1.state = -1;//Init state
 340:	ef e2       	ldi	r30, 0x2F	; 47
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	2f ef       	ldi	r18, 0xFF	; 255
 346:	20 83       	st	Z, r18
	task1.period = period;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	a0 e0       	ldi	r26, 0x00	; 0
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	81 83       	std	Z+1, r24	; 0x01
 352:	92 83       	std	Z+2, r25	; 0x02
 354:	a3 83       	std	Z+3, r26	; 0x03
 356:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = period;
 358:	85 83       	std	Z+5, r24	; 0x05
 35a:	96 83       	std	Z+6, r25	; 0x06
 35c:	a7 83       	std	Z+7, r26	; 0x07
 35e:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SMTick1;
 360:	44 e6       	ldi	r20, 0x64	; 100
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	52 87       	std	Z+10, r21	; 0x0a
 366:	41 87       	std	Z+9, r20	; 0x09
	
	//Task 2
	task2.state = -1;//Init state
 368:	e4 e2       	ldi	r30, 0x24	; 36
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	20 83       	st	Z, r18
	task2.period = period;
 36e:	81 83       	std	Z+1, r24	; 0x01
 370:	92 83       	std	Z+2, r25	; 0x02
 372:	a3 83       	std	Z+3, r26	; 0x03
 374:	b4 83       	std	Z+4, r27	; 0x04
	task2.elapsedTime = period;
 376:	85 83       	std	Z+5, r24	; 0x05
 378:	96 83       	std	Z+6, r25	; 0x06
 37a:	a7 83       	std	Z+7, r26	; 0x07
 37c:	b0 87       	std	Z+8, r27	; 0x08
	task2.TickFct = &SMTick2;
 37e:	4a e7       	ldi	r20, 0x7A	; 122
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	52 87       	std	Z+10, r21	; 0x0a
 384:	41 87       	std	Z+9, r20	; 0x09
	
	//Task 3
	task3.state = -1;//Init state
 386:	e9 e1       	ldi	r30, 0x19	; 25
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	20 83       	st	Z, r18
	task3.period = period;
 38c:	81 83       	std	Z+1, r24	; 0x01
 38e:	92 83       	std	Z+2, r25	; 0x02
 390:	a3 83       	std	Z+3, r26	; 0x03
 392:	b4 83       	std	Z+4, r27	; 0x04
	task3.elapsedTime = period;
 394:	85 83       	std	Z+5, r24	; 0x05
 396:	96 83       	std	Z+6, r25	; 0x06
 398:	a7 83       	std	Z+7, r26	; 0x07
 39a:	b0 87       	std	Z+8, r27	; 0x08
	task3.TickFct = &SMTick3;
 39c:	40 e9       	ldi	r20, 0x90	; 144
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	52 87       	std	Z+10, r21	; 0x0a
 3a2:	41 87       	std	Z+9, r20	; 0x09
	
	//Task 1
	task4.state = -1;//Init state
 3a4:	ee e0       	ldi	r30, 0x0E	; 14
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	20 83       	st	Z, r18
	task4.period = period;
 3aa:	81 83       	std	Z+1, r24	; 0x01
 3ac:	92 83       	std	Z+2, r25	; 0x02
 3ae:	a3 83       	std	Z+3, r26	; 0x03
 3b0:	b4 83       	std	Z+4, r27	; 0x04
	task4.elapsedTime = period;
 3b2:	85 83       	std	Z+5, r24	; 0x05
 3b4:	96 83       	std	Z+6, r25	; 0x06
 3b6:	a7 83       	std	Z+7, r26	; 0x07
 3b8:	b0 87       	std	Z+8, r27	; 0x08
	task4.TickFct = &SMTick4;
 3ba:	8f eb       	ldi	r24, 0xBF	; 191
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	92 87       	std	Z+10, r25	; 0x0a
 3c0:	81 87       	std	Z+9, r24	; 0x09

	//Initilization
	TimerSet(GCD);
 3c2:	64 ef       	ldi	r22, 0xF4	; 244
 3c4:	71 e0       	ldi	r23, 0x01	; 1
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 3ca:	ef de       	rcall	.-546    	; 0x1aa <TimerSet>
 3cc:	ff de       	rcall	.-514    	; 0x1cc <TimerOn>
 3ce:	7e 01       	movw	r14, r28
 3d0:	89 e0       	ldi	r24, 0x09	; 9
 3d2:	e8 0e       	add	r14, r24
 3d4:	f1 1c       	adc	r15, r1
	uc speed;//Speed setting for timer
	unsigned short i;//Iterator
	
	while (1)
	{
		speed = receivedData & 0x0F;
 3d6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <receivedData>
		pattern = receivedData & 0xF0;//Gets pattern on upper 4 bits
		pattern = pattern >> 4;//Shifts pattern to lower 4 bits
 3da:	98 2f       	mov	r25, r24
 3dc:	92 95       	swap	r25
 3de:	9f 70       	andi	r25, 0x0F	; 15
 3e0:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <pattern>
		TimerSet(updateSpeed(speed));
 3e4:	8f 70       	andi	r24, 0x0F	; 15
 3e6:	67 df       	rcall	.-306    	; 0x2b6 <updateSpeed>
 3e8:	e0 de       	rcall	.-576    	; 0x1aa <TimerSet>
 3ea:	de 01       	movw	r26, r28
 3ec:	11 96       	adiw	r26, 0x01	; 1
 3ee:	6d 01       	movw	r12, r26
 3f0:	f6 01       	movw	r30, r12

		//Scheduler
		for(i = 0; i < numTasks; i++) {
			//Task ready to tick
			if(tasks[i]->elapsedTime >= tasks[i]->period) {
 3f2:	01 91       	ld	r16, Z+
 3f4:	11 91       	ld	r17, Z+
 3f6:	6f 01       	movw	r12, r30
 3f8:	d8 01       	movw	r26, r16
 3fa:	15 96       	adiw	r26, 0x05	; 5
 3fc:	4d 91       	ld	r20, X+
 3fe:	5d 91       	ld	r21, X+
 400:	6d 91       	ld	r22, X+
 402:	7c 91       	ld	r23, X
 404:	18 97       	sbiw	r26, 0x08	; 8
 406:	11 96       	adiw	r26, 0x01	; 1
 408:	8d 91       	ld	r24, X+
 40a:	9d 91       	ld	r25, X+
 40c:	0d 90       	ld	r0, X+
 40e:	bc 91       	ld	r27, X
 410:	a0 2d       	mov	r26, r0
 412:	48 17       	cp	r20, r24
 414:	59 07       	cpc	r21, r25
 416:	6a 07       	cpc	r22, r26
 418:	7b 07       	cpc	r23, r27
 41a:	80 f0       	brcs	.+32     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 41c:	f8 01       	movw	r30, r16
				//Setup next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 41e:	80 81       	ld	r24, Z
 420:	01 84       	ldd	r0, Z+9	; 0x09
 422:	f2 85       	ldd	r31, Z+10	; 0x0a
 424:	e0 2d       	mov	r30, r0
 426:	08 2e       	mov	r0, r24
 428:	00 0c       	add	r0, r0
 42a:	99 0b       	sbc	r25, r25
 42c:	09 95       	icall
 42e:	d8 01       	movw	r26, r16
 430:	8c 93       	st	X, r24
 432:	f8 01       	movw	r30, r16
				//Reset elapsed time
				tasks[i]->elapsedTime = 0;
 434:	15 82       	std	Z+5, r1	; 0x05
 436:	16 82       	std	Z+6, r1	; 0x06
 438:	17 82       	std	Z+7, r1	; 0x07
 43a:	10 86       	std	Z+8, r1	; 0x08
 43c:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 1;
 43e:	85 81       	ldd	r24, Z+5	; 0x05
 440:	96 81       	ldd	r25, Z+6	; 0x06
 442:	a7 81       	ldd	r26, Z+7	; 0x07
 444:	b0 85       	ldd	r27, Z+8	; 0x08
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	a1 1d       	adc	r26, r1
 44a:	b1 1d       	adc	r27, r1
 44c:	85 83       	std	Z+5, r24	; 0x05
 44e:	96 83       	std	Z+6, r25	; 0x06
 450:	a7 83       	std	Z+7, r26	; 0x07
 452:	b0 87       	std	Z+8, r27	; 0x08
 454:	ce 14       	cp	r12, r14
		pattern = receivedData & 0xF0;//Gets pattern on upper 4 bits
		pattern = pattern >> 4;//Shifts pattern to lower 4 bits
		TimerSet(updateSpeed(speed));

		//Scheduler
		for(i = 0; i < numTasks; i++) {
 456:	df 04       	cpc	r13, r15
 458:	59 f6       	brne	.-106    	; 0x3f0 <main+0xd8>
 45a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <TimerFlag>
				//Reset elapsed time
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 45e:	88 23       	and	r24, r24
 460:	e1 f3       	breq	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 462:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <TimerFlag>
		TimerFlag = 0;
 466:	b7 cf       	rjmp	.-146    	; 0x3d6 <main+0xbe>

00000468 <_exit>:
	}
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
